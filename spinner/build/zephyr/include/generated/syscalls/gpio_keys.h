/* auto-generated by gen_syscalls.py, don't edit */

#ifndef Z_INCLUDE_SYSCALLS_GPIO_KEYS_H
#define Z_INCLUDE_SYSCALLS_GPIO_KEYS_H


#include <zephyr/tracing/tracing_syscall.h>

#ifndef _ASMLANGUAGE

#include <syscall_list.h>
#include <zephyr/syscall.h>

#include <zephyr/linker/sections.h>


#ifdef __cplusplus
extern "C" {
#endif

extern int z_impl_gpio_keys_enable_interrupt(const struct device * dev, gpio_keys_callback_handler_t cb);

__pinned_func
static inline int gpio_keys_enable_interrupt(const struct device * dev, gpio_keys_callback_handler_t cb)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		union { uintptr_t x; const struct device * val; } parm0 = { .val = dev };
		union { uintptr_t x; gpio_keys_callback_handler_t val; } parm1 = { .val = cb };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_GPIO_KEYS_ENABLE_INTERRUPT);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_keys_enable_interrupt(dev, cb);
}

#if defined(CONFIG_TRACING_SYSCALL)
#ifndef DISABLE_SYSCALL_TRACING

#define gpio_keys_enable_interrupt(dev, cb) ({ 	int retval; 	sys_port_trace_syscall_enter(K_SYSCALL_GPIO_KEYS_ENABLE_INTERRUPT, gpio_keys_enable_interrupt, dev, cb); 	retval = gpio_keys_enable_interrupt(dev, cb); 	sys_port_trace_syscall_exit(K_SYSCALL_GPIO_KEYS_ENABLE_INTERRUPT, gpio_keys_enable_interrupt, dev, cb, retval); 	retval; })
#endif
#endif


extern int z_impl_gpio_keys_disable_interrupt(const struct device * dev);

__pinned_func
static inline int gpio_keys_disable_interrupt(const struct device * dev)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		union { uintptr_t x; const struct device * val; } parm0 = { .val = dev };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_GPIO_KEYS_DISABLE_INTERRUPT);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_keys_disable_interrupt(dev);
}

#if defined(CONFIG_TRACING_SYSCALL)
#ifndef DISABLE_SYSCALL_TRACING

#define gpio_keys_disable_interrupt(dev) ({ 	int retval; 	sys_port_trace_syscall_enter(K_SYSCALL_GPIO_KEYS_DISABLE_INTERRUPT, gpio_keys_disable_interrupt, dev); 	retval = gpio_keys_disable_interrupt(dev); 	sys_port_trace_syscall_exit(K_SYSCALL_GPIO_KEYS_DISABLE_INTERRUPT, gpio_keys_disable_interrupt, dev, retval); 	retval; })
#endif
#endif


extern int z_impl_gpio_keys_get_pin(const struct device * dev, uint32_t idx);

__pinned_func
static inline int gpio_keys_get_pin(const struct device * dev, uint32_t idx)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		union { uintptr_t x; const struct device * val; } parm0 = { .val = dev };
		union { uintptr_t x; uint32_t val; } parm1 = { .val = idx };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_GPIO_KEYS_GET_PIN);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_keys_get_pin(dev, idx);
}

#if defined(CONFIG_TRACING_SYSCALL)
#ifndef DISABLE_SYSCALL_TRACING

#define gpio_keys_get_pin(dev, idx) ({ 	int retval; 	sys_port_trace_syscall_enter(K_SYSCALL_GPIO_KEYS_GET_PIN, gpio_keys_get_pin, dev, idx); 	retval = gpio_keys_get_pin(dev, idx); 	sys_port_trace_syscall_exit(K_SYSCALL_GPIO_KEYS_GET_PIN, gpio_keys_get_pin, dev, idx, retval); 	retval; })
#endif
#endif


#ifdef __cplusplus
}
#endif

#endif
#endif /* include guard */
