
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

08000000 <_vector_table>:
 8000000:	00 11 00 20 11 22 00 08 b7 41 00 08 e5 21 00 08     ... ."...A...!..
 8000010:	e5 21 00 08 e5 21 00 08 e5 21 00 08 00 00 00 00     .!...!...!......
	...
 800002c:	a5 1e 00 08 e5 21 00 08 00 00 00 00 21 1e 00 08     .....!......!...
 800003c:	a9 27 00 08                                         .'..

08000040 <_irq_vector_table>:
 8000040:	41 1f 00 08 41 1f 00 08 41 1f 00 08 41 1f 00 08     A...A...A...A...
 8000050:	41 1f 00 08 41 1f 00 08 41 1f 00 08 41 1f 00 08     A...A...A...A...
 8000060:	41 1f 00 08 41 1f 00 08 41 1f 00 08 41 1f 00 08     A...A...A...A...
 8000070:	41 1f 00 08 41 1f 00 08 41 1f 00 08 41 1f 00 08     A...A...A...A...
 8000080:	41 1f 00 08 41 1f 00 08 09 29 00 08 41 1f 00 08     A...A....)..A...
 8000090:	41 1f 00 08 41 1f 00 08 41 1f 00 08 41 1f 00 08     A...A...A...A...
 80000a0:	41 1f 00 08 41 1f 00 08 41 1f 00 08 41 1f 00 08     A...A...A...A...
 80000b0:	51 2a 00 08 41 1f 00 08 41 1f 00 08 41 1f 00 08     Q*..A...A...A...
 80000c0:	41 1f 00 08 41 1f 00 08 41 1f 00 08 41 1f 00 08     A...A...A...A...
 80000d0:	41 1f 00 08 41 1f 00 08 41 1f 00 08 41 1f 00 08     A...A...A...A...
 80000e0:	41 1f 00 08 41 1f 00 08 41 1f 00 08 41 1f 00 08     A...A...A...A...
 80000f0:	41 1f 00 08 41 1f 00 08 41 1f 00 08 41 1f 00 08     A...A...A...A...
 8000100:	41 1f 00 08 41 1f 00 08 41 1f 00 08 41 1f 00 08     A...A...A...A...
 8000110:	41 1f 00 08 41 1f 00 08 41 1f 00 08 41 1f 00 08     A...A...A...A...
 8000120:	41 1f 00 08 41 1f 00 08 41 1f 00 08 41 1f 00 08     A...A...A...A...
 8000130:	41 1f 00 08 41 1f 00 08 41 1f 00 08 41 1f 00 08     A...A...A...A...
 8000140:	41 1f 00 08 41 1f 00 08 41 1f 00 08 41 1f 00 08     A...A...A...A...
 8000150:	41 1f 00 08 41 1f 00 08 41 1f 00 08 41 1f 00 08     A...A...A...A...
 8000160:	41 1f 00 08 41 1f 00 08 41 1f 00 08 41 1f 00 08     A...A...A...A...
 8000170:	41 1f 00 08 41 1f 00 08 41 1f 00 08 41 1f 00 08     A...A...A...A...
 8000180:	41 1f 00 08 41 1f 00 08 41 1f 00 08 41 1f 00 08     A...A...A...A...
 8000190:	41 1f 00 08 41 1f 00 08                             A...A...

Disassembly of section text:

080001c0 <strlen>:
 80001c0:	f890 f000 	pld	[r0]
 80001c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 80001c8:	f020 0107 	bic.w	r1, r0, #7
 80001cc:	f06f 0c00 	mvn.w	ip, #0
 80001d0:	f010 0407 	ands.w	r4, r0, #7
 80001d4:	f891 f020 	pld	[r1, #32]
 80001d8:	f040 8049 	bne.w	800026e <strlen+0xae>
 80001dc:	f04f 0400 	mov.w	r4, #0
 80001e0:	f06f 0007 	mvn.w	r0, #7
 80001e4:	e9d1 2300 	ldrd	r2, r3, [r1]
 80001e8:	f891 f040 	pld	[r1, #64]	; 0x40
 80001ec:	f100 0008 	add.w	r0, r0, #8
 80001f0:	fa82 f24c 	uadd8	r2, r2, ip
 80001f4:	faa4 f28c 	sel	r2, r4, ip
 80001f8:	fa83 f34c 	uadd8	r3, r3, ip
 80001fc:	faa2 f38c 	sel	r3, r2, ip
 8000200:	bb4b      	cbnz	r3, 8000256 <strlen+0x96>
 8000202:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8000206:	fa82 f24c 	uadd8	r2, r2, ip
 800020a:	f100 0008 	add.w	r0, r0, #8
 800020e:	faa4 f28c 	sel	r2, r4, ip
 8000212:	fa83 f34c 	uadd8	r3, r3, ip
 8000216:	faa2 f38c 	sel	r3, r2, ip
 800021a:	b9e3      	cbnz	r3, 8000256 <strlen+0x96>
 800021c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 8000220:	fa82 f24c 	uadd8	r2, r2, ip
 8000224:	f100 0008 	add.w	r0, r0, #8
 8000228:	faa4 f28c 	sel	r2, r4, ip
 800022c:	fa83 f34c 	uadd8	r3, r3, ip
 8000230:	faa2 f38c 	sel	r3, r2, ip
 8000234:	b97b      	cbnz	r3, 8000256 <strlen+0x96>
 8000236:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 800023a:	f101 0120 	add.w	r1, r1, #32
 800023e:	fa82 f24c 	uadd8	r2, r2, ip
 8000242:	f100 0008 	add.w	r0, r0, #8
 8000246:	faa4 f28c 	sel	r2, r4, ip
 800024a:	fa83 f34c 	uadd8	r3, r3, ip
 800024e:	faa2 f38c 	sel	r3, r2, ip
 8000252:	2b00      	cmp	r3, #0
 8000254:	d0c6      	beq.n	80001e4 <strlen+0x24>
 8000256:	2a00      	cmp	r2, #0
 8000258:	bf04      	itt	eq
 800025a:	3004      	addeq	r0, #4
 800025c:	461a      	moveq	r2, r3
 800025e:	ba12      	rev	r2, r2
 8000260:	fab2 f282 	clz	r2, r2
 8000264:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 8000268:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 800026c:	4770      	bx	lr
 800026e:	e9d1 2300 	ldrd	r2, r3, [r1]
 8000272:	f004 0503 	and.w	r5, r4, #3
 8000276:	f1c4 0000 	rsb	r0, r4, #0
 800027a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 800027e:	f014 0f04 	tst.w	r4, #4
 8000282:	f891 f040 	pld	[r1, #64]	; 0x40
 8000286:	fa0c f505 	lsl.w	r5, ip, r5
 800028a:	ea62 0205 	orn	r2, r2, r5
 800028e:	bf1c      	itt	ne
 8000290:	ea63 0305 	ornne	r3, r3, r5
 8000294:	4662      	movne	r2, ip
 8000296:	f04f 0400 	mov.w	r4, #0
 800029a:	e7a9      	b.n	80001f0 <strlen+0x30>

0800029c <__aeabi_drsub>:
 800029c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	e002      	b.n	80002a8 <__adddf3>
 80002a2:	bf00      	nop

080002a4 <__aeabi_dsub>:
 80002a4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002a8 <__adddf3>:
 80002a8:	b530      	push	{r4, r5, lr}
 80002aa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ae:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b2:	ea94 0f05 	teq	r4, r5
 80002b6:	bf08      	it	eq
 80002b8:	ea90 0f02 	teqeq	r0, r2
 80002bc:	bf1f      	itttt	ne
 80002be:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002c6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ca:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ce:	f000 80e2 	beq.w	8000496 <__adddf3+0x1ee>
 80002d2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002d6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002da:	bfb8      	it	lt
 80002dc:	426d      	neglt	r5, r5
 80002de:	dd0c      	ble.n	80002fa <__adddf3+0x52>
 80002e0:	442c      	add	r4, r5
 80002e2:	ea80 0202 	eor.w	r2, r0, r2
 80002e6:	ea81 0303 	eor.w	r3, r1, r3
 80002ea:	ea82 0000 	eor.w	r0, r2, r0
 80002ee:	ea83 0101 	eor.w	r1, r3, r1
 80002f2:	ea80 0202 	eor.w	r2, r0, r2
 80002f6:	ea81 0303 	eor.w	r3, r1, r3
 80002fa:	2d36      	cmp	r5, #54	; 0x36
 80002fc:	bf88      	it	hi
 80002fe:	bd30      	pophi	{r4, r5, pc}
 8000300:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000304:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000308:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800030c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000310:	d002      	beq.n	8000318 <__adddf3+0x70>
 8000312:	4240      	negs	r0, r0
 8000314:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000318:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800031c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000320:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x84>
 8000326:	4252      	negs	r2, r2
 8000328:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800032c:	ea94 0f05 	teq	r4, r5
 8000330:	f000 80a7 	beq.w	8000482 <__adddf3+0x1da>
 8000334:	f1a4 0401 	sub.w	r4, r4, #1
 8000338:	f1d5 0e20 	rsbs	lr, r5, #32
 800033c:	db0d      	blt.n	800035a <__adddf3+0xb2>
 800033e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000342:	fa22 f205 	lsr.w	r2, r2, r5
 8000346:	1880      	adds	r0, r0, r2
 8000348:	f141 0100 	adc.w	r1, r1, #0
 800034c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000350:	1880      	adds	r0, r0, r2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	4159      	adcs	r1, r3
 8000358:	e00e      	b.n	8000378 <__adddf3+0xd0>
 800035a:	f1a5 0520 	sub.w	r5, r5, #32
 800035e:	f10e 0e20 	add.w	lr, lr, #32
 8000362:	2a01      	cmp	r2, #1
 8000364:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000368:	bf28      	it	cs
 800036a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	18c0      	adds	r0, r0, r3
 8000374:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000378:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800037c:	d507      	bpl.n	800038e <__adddf3+0xe6>
 800037e:	f04f 0e00 	mov.w	lr, #0
 8000382:	f1dc 0c00 	rsbs	ip, ip, #0
 8000386:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038a:	eb6e 0101 	sbc.w	r1, lr, r1
 800038e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000392:	d31b      	bcc.n	80003cc <__adddf3+0x124>
 8000394:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000398:	d30c      	bcc.n	80003b4 <__adddf3+0x10c>
 800039a:	0849      	lsrs	r1, r1, #1
 800039c:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a4:	f104 0401 	add.w	r4, r4, #1
 80003a8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003ac:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b0:	f080 809a 	bcs.w	80004e8 <__adddf3+0x240>
 80003b4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003b8:	bf08      	it	eq
 80003ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003be:	f150 0000 	adcs.w	r0, r0, #0
 80003c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003c6:	ea41 0105 	orr.w	r1, r1, r5
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d0:	4140      	adcs	r0, r0
 80003d2:	eb41 0101 	adc.w	r1, r1, r1
 80003d6:	3c01      	subs	r4, #1
 80003d8:	bf28      	it	cs
 80003da:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003de:	d2e9      	bcs.n	80003b4 <__adddf3+0x10c>
 80003e0:	f091 0f00 	teq	r1, #0
 80003e4:	bf04      	itt	eq
 80003e6:	4601      	moveq	r1, r0
 80003e8:	2000      	moveq	r0, #0
 80003ea:	fab1 f381 	clz	r3, r1
 80003ee:	bf08      	it	eq
 80003f0:	3320      	addeq	r3, #32
 80003f2:	f1a3 030b 	sub.w	r3, r3, #11
 80003f6:	f1b3 0220 	subs.w	r2, r3, #32
 80003fa:	da0c      	bge.n	8000416 <__adddf3+0x16e>
 80003fc:	320c      	adds	r2, #12
 80003fe:	dd08      	ble.n	8000412 <__adddf3+0x16a>
 8000400:	f102 0c14 	add.w	ip, r2, #20
 8000404:	f1c2 020c 	rsb	r2, r2, #12
 8000408:	fa01 f00c 	lsl.w	r0, r1, ip
 800040c:	fa21 f102 	lsr.w	r1, r1, r2
 8000410:	e00c      	b.n	800042c <__adddf3+0x184>
 8000412:	f102 0214 	add.w	r2, r2, #20
 8000416:	bfd8      	it	le
 8000418:	f1c2 0c20 	rsble	ip, r2, #32
 800041c:	fa01 f102 	lsl.w	r1, r1, r2
 8000420:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000424:	bfdc      	itt	le
 8000426:	ea41 010c 	orrle.w	r1, r1, ip
 800042a:	4090      	lslle	r0, r2
 800042c:	1ae4      	subs	r4, r4, r3
 800042e:	bfa2      	ittt	ge
 8000430:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000434:	4329      	orrge	r1, r5
 8000436:	bd30      	popge	{r4, r5, pc}
 8000438:	ea6f 0404 	mvn.w	r4, r4
 800043c:	3c1f      	subs	r4, #31
 800043e:	da1c      	bge.n	800047a <__adddf3+0x1d2>
 8000440:	340c      	adds	r4, #12
 8000442:	dc0e      	bgt.n	8000462 <__adddf3+0x1ba>
 8000444:	f104 0414 	add.w	r4, r4, #20
 8000448:	f1c4 0220 	rsb	r2, r4, #32
 800044c:	fa20 f004 	lsr.w	r0, r0, r4
 8000450:	fa01 f302 	lsl.w	r3, r1, r2
 8000454:	ea40 0003 	orr.w	r0, r0, r3
 8000458:	fa21 f304 	lsr.w	r3, r1, r4
 800045c:	ea45 0103 	orr.w	r1, r5, r3
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	f1c4 040c 	rsb	r4, r4, #12
 8000466:	f1c4 0220 	rsb	r2, r4, #32
 800046a:	fa20 f002 	lsr.w	r0, r0, r2
 800046e:	fa01 f304 	lsl.w	r3, r1, r4
 8000472:	ea40 0003 	orr.w	r0, r0, r3
 8000476:	4629      	mov	r1, r5
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	fa21 f004 	lsr.w	r0, r1, r4
 800047e:	4629      	mov	r1, r5
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	f094 0f00 	teq	r4, #0
 8000486:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048a:	bf06      	itte	eq
 800048c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000490:	3401      	addeq	r4, #1
 8000492:	3d01      	subne	r5, #1
 8000494:	e74e      	b.n	8000334 <__adddf3+0x8c>
 8000496:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049a:	bf18      	it	ne
 800049c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a0:	d029      	beq.n	80004f6 <__adddf3+0x24e>
 80004a2:	ea94 0f05 	teq	r4, r5
 80004a6:	bf08      	it	eq
 80004a8:	ea90 0f02 	teqeq	r0, r2
 80004ac:	d005      	beq.n	80004ba <__adddf3+0x212>
 80004ae:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b2:	bf04      	itt	eq
 80004b4:	4619      	moveq	r1, r3
 80004b6:	4610      	moveq	r0, r2
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	ea91 0f03 	teq	r1, r3
 80004be:	bf1e      	ittt	ne
 80004c0:	2100      	movne	r1, #0
 80004c2:	2000      	movne	r0, #0
 80004c4:	bd30      	popne	{r4, r5, pc}
 80004c6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ca:	d105      	bne.n	80004d8 <__adddf3+0x230>
 80004cc:	0040      	lsls	r0, r0, #1
 80004ce:	4149      	adcs	r1, r1
 80004d0:	bf28      	it	cs
 80004d2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004d6:	bd30      	pop	{r4, r5, pc}
 80004d8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004dc:	bf3c      	itt	cc
 80004de:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e2:	bd30      	popcc	{r4, r5, pc}
 80004e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004ec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f0:	f04f 0000 	mov.w	r0, #0
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fa:	bf1a      	itte	ne
 80004fc:	4619      	movne	r1, r3
 80004fe:	4610      	movne	r0, r2
 8000500:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000504:	bf1c      	itt	ne
 8000506:	460b      	movne	r3, r1
 8000508:	4602      	movne	r2, r0
 800050a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800050e:	bf06      	itte	eq
 8000510:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000514:	ea91 0f03 	teqeq	r1, r3
 8000518:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	bf00      	nop

08000520 <__aeabi_ui2d>:
 8000520:	f090 0f00 	teq	r0, #0
 8000524:	bf04      	itt	eq
 8000526:	2100      	moveq	r1, #0
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000530:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000534:	f04f 0500 	mov.w	r5, #0
 8000538:	f04f 0100 	mov.w	r1, #0
 800053c:	e750      	b.n	80003e0 <__adddf3+0x138>
 800053e:	bf00      	nop

08000540 <__aeabi_i2d>:
 8000540:	f090 0f00 	teq	r0, #0
 8000544:	bf04      	itt	eq
 8000546:	2100      	moveq	r1, #0
 8000548:	4770      	bxeq	lr
 800054a:	b530      	push	{r4, r5, lr}
 800054c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000550:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000554:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000558:	bf48      	it	mi
 800055a:	4240      	negmi	r0, r0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e73e      	b.n	80003e0 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_f2d>:
 8000564:	0042      	lsls	r2, r0, #1
 8000566:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056a:	ea4f 0131 	mov.w	r1, r1, rrx
 800056e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000572:	bf1f      	itttt	ne
 8000574:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000578:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800057c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000580:	4770      	bxne	lr
 8000582:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000586:	bf08      	it	eq
 8000588:	4770      	bxeq	lr
 800058a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800058e:	bf04      	itt	eq
 8000590:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000594:	4770      	bxeq	lr
 8000596:	b530      	push	{r4, r5, lr}
 8000598:	f44f 7460 	mov.w	r4, #896	; 0x380
 800059c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a4:	e71c      	b.n	80003e0 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_ul2d>:
 80005a8:	ea50 0201 	orrs.w	r2, r0, r1
 80005ac:	bf08      	it	eq
 80005ae:	4770      	bxeq	lr
 80005b0:	b530      	push	{r4, r5, lr}
 80005b2:	f04f 0500 	mov.w	r5, #0
 80005b6:	e00a      	b.n	80005ce <__aeabi_l2d+0x16>

080005b8 <__aeabi_l2d>:
 80005b8:	ea50 0201 	orrs.w	r2, r0, r1
 80005bc:	bf08      	it	eq
 80005be:	4770      	bxeq	lr
 80005c0:	b530      	push	{r4, r5, lr}
 80005c2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005c6:	d502      	bpl.n	80005ce <__aeabi_l2d+0x16>
 80005c8:	4240      	negs	r0, r0
 80005ca:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ce:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005d6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005da:	f43f aed8 	beq.w	800038e <__adddf3+0xe6>
 80005de:	f04f 0203 	mov.w	r2, #3
 80005e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e6:	bf18      	it	ne
 80005e8:	3203      	addne	r2, #3
 80005ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ee:	bf18      	it	ne
 80005f0:	3203      	addne	r2, #3
 80005f2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005f6:	f1c2 0320 	rsb	r3, r2, #32
 80005fa:	fa00 fc03 	lsl.w	ip, r0, r3
 80005fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000602:	fa01 fe03 	lsl.w	lr, r1, r3
 8000606:	ea40 000e 	orr.w	r0, r0, lr
 800060a:	fa21 f102 	lsr.w	r1, r1, r2
 800060e:	4414      	add	r4, r2
 8000610:	e6bd      	b.n	800038e <__adddf3+0xe6>
 8000612:	bf00      	nop

08000614 <__aeabi_dmul>:
 8000614:	b570      	push	{r4, r5, r6, lr}
 8000616:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800061e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000622:	bf1d      	ittte	ne
 8000624:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000628:	ea94 0f0c 	teqne	r4, ip
 800062c:	ea95 0f0c 	teqne	r5, ip
 8000630:	f000 f8de 	bleq	80007f0 <__aeabi_dmul+0x1dc>
 8000634:	442c      	add	r4, r5
 8000636:	ea81 0603 	eor.w	r6, r1, r3
 800063a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800063e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000642:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000646:	bf18      	it	ne
 8000648:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000650:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000654:	d038      	beq.n	80006c8 <__aeabi_dmul+0xb4>
 8000656:	fba0 ce02 	umull	ip, lr, r0, r2
 800065a:	f04f 0500 	mov.w	r5, #0
 800065e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000662:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000666:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066a:	f04f 0600 	mov.w	r6, #0
 800066e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000672:	f09c 0f00 	teq	ip, #0
 8000676:	bf18      	it	ne
 8000678:	f04e 0e01 	orrne.w	lr, lr, #1
 800067c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000680:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000684:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000688:	d204      	bcs.n	8000694 <__aeabi_dmul+0x80>
 800068a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800068e:	416d      	adcs	r5, r5
 8000690:	eb46 0606 	adc.w	r6, r6, r6
 8000694:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000698:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800069c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006ac:	bf88      	it	hi
 80006ae:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b2:	d81e      	bhi.n	80006f2 <__aeabi_dmul+0xde>
 80006b4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006b8:	bf08      	it	eq
 80006ba:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006be:	f150 0000 	adcs.w	r0, r0, #0
 80006c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006c6:	bd70      	pop	{r4, r5, r6, pc}
 80006c8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006cc:	ea46 0101 	orr.w	r1, r6, r1
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	ea81 0103 	eor.w	r1, r1, r3
 80006d8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006dc:	bfc2      	ittt	gt
 80006de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006e6:	bd70      	popgt	{r4, r5, r6, pc}
 80006e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006ec:	f04f 0e00 	mov.w	lr, #0
 80006f0:	3c01      	subs	r4, #1
 80006f2:	f300 80ab 	bgt.w	800084c <__aeabi_dmul+0x238>
 80006f6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fa:	bfde      	ittt	le
 80006fc:	2000      	movle	r0, #0
 80006fe:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000702:	bd70      	pople	{r4, r5, r6, pc}
 8000704:	f1c4 0400 	rsb	r4, r4, #0
 8000708:	3c20      	subs	r4, #32
 800070a:	da35      	bge.n	8000778 <__aeabi_dmul+0x164>
 800070c:	340c      	adds	r4, #12
 800070e:	dc1b      	bgt.n	8000748 <__aeabi_dmul+0x134>
 8000710:	f104 0414 	add.w	r4, r4, #20
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f305 	lsl.w	r3, r0, r5
 800071c:	fa20 f004 	lsr.w	r0, r0, r4
 8000720:	fa01 f205 	lsl.w	r2, r1, r5
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800072c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000730:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000734:	fa21 f604 	lsr.w	r6, r1, r4
 8000738:	eb42 0106 	adc.w	r1, r2, r6
 800073c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000740:	bf08      	it	eq
 8000742:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000746:	bd70      	pop	{r4, r5, r6, pc}
 8000748:	f1c4 040c 	rsb	r4, r4, #12
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f304 	lsl.w	r3, r0, r4
 8000754:	fa20 f005 	lsr.w	r0, r0, r5
 8000758:	fa01 f204 	lsl.w	r2, r1, r4
 800075c:	ea40 0002 	orr.w	r0, r0, r2
 8000760:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	f141 0100 	adc.w	r1, r1, #0
 800076c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000770:	bf08      	it	eq
 8000772:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000776:	bd70      	pop	{r4, r5, r6, pc}
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f205 	lsl.w	r2, r0, r5
 8000780:	ea4e 0e02 	orr.w	lr, lr, r2
 8000784:	fa20 f304 	lsr.w	r3, r0, r4
 8000788:	fa01 f205 	lsl.w	r2, r1, r5
 800078c:	ea43 0302 	orr.w	r3, r3, r2
 8000790:	fa21 f004 	lsr.w	r0, r1, r4
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	fa21 f204 	lsr.w	r2, r1, r4
 800079c:	ea20 0002 	bic.w	r0, r0, r2
 80007a0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a8:	bf08      	it	eq
 80007aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ae:	bd70      	pop	{r4, r5, r6, pc}
 80007b0:	f094 0f00 	teq	r4, #0
 80007b4:	d10f      	bne.n	80007d6 <__aeabi_dmul+0x1c2>
 80007b6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ba:	0040      	lsls	r0, r0, #1
 80007bc:	eb41 0101 	adc.w	r1, r1, r1
 80007c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c4:	bf08      	it	eq
 80007c6:	3c01      	subeq	r4, #1
 80007c8:	d0f7      	beq.n	80007ba <__aeabi_dmul+0x1a6>
 80007ca:	ea41 0106 	orr.w	r1, r1, r6
 80007ce:	f095 0f00 	teq	r5, #0
 80007d2:	bf18      	it	ne
 80007d4:	4770      	bxne	lr
 80007d6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007da:	0052      	lsls	r2, r2, #1
 80007dc:	eb43 0303 	adc.w	r3, r3, r3
 80007e0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e4:	bf08      	it	eq
 80007e6:	3d01      	subeq	r5, #1
 80007e8:	d0f7      	beq.n	80007da <__aeabi_dmul+0x1c6>
 80007ea:	ea43 0306 	orr.w	r3, r3, r6
 80007ee:	4770      	bx	lr
 80007f0:	ea94 0f0c 	teq	r4, ip
 80007f4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f8:	bf18      	it	ne
 80007fa:	ea95 0f0c 	teqne	r5, ip
 80007fe:	d00c      	beq.n	800081a <__aeabi_dmul+0x206>
 8000800:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000804:	bf18      	it	ne
 8000806:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080a:	d1d1      	bne.n	80007b0 <__aeabi_dmul+0x19c>
 800080c:	ea81 0103 	eor.w	r1, r1, r3
 8000810:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000814:	f04f 0000 	mov.w	r0, #0
 8000818:	bd70      	pop	{r4, r5, r6, pc}
 800081a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800081e:	bf06      	itte	eq
 8000820:	4610      	moveq	r0, r2
 8000822:	4619      	moveq	r1, r3
 8000824:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000828:	d019      	beq.n	800085e <__aeabi_dmul+0x24a>
 800082a:	ea94 0f0c 	teq	r4, ip
 800082e:	d102      	bne.n	8000836 <__aeabi_dmul+0x222>
 8000830:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000834:	d113      	bne.n	800085e <__aeabi_dmul+0x24a>
 8000836:	ea95 0f0c 	teq	r5, ip
 800083a:	d105      	bne.n	8000848 <__aeabi_dmul+0x234>
 800083c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000840:	bf1c      	itt	ne
 8000842:	4610      	movne	r0, r2
 8000844:	4619      	movne	r1, r3
 8000846:	d10a      	bne.n	800085e <__aeabi_dmul+0x24a>
 8000848:	ea81 0103 	eor.w	r1, r1, r3
 800084c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000850:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000854:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000862:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000866:	bd70      	pop	{r4, r5, r6, pc}

08000868 <__aeabi_ddiv>:
 8000868:	b570      	push	{r4, r5, r6, lr}
 800086a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800086e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000872:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000876:	bf1d      	ittte	ne
 8000878:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800087c:	ea94 0f0c 	teqne	r4, ip
 8000880:	ea95 0f0c 	teqne	r5, ip
 8000884:	f000 f8a7 	bleq	80009d6 <__aeabi_ddiv+0x16e>
 8000888:	eba4 0405 	sub.w	r4, r4, r5
 800088c:	ea81 0e03 	eor.w	lr, r1, r3
 8000890:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000894:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000898:	f000 8088 	beq.w	80009ac <__aeabi_ddiv+0x144>
 800089c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008ac:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008bc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c0:	429d      	cmp	r5, r3
 80008c2:	bf08      	it	eq
 80008c4:	4296      	cmpeq	r6, r2
 80008c6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ca:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ce:	d202      	bcs.n	80008d6 <__aeabi_ddiv+0x6e>
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	1ab6      	subs	r6, r6, r2
 80008d8:	eb65 0503 	sbc.w	r5, r5, r3
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008e6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ea:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ee:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f2:	bf22      	ittt	cs
 80008f4:	1ab6      	subcs	r6, r6, r2
 80008f6:	4675      	movcs	r5, lr
 80008f8:	ea40 000c 	orrcs.w	r0, r0, ip
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	ebb6 0e02 	subs.w	lr, r6, r2
 8000906:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090a:	bf22      	ittt	cs
 800090c:	1ab6      	subcs	r6, r6, r2
 800090e:	4675      	movcs	r5, lr
 8000910:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	ebb6 0e02 	subs.w	lr, r6, r2
 800091e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000922:	bf22      	ittt	cs
 8000924:	1ab6      	subcs	r6, r6, r2
 8000926:	4675      	movcs	r5, lr
 8000928:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800092c:	085b      	lsrs	r3, r3, #1
 800092e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000932:	ebb6 0e02 	subs.w	lr, r6, r2
 8000936:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093a:	bf22      	ittt	cs
 800093c:	1ab6      	subcs	r6, r6, r2
 800093e:	4675      	movcs	r5, lr
 8000940:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000944:	ea55 0e06 	orrs.w	lr, r5, r6
 8000948:	d018      	beq.n	800097c <__aeabi_ddiv+0x114>
 800094a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800094e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000952:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000956:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800095e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000962:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000966:	d1c0      	bne.n	80008ea <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800096c:	d10b      	bne.n	8000986 <__aeabi_ddiv+0x11e>
 800096e:	ea41 0100 	orr.w	r1, r1, r0
 8000972:	f04f 0000 	mov.w	r0, #0
 8000976:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097a:	e7b6      	b.n	80008ea <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	bf04      	itt	eq
 8000982:	4301      	orreq	r1, r0
 8000984:	2000      	moveq	r0, #0
 8000986:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098a:	bf88      	it	hi
 800098c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000990:	f63f aeaf 	bhi.w	80006f2 <__aeabi_dmul+0xde>
 8000994:	ebb5 0c03 	subs.w	ip, r5, r3
 8000998:	bf04      	itt	eq
 800099a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800099e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a2:	f150 0000 	adcs.w	r0, r0, #0
 80009a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009aa:	bd70      	pop	{r4, r5, r6, pc}
 80009ac:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b8:	bfc2      	ittt	gt
 80009ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c2:	bd70      	popgt	{r4, r5, r6, pc}
 80009c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c8:	f04f 0e00 	mov.w	lr, #0
 80009cc:	3c01      	subs	r4, #1
 80009ce:	e690      	b.n	80006f2 <__aeabi_dmul+0xde>
 80009d0:	ea45 0e06 	orr.w	lr, r5, r6
 80009d4:	e68d      	b.n	80006f2 <__aeabi_dmul+0xde>
 80009d6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009da:	ea94 0f0c 	teq	r4, ip
 80009de:	bf08      	it	eq
 80009e0:	ea95 0f0c 	teqeq	r5, ip
 80009e4:	f43f af3b 	beq.w	800085e <__aeabi_dmul+0x24a>
 80009e8:	ea94 0f0c 	teq	r4, ip
 80009ec:	d10a      	bne.n	8000a04 <__aeabi_ddiv+0x19c>
 80009ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f2:	f47f af34 	bne.w	800085e <__aeabi_dmul+0x24a>
 80009f6:	ea95 0f0c 	teq	r5, ip
 80009fa:	f47f af25 	bne.w	8000848 <__aeabi_dmul+0x234>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e72c      	b.n	800085e <__aeabi_dmul+0x24a>
 8000a04:	ea95 0f0c 	teq	r5, ip
 8000a08:	d106      	bne.n	8000a18 <__aeabi_ddiv+0x1b0>
 8000a0a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a0e:	f43f aefd 	beq.w	800080c <__aeabi_dmul+0x1f8>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e722      	b.n	800085e <__aeabi_dmul+0x24a>
 8000a18:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a1c:	bf18      	it	ne
 8000a1e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a22:	f47f aec5 	bne.w	80007b0 <__aeabi_dmul+0x19c>
 8000a26:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2a:	f47f af0d 	bne.w	8000848 <__aeabi_dmul+0x234>
 8000a2e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a32:	f47f aeeb 	bne.w	800080c <__aeabi_dmul+0x1f8>
 8000a36:	e712      	b.n	800085e <__aeabi_dmul+0x24a>

08000a38 <__aeabi_d2uiz>:
 8000a38:	004a      	lsls	r2, r1, #1
 8000a3a:	d211      	bcs.n	8000a60 <__aeabi_d2uiz+0x28>
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d211      	bcs.n	8000a66 <__aeabi_d2uiz+0x2e>
 8000a42:	d50d      	bpl.n	8000a60 <__aeabi_d2uiz+0x28>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d40e      	bmi.n	8000a6c <__aeabi_d2uiz+0x34>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5e:	4770      	bx	lr
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6a:	d102      	bne.n	8000a72 <__aeabi_d2uiz+0x3a>
 8000a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a70:	4770      	bx	lr
 8000a72:	f04f 0000 	mov.w	r0, #0
 8000a76:	4770      	bx	lr

08000a78 <__aeabi_uldivmod>:
 8000a78:	b953      	cbnz	r3, 8000a90 <__aeabi_uldivmod+0x18>
 8000a7a:	b94a      	cbnz	r2, 8000a90 <__aeabi_uldivmod+0x18>
 8000a7c:	2900      	cmp	r1, #0
 8000a7e:	bf08      	it	eq
 8000a80:	2800      	cmpeq	r0, #0
 8000a82:	bf1c      	itt	ne
 8000a84:	f04f 31ff 	movne.w	r1, #4294967295
 8000a88:	f04f 30ff 	movne.w	r0, #4294967295
 8000a8c:	f000 b80c 	b.w	8000aa8 <__aeabi_idiv0>
 8000a90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a98:	f000 f8a2 	bl	8000be0 <__udivmoddi4>
 8000a9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa4:	b004      	add	sp, #16
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_idiv0>:
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <memcpy>:
 8000aac:	4684      	mov	ip, r0
 8000aae:	ea41 0300 	orr.w	r3, r1, r0
 8000ab2:	f013 0303 	ands.w	r3, r3, #3
 8000ab6:	d16d      	bne.n	8000b94 <memcpy+0xe8>
 8000ab8:	3a40      	subs	r2, #64	; 0x40
 8000aba:	d341      	bcc.n	8000b40 <memcpy+0x94>
 8000abc:	f851 3b04 	ldr.w	r3, [r1], #4
 8000ac0:	f840 3b04 	str.w	r3, [r0], #4
 8000ac4:	f851 3b04 	ldr.w	r3, [r1], #4
 8000ac8:	f840 3b04 	str.w	r3, [r0], #4
 8000acc:	f851 3b04 	ldr.w	r3, [r1], #4
 8000ad0:	f840 3b04 	str.w	r3, [r0], #4
 8000ad4:	f851 3b04 	ldr.w	r3, [r1], #4
 8000ad8:	f840 3b04 	str.w	r3, [r0], #4
 8000adc:	f851 3b04 	ldr.w	r3, [r1], #4
 8000ae0:	f840 3b04 	str.w	r3, [r0], #4
 8000ae4:	f851 3b04 	ldr.w	r3, [r1], #4
 8000ae8:	f840 3b04 	str.w	r3, [r0], #4
 8000aec:	f851 3b04 	ldr.w	r3, [r1], #4
 8000af0:	f840 3b04 	str.w	r3, [r0], #4
 8000af4:	f851 3b04 	ldr.w	r3, [r1], #4
 8000af8:	f840 3b04 	str.w	r3, [r0], #4
 8000afc:	f851 3b04 	ldr.w	r3, [r1], #4
 8000b00:	f840 3b04 	str.w	r3, [r0], #4
 8000b04:	f851 3b04 	ldr.w	r3, [r1], #4
 8000b08:	f840 3b04 	str.w	r3, [r0], #4
 8000b0c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000b10:	f840 3b04 	str.w	r3, [r0], #4
 8000b14:	f851 3b04 	ldr.w	r3, [r1], #4
 8000b18:	f840 3b04 	str.w	r3, [r0], #4
 8000b1c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000b20:	f840 3b04 	str.w	r3, [r0], #4
 8000b24:	f851 3b04 	ldr.w	r3, [r1], #4
 8000b28:	f840 3b04 	str.w	r3, [r0], #4
 8000b2c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000b30:	f840 3b04 	str.w	r3, [r0], #4
 8000b34:	f851 3b04 	ldr.w	r3, [r1], #4
 8000b38:	f840 3b04 	str.w	r3, [r0], #4
 8000b3c:	3a40      	subs	r2, #64	; 0x40
 8000b3e:	d2bd      	bcs.n	8000abc <memcpy+0x10>
 8000b40:	3230      	adds	r2, #48	; 0x30
 8000b42:	d311      	bcc.n	8000b68 <memcpy+0xbc>
 8000b44:	f851 3b04 	ldr.w	r3, [r1], #4
 8000b48:	f840 3b04 	str.w	r3, [r0], #4
 8000b4c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000b50:	f840 3b04 	str.w	r3, [r0], #4
 8000b54:	f851 3b04 	ldr.w	r3, [r1], #4
 8000b58:	f840 3b04 	str.w	r3, [r0], #4
 8000b5c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000b60:	f840 3b04 	str.w	r3, [r0], #4
 8000b64:	3a10      	subs	r2, #16
 8000b66:	d2ed      	bcs.n	8000b44 <memcpy+0x98>
 8000b68:	320c      	adds	r2, #12
 8000b6a:	d305      	bcc.n	8000b78 <memcpy+0xcc>
 8000b6c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000b70:	f840 3b04 	str.w	r3, [r0], #4
 8000b74:	3a04      	subs	r2, #4
 8000b76:	d2f9      	bcs.n	8000b6c <memcpy+0xc0>
 8000b78:	3204      	adds	r2, #4
 8000b7a:	d008      	beq.n	8000b8e <memcpy+0xe2>
 8000b7c:	07d2      	lsls	r2, r2, #31
 8000b7e:	bf1c      	itt	ne
 8000b80:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000b84:	f800 3b01 	strbne.w	r3, [r0], #1
 8000b88:	d301      	bcc.n	8000b8e <memcpy+0xe2>
 8000b8a:	880b      	ldrh	r3, [r1, #0]
 8000b8c:	8003      	strh	r3, [r0, #0]
 8000b8e:	4660      	mov	r0, ip
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	2a08      	cmp	r2, #8
 8000b96:	d313      	bcc.n	8000bc0 <memcpy+0x114>
 8000b98:	078b      	lsls	r3, r1, #30
 8000b9a:	d08d      	beq.n	8000ab8 <memcpy+0xc>
 8000b9c:	f010 0303 	ands.w	r3, r0, #3
 8000ba0:	d08a      	beq.n	8000ab8 <memcpy+0xc>
 8000ba2:	f1c3 0304 	rsb	r3, r3, #4
 8000ba6:	1ad2      	subs	r2, r2, r3
 8000ba8:	07db      	lsls	r3, r3, #31
 8000baa:	bf1c      	itt	ne
 8000bac:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000bb0:	f800 3b01 	strbne.w	r3, [r0], #1
 8000bb4:	d380      	bcc.n	8000ab8 <memcpy+0xc>
 8000bb6:	f831 3b02 	ldrh.w	r3, [r1], #2
 8000bba:	f820 3b02 	strh.w	r3, [r0], #2
 8000bbe:	e77b      	b.n	8000ab8 <memcpy+0xc>
 8000bc0:	3a04      	subs	r2, #4
 8000bc2:	d3d9      	bcc.n	8000b78 <memcpy+0xcc>
 8000bc4:	3a01      	subs	r2, #1
 8000bc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000bca:	f800 3b01 	strb.w	r3, [r0], #1
 8000bce:	d2f9      	bcs.n	8000bc4 <memcpy+0x118>
 8000bd0:	780b      	ldrb	r3, [r1, #0]
 8000bd2:	7003      	strb	r3, [r0, #0]
 8000bd4:	784b      	ldrb	r3, [r1, #1]
 8000bd6:	7043      	strb	r3, [r0, #1]
 8000bd8:	788b      	ldrb	r3, [r1, #2]
 8000bda:	7083      	strb	r3, [r0, #2]
 8000bdc:	4660      	mov	r0, ip
 8000bde:	4770      	bx	lr

08000be0 <__udivmoddi4>:
 8000be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be4:	4686      	mov	lr, r0
 8000be6:	468c      	mov	ip, r1
 8000be8:	4608      	mov	r0, r1
 8000bea:	9e08      	ldr	r6, [sp, #32]
 8000bec:	4615      	mov	r5, r2
 8000bee:	4674      	mov	r4, lr
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f040 80c2 	bne.w	8000d7c <__udivmoddi4+0x19c>
 8000bf8:	4285      	cmp	r5, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d945      	bls.n	8000c8c <__udivmoddi4+0xac>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x36>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c0a:	fa2e f303 	lsr.w	r3, lr, r3
 8000c0e:	4095      	lsls	r5, r2
 8000c10:	ea43 0c0c 	orr.w	ip, r3, ip
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c1a:	b2a8      	uxth	r0, r5
 8000c1c:	fbbc f8fe 	udiv	r8, ip, lr
 8000c20:	0c23      	lsrs	r3, r4, #16
 8000c22:	fb0e cc18 	mls	ip, lr, r8, ip
 8000c26:	fb08 f900 	mul.w	r9, r8, r0
 8000c2a:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 8000c2e:	4599      	cmp	r9, r3
 8000c30:	d928      	bls.n	8000c84 <__udivmoddi4+0xa4>
 8000c32:	18eb      	adds	r3, r5, r3
 8000c34:	f108 37ff 	add.w	r7, r8, #4294967295
 8000c38:	d204      	bcs.n	8000c44 <__udivmoddi4+0x64>
 8000c3a:	4599      	cmp	r9, r3
 8000c3c:	d902      	bls.n	8000c44 <__udivmoddi4+0x64>
 8000c3e:	f1a8 0702 	sub.w	r7, r8, #2
 8000c42:	442b      	add	r3, r5
 8000c44:	eba3 0309 	sub.w	r3, r3, r9
 8000c48:	b2a4      	uxth	r4, r4
 8000c4a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c4e:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c52:	fb0c f000 	mul.w	r0, ip, r0
 8000c56:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5a:	42a0      	cmp	r0, r4
 8000c5c:	d914      	bls.n	8000c88 <__udivmoddi4+0xa8>
 8000c5e:	192c      	adds	r4, r5, r4
 8000c60:	f10c 33ff 	add.w	r3, ip, #4294967295
 8000c64:	d204      	bcs.n	8000c70 <__udivmoddi4+0x90>
 8000c66:	42a0      	cmp	r0, r4
 8000c68:	d902      	bls.n	8000c70 <__udivmoddi4+0x90>
 8000c6a:	f1ac 0302 	sub.w	r3, ip, #2
 8000c6e:	442c      	add	r4, r5
 8000c70:	1a24      	subs	r4, r4, r0
 8000c72:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
 8000c76:	b11e      	cbz	r6, 8000c80 <__udivmoddi4+0xa0>
 8000c78:	40d4      	lsrs	r4, r2
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	6034      	str	r4, [r6, #0]
 8000c7e:	6073      	str	r3, [r6, #4]
 8000c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c84:	4647      	mov	r7, r8
 8000c86:	e7dd      	b.n	8000c44 <__udivmoddi4+0x64>
 8000c88:	4663      	mov	r3, ip
 8000c8a:	e7f1      	b.n	8000c70 <__udivmoddi4+0x90>
 8000c8c:	bb92      	cbnz	r2, 8000cf4 <__udivmoddi4+0x114>
 8000c8e:	1b43      	subs	r3, r0, r5
 8000c90:	2101      	movs	r1, #1
 8000c92:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c96:	b2af      	uxth	r7, r5
 8000c98:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9c:	0c20      	lsrs	r0, r4, #16
 8000c9e:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca2:	fb0c f807 	mul.w	r8, ip, r7
 8000ca6:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000caa:	4598      	cmp	r8, r3
 8000cac:	d962      	bls.n	8000d74 <__udivmoddi4+0x194>
 8000cae:	18eb      	adds	r3, r5, r3
 8000cb0:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb4:	d204      	bcs.n	8000cc0 <__udivmoddi4+0xe0>
 8000cb6:	4598      	cmp	r8, r3
 8000cb8:	d902      	bls.n	8000cc0 <__udivmoddi4+0xe0>
 8000cba:	f1ac 0002 	sub.w	r0, ip, #2
 8000cbe:	442b      	add	r3, r5
 8000cc0:	eba3 0308 	sub.w	r3, r3, r8
 8000cc4:	b2a4      	uxth	r4, r4
 8000cc6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cca:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cce:	fb0c f707 	mul.w	r7, ip, r7
 8000cd2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cd6:	42a7      	cmp	r7, r4
 8000cd8:	d94e      	bls.n	8000d78 <__udivmoddi4+0x198>
 8000cda:	192c      	adds	r4, r5, r4
 8000cdc:	f10c 33ff 	add.w	r3, ip, #4294967295
 8000ce0:	d204      	bcs.n	8000cec <__udivmoddi4+0x10c>
 8000ce2:	42a7      	cmp	r7, r4
 8000ce4:	d902      	bls.n	8000cec <__udivmoddi4+0x10c>
 8000ce6:	f1ac 0302 	sub.w	r3, ip, #2
 8000cea:	442c      	add	r4, r5
 8000cec:	1be4      	subs	r4, r4, r7
 8000cee:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000cf2:	e7c0      	b.n	8000c76 <__udivmoddi4+0x96>
 8000cf4:	f1c2 0320 	rsb	r3, r2, #32
 8000cf8:	fa20 f103 	lsr.w	r1, r0, r3
 8000cfc:	4095      	lsls	r5, r2
 8000cfe:	4090      	lsls	r0, r2
 8000d00:	fa2e f303 	lsr.w	r3, lr, r3
 8000d04:	4303      	orrs	r3, r0
 8000d06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d0a:	b2af      	uxth	r7, r5
 8000d0c:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d10:	fb0e 101c 	mls	r0, lr, ip, r1
 8000d14:	0c19      	lsrs	r1, r3, #16
 8000d16:	fb0c f807 	mul.w	r8, ip, r7
 8000d1a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d1e:	4588      	cmp	r8, r1
 8000d20:	fa04 f402 	lsl.w	r4, r4, r2
 8000d24:	d922      	bls.n	8000d6c <__udivmoddi4+0x18c>
 8000d26:	1869      	adds	r1, r5, r1
 8000d28:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d2c:	d204      	bcs.n	8000d38 <__udivmoddi4+0x158>
 8000d2e:	4588      	cmp	r8, r1
 8000d30:	d902      	bls.n	8000d38 <__udivmoddi4+0x158>
 8000d32:	f1ac 0002 	sub.w	r0, ip, #2
 8000d36:	4429      	add	r1, r5
 8000d38:	eba1 0108 	sub.w	r1, r1, r8
 8000d3c:	b29b      	uxth	r3, r3
 8000d3e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d42:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d46:	fb0c f707 	mul.w	r7, ip, r7
 8000d4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4e:	429f      	cmp	r7, r3
 8000d50:	d90e      	bls.n	8000d70 <__udivmoddi4+0x190>
 8000d52:	18eb      	adds	r3, r5, r3
 8000d54:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000d58:	d204      	bcs.n	8000d64 <__udivmoddi4+0x184>
 8000d5a:	429f      	cmp	r7, r3
 8000d5c:	d902      	bls.n	8000d64 <__udivmoddi4+0x184>
 8000d5e:	f1ac 0102 	sub.w	r1, ip, #2
 8000d62:	442b      	add	r3, r5
 8000d64:	1bdb      	subs	r3, r3, r7
 8000d66:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d6a:	e792      	b.n	8000c92 <__udivmoddi4+0xb2>
 8000d6c:	4660      	mov	r0, ip
 8000d6e:	e7e3      	b.n	8000d38 <__udivmoddi4+0x158>
 8000d70:	4661      	mov	r1, ip
 8000d72:	e7f7      	b.n	8000d64 <__udivmoddi4+0x184>
 8000d74:	4660      	mov	r0, ip
 8000d76:	e7a3      	b.n	8000cc0 <__udivmoddi4+0xe0>
 8000d78:	4663      	mov	r3, ip
 8000d7a:	e7b7      	b.n	8000cec <__udivmoddi4+0x10c>
 8000d7c:	4283      	cmp	r3, r0
 8000d7e:	d906      	bls.n	8000d8e <__udivmoddi4+0x1ae>
 8000d80:	b916      	cbnz	r6, 8000d88 <__udivmoddi4+0x1a8>
 8000d82:	2100      	movs	r1, #0
 8000d84:	4608      	mov	r0, r1
 8000d86:	e77b      	b.n	8000c80 <__udivmoddi4+0xa0>
 8000d88:	e9c6 e000 	strd	lr, r0, [r6]
 8000d8c:	e7f9      	b.n	8000d82 <__udivmoddi4+0x1a2>
 8000d8e:	fab3 f783 	clz	r7, r3
 8000d92:	b98f      	cbnz	r7, 8000db8 <__udivmoddi4+0x1d8>
 8000d94:	4283      	cmp	r3, r0
 8000d96:	d301      	bcc.n	8000d9c <__udivmoddi4+0x1bc>
 8000d98:	4572      	cmp	r2, lr
 8000d9a:	d808      	bhi.n	8000dae <__udivmoddi4+0x1ce>
 8000d9c:	ebbe 0402 	subs.w	r4, lr, r2
 8000da0:	eb60 0303 	sbc.w	r3, r0, r3
 8000da4:	2001      	movs	r0, #1
 8000da6:	469c      	mov	ip, r3
 8000da8:	b91e      	cbnz	r6, 8000db2 <__udivmoddi4+0x1d2>
 8000daa:	2100      	movs	r1, #0
 8000dac:	e768      	b.n	8000c80 <__udivmoddi4+0xa0>
 8000dae:	4638      	mov	r0, r7
 8000db0:	e7fa      	b.n	8000da8 <__udivmoddi4+0x1c8>
 8000db2:	e9c6 4c00 	strd	r4, ip, [r6]
 8000db6:	e7f8      	b.n	8000daa <__udivmoddi4+0x1ca>
 8000db8:	f1c7 0c20 	rsb	ip, r7, #32
 8000dbc:	40bb      	lsls	r3, r7
 8000dbe:	fa22 f40c 	lsr.w	r4, r2, ip
 8000dc2:	431c      	orrs	r4, r3
 8000dc4:	fa2e f10c 	lsr.w	r1, lr, ip
 8000dc8:	fa20 f30c 	lsr.w	r3, r0, ip
 8000dcc:	40b8      	lsls	r0, r7
 8000dce:	4301      	orrs	r1, r0
 8000dd0:	ea4f 4914 	mov.w	r9, r4, lsr #16
 8000dd4:	fa0e f507 	lsl.w	r5, lr, r7
 8000dd8:	fbb3 f8f9 	udiv	r8, r3, r9
 8000ddc:	fa1f fe84 	uxth.w	lr, r4
 8000de0:	fb09 3018 	mls	r0, r9, r8, r3
 8000de4:	0c0b      	lsrs	r3, r1, #16
 8000de6:	fb08 fa0e 	mul.w	sl, r8, lr
 8000dea:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000dee:	459a      	cmp	sl, r3
 8000df0:	fa02 f207 	lsl.w	r2, r2, r7
 8000df4:	d940      	bls.n	8000e78 <__udivmoddi4+0x298>
 8000df6:	18e3      	adds	r3, r4, r3
 8000df8:	f108 30ff 	add.w	r0, r8, #4294967295
 8000dfc:	d204      	bcs.n	8000e08 <__udivmoddi4+0x228>
 8000dfe:	459a      	cmp	sl, r3
 8000e00:	d902      	bls.n	8000e08 <__udivmoddi4+0x228>
 8000e02:	f1a8 0002 	sub.w	r0, r8, #2
 8000e06:	4423      	add	r3, r4
 8000e08:	eba3 030a 	sub.w	r3, r3, sl
 8000e0c:	b289      	uxth	r1, r1
 8000e0e:	fbb3 f8f9 	udiv	r8, r3, r9
 8000e12:	fb09 3318 	mls	r3, r9, r8, r3
 8000e16:	fb08 fe0e 	mul.w	lr, r8, lr
 8000e1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e1e:	458e      	cmp	lr, r1
 8000e20:	d92c      	bls.n	8000e7c <__udivmoddi4+0x29c>
 8000e22:	1861      	adds	r1, r4, r1
 8000e24:	f108 33ff 	add.w	r3, r8, #4294967295
 8000e28:	d204      	bcs.n	8000e34 <__udivmoddi4+0x254>
 8000e2a:	458e      	cmp	lr, r1
 8000e2c:	d902      	bls.n	8000e34 <__udivmoddi4+0x254>
 8000e2e:	f1a8 0302 	sub.w	r3, r8, #2
 8000e32:	4421      	add	r1, r4
 8000e34:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e38:	fba0 9802 	umull	r9, r8, r0, r2
 8000e3c:	eba1 010e 	sub.w	r1, r1, lr
 8000e40:	4541      	cmp	r1, r8
 8000e42:	46ce      	mov	lr, r9
 8000e44:	4643      	mov	r3, r8
 8000e46:	d302      	bcc.n	8000e4e <__udivmoddi4+0x26e>
 8000e48:	d106      	bne.n	8000e58 <__udivmoddi4+0x278>
 8000e4a:	454d      	cmp	r5, r9
 8000e4c:	d204      	bcs.n	8000e58 <__udivmoddi4+0x278>
 8000e4e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e52:	eb68 0304 	sbc.w	r3, r8, r4
 8000e56:	3801      	subs	r0, #1
 8000e58:	2e00      	cmp	r6, #0
 8000e5a:	d0a6      	beq.n	8000daa <__udivmoddi4+0x1ca>
 8000e5c:	ebb5 020e 	subs.w	r2, r5, lr
 8000e60:	eb61 0103 	sbc.w	r1, r1, r3
 8000e64:	fa01 fc0c 	lsl.w	ip, r1, ip
 8000e68:	fa22 f307 	lsr.w	r3, r2, r7
 8000e6c:	ea4c 0303 	orr.w	r3, ip, r3
 8000e70:	40f9      	lsrs	r1, r7
 8000e72:	e9c6 3100 	strd	r3, r1, [r6]
 8000e76:	e798      	b.n	8000daa <__udivmoddi4+0x1ca>
 8000e78:	4640      	mov	r0, r8
 8000e7a:	e7c5      	b.n	8000e08 <__udivmoddi4+0x228>
 8000e7c:	4643      	mov	r3, r8
 8000e7e:	e7d9      	b.n	8000e34 <__udivmoddi4+0x254>

08000e80 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
 8000e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e84:	b09f      	sub	sp, #124	; 0x7c
 8000e86:	4682      	mov	sl, r0
 8000e88:	9103      	str	r1, [sp, #12]
 8000e8a:	4616      	mov	r6, r2
 8000e8c:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
 8000e8e:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
 8000e90:	7830      	ldrb	r0, [r6, #0]
 8000e92:	b910      	cbnz	r0, 8000e9a <z_cbvprintf_impl+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
 8000e94:	4628      	mov	r0, r5
 8000e96:	f000 bd85 	b.w	80019a4 <z_cbvprintf_impl+0xb24>
			OUTC(*fp++);
 8000e9a:	1c73      	adds	r3, r6, #1
		if (*fp != '%') {
 8000e9c:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
 8000e9e:	9306      	str	r3, [sp, #24]
		if (*fp != '%') {
 8000ea0:	d006      	beq.n	8000eb0 <z_cbvprintf_impl+0x30>
			OUTC(*fp++);
 8000ea2:	9903      	ldr	r1, [sp, #12]
			OUTC('%');
 8000ea4:	47d0      	blx	sl
 8000ea6:	2800      	cmp	r0, #0
 8000ea8:	f2c0 857c 	blt.w	80019a4 <z_cbvprintf_impl+0xb24>
 8000eac:	3501      	adds	r5, #1
		if (bps == NULL) {
 8000eae:	e21b      	b.n	80012e8 <z_cbvprintf_impl+0x468>
		} state = {
 8000eb0:	2218      	movs	r2, #24
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	a810      	add	r0, sp, #64	; 0x40
 8000eb6:	f003 f8ad 	bl	8004014 <memset>
	if (*sp == '%') {
 8000eba:	7873      	ldrb	r3, [r6, #1]
 8000ebc:	2b25      	cmp	r3, #37	; 0x25
 8000ebe:	f000 80ba 	beq.w	8001036 <z_cbvprintf_impl+0x1b6>
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	1c71      	adds	r1, r6, #1
 8000ec6:	4698      	mov	r8, r3
 8000ec8:	469e      	mov	lr, r3
 8000eca:	469c      	mov	ip, r3
 8000ecc:	4618      	mov	r0, r3
 8000ece:	460f      	mov	r7, r1
		switch (*sp) {
 8000ed0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000ed4:	2a2b      	cmp	r2, #43	; 0x2b
 8000ed6:	f000 80dd 	beq.w	8001094 <z_cbvprintf_impl+0x214>
 8000eda:	f200 80d4 	bhi.w	8001086 <z_cbvprintf_impl+0x206>
 8000ede:	2a20      	cmp	r2, #32
 8000ee0:	f000 80db 	beq.w	800109a <z_cbvprintf_impl+0x21a>
 8000ee4:	2a23      	cmp	r2, #35	; 0x23
 8000ee6:	f000 80db 	beq.w	80010a0 <z_cbvprintf_impl+0x220>
 8000eea:	b12b      	cbz	r3, 8000ef8 <z_cbvprintf_impl+0x78>
 8000eec:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8000ef0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ef4:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
 8000ef8:	f1b8 0f00 	cmp.w	r8, #0
 8000efc:	d005      	beq.n	8000f0a <z_cbvprintf_impl+0x8a>
 8000efe:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8000f02:	f043 0320 	orr.w	r3, r3, #32
 8000f06:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
 8000f0a:	f1be 0f00 	cmp.w	lr, #0
 8000f0e:	d005      	beq.n	8000f1c <z_cbvprintf_impl+0x9c>
 8000f10:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8000f14:	f043 0310 	orr.w	r3, r3, #16
 8000f18:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
 8000f1c:	f1bc 0f00 	cmp.w	ip, #0
 8000f20:	d005      	beq.n	8000f2e <z_cbvprintf_impl+0xae>
 8000f22:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8000f26:	f043 0308 	orr.w	r3, r3, #8
 8000f2a:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
 8000f2e:	b128      	cbz	r0, 8000f3c <z_cbvprintf_impl+0xbc>
 8000f30:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8000f34:	f043 0304 	orr.w	r3, r3, #4
 8000f38:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (conv->flag_zero && conv->flag_dash) {
 8000f3c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8000f40:	f003 0144 	and.w	r1, r3, #68	; 0x44
 8000f44:	2944      	cmp	r1, #68	; 0x44
 8000f46:	d103      	bne.n	8000f50 <z_cbvprintf_impl+0xd0>
		conv->flag_zero = false;
 8000f48:	f36f 1386 	bfc	r3, #6, #1
 8000f4c:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	conv->width_present = true;
 8000f50:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8000f54:	970e      	str	r7, [sp, #56]	; 0x38
 8000f56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
	if (*sp == '*') {
 8000f5a:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
 8000f5c:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
 8000f60:	f040 80a3 	bne.w	80010aa <z_cbvprintf_impl+0x22a>
		conv->width_star = true;
 8000f64:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		return ++sp;
 8000f70:	1c7b      	adds	r3, r7, #1
	conv->prec_present = (*sp == '.');
 8000f72:	781a      	ldrb	r2, [r3, #0]
 8000f74:	2a2e      	cmp	r2, #46	; 0x2e
 8000f76:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 8000f7a:	bf0c      	ite	eq
 8000f7c:	2101      	moveq	r1, #1
 8000f7e:	2100      	movne	r1, #0
 8000f80:	f361 0241 	bfi	r2, r1, #1, #1
 8000f84:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	if (!conv->prec_present) {
 8000f88:	d10c      	bne.n	8000fa4 <z_cbvprintf_impl+0x124>
	++sp;
 8000f8a:	1c5a      	adds	r2, r3, #1
 8000f8c:	920e      	str	r2, [sp, #56]	; 0x38
	if (*sp == '*') {
 8000f8e:	785a      	ldrb	r2, [r3, #1]
 8000f90:	2a2a      	cmp	r2, #42	; 0x2a
 8000f92:	f040 809a 	bne.w	80010ca <z_cbvprintf_impl+0x24a>
		conv->prec_star = true;
 8000f96:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 8000f9a:	f042 0204 	orr.w	r2, r2, #4
 8000f9e:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		return ++sp;
 8000fa2:	3302      	adds	r3, #2
	switch (*sp) {
 8000fa4:	781a      	ldrb	r2, [r3, #0]
 8000fa6:	2a6c      	cmp	r2, #108	; 0x6c
 8000fa8:	f000 80bb 	beq.w	8001122 <z_cbvprintf_impl+0x2a2>
 8000fac:	f200 809d 	bhi.w	80010ea <z_cbvprintf_impl+0x26a>
 8000fb0:	2a68      	cmp	r2, #104	; 0x68
 8000fb2:	f000 80a3 	beq.w	80010fc <z_cbvprintf_impl+0x27c>
 8000fb6:	2a6a      	cmp	r2, #106	; 0x6a
 8000fb8:	f000 80bc 	beq.w	8001134 <z_cbvprintf_impl+0x2b4>
 8000fbc:	2a4c      	cmp	r2, #76	; 0x4c
 8000fbe:	f000 80c1 	beq.w	8001144 <z_cbvprintf_impl+0x2c4>
	conv->specifier = *sp++;
 8000fc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000fc6:	9306      	str	r3, [sp, #24]
	switch (conv->specifier) {
 8000fc8:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
 8000fca:	f88d 204b 	strb.w	r2, [sp, #75]	; 0x4b
	switch (conv->specifier) {
 8000fce:	f200 8101 	bhi.w	80011d4 <z_cbvprintf_impl+0x354>
 8000fd2:	2a6d      	cmp	r2, #109	; 0x6d
 8000fd4:	f200 80c3 	bhi.w	800115e <z_cbvprintf_impl+0x2de>
 8000fd8:	2a69      	cmp	r2, #105	; 0x69
 8000fda:	f200 80fb 	bhi.w	80011d4 <z_cbvprintf_impl+0x354>
 8000fde:	2a57      	cmp	r2, #87	; 0x57
 8000fe0:	f200 80da 	bhi.w	8001198 <z_cbvprintf_impl+0x318>
 8000fe4:	2a41      	cmp	r2, #65	; 0x41
 8000fe6:	d004      	beq.n	8000ff2 <z_cbvprintf_impl+0x172>
 8000fe8:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
 8000fec:	2b02      	cmp	r3, #2
 8000fee:	f200 80f1 	bhi.w	80011d4 <z_cbvprintf_impl+0x354>
		conv->specifier_cat = SPECIFIER_FP;
 8000ff2:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
			|| (conv->specifier == 'A');
 8000ff6:	f002 02df 	and.w	r2, r2, #223	; 0xdf
		conv->specifier_cat = SPECIFIER_FP;
 8000ffa:	2104      	movs	r1, #4
			|| (conv->specifier == 'A');
 8000ffc:	f1a2 0741 	sub.w	r7, r2, #65	; 0x41
		conv->specifier_cat = SPECIFIER_FP;
 8001000:	f361 0302 	bfi	r3, r1, #0, #3
			|| (conv->specifier == 'A');
 8001004:	427a      	negs	r2, r7
		conv->specifier_a = (conv->specifier == 'a')
 8001006:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
		conv->specifier_cat = SPECIFIER_FP;
 800100a:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
			|| (conv->specifier == 'A');
 800100e:	417a      	adcs	r2, r7
		conv->specifier_a = (conv->specifier == 'a')
 8001010:	f362 11c7 	bfi	r1, r2, #7, #1
		if (conv->specifier_a
 8001014:	060a      	lsls	r2, r1, #24
		conv->specifier_a = (conv->specifier == 'a')
 8001016:	f88d 1049 	strb.w	r1, [sp, #73]	; 0x49
		if (conv->specifier_a
 800101a:	b2cb      	uxtb	r3, r1
 800101c:	f100 8119 	bmi.w	8001252 <z_cbvprintf_impl+0x3d2>
		if (conv->length_mod == LENGTH_L) {
 8001020:	f003 0278 	and.w	r2, r3, #120	; 0x78
 8001024:	2a18      	cmp	r2, #24
 8001026:	f040 8103 	bne.w	8001230 <z_cbvprintf_impl+0x3b0>
			conv->length_mod = LENGTH_NONE;
 800102a:	f36f 03c6 	bfc	r3, #3, #4
 800102e:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
	bool unsupported = false;
 8001032:	2300      	movs	r3, #0
 8001034:	e0f2      	b.n	800121c <z_cbvprintf_impl+0x39c>
		conv->specifier = *sp++;
 8001036:	1cb2      	adds	r2, r6, #2
 8001038:	9206      	str	r2, [sp, #24]
 800103a:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->width_star) {
 800103e:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
 8001042:	07d9      	lsls	r1, r3, #31
 8001044:	f140 8107 	bpl.w	8001256 <z_cbvprintf_impl+0x3d6>
			width = va_arg(ap, int);
 8001048:	f854 2b04 	ldr.w	r2, [r4], #4
 800104c:	9204      	str	r2, [sp, #16]
			if (width < 0) {
 800104e:	2a00      	cmp	r2, #0
 8001050:	da08      	bge.n	8001064 <z_cbvprintf_impl+0x1e4>
				conv->flag_dash = true;
 8001052:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8001056:	f042 0204 	orr.w	r2, r2, #4
 800105a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				width = -width;
 800105e:	9a04      	ldr	r2, [sp, #16]
 8001060:	4252      	negs	r2, r2
		int width = -1;
 8001062:	9204      	str	r2, [sp, #16]
		if (conv->prec_star) {
 8001064:	075a      	lsls	r2, r3, #29
 8001066:	f140 80fe 	bpl.w	8001266 <z_cbvprintf_impl+0x3e6>
			int arg = va_arg(ap, int);
 800106a:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
 800106e:	2f00      	cmp	r7, #0
 8001070:	f280 80fd 	bge.w	800126e <z_cbvprintf_impl+0x3ee>
				conv->prec_present = false;
 8001074:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
 8001078:	f36f 0341 	bfc	r3, #1, #1
 800107c:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		int precision = -1;
 8001080:	f04f 37ff 	mov.w	r7, #4294967295
 8001084:	e0f3      	b.n	800126e <z_cbvprintf_impl+0x3ee>
		switch (*sp) {
 8001086:	2a2d      	cmp	r2, #45	; 0x2d
 8001088:	d00d      	beq.n	80010a6 <z_cbvprintf_impl+0x226>
 800108a:	2a30      	cmp	r2, #48	; 0x30
 800108c:	f47f af2d 	bne.w	8000eea <z_cbvprintf_impl+0x6a>
 8001090:	2301      	movs	r3, #1
	} while (loop);
 8001092:	e71c      	b.n	8000ece <z_cbvprintf_impl+0x4e>
		switch (*sp) {
 8001094:	f04f 0c01 	mov.w	ip, #1
 8001098:	e719      	b.n	8000ece <z_cbvprintf_impl+0x4e>
 800109a:	f04f 0e01 	mov.w	lr, #1
 800109e:	e716      	b.n	8000ece <z_cbvprintf_impl+0x4e>
 80010a0:	f04f 0801 	mov.w	r8, #1
 80010a4:	e713      	b.n	8000ece <z_cbvprintf_impl+0x4e>
 80010a6:	2001      	movs	r0, #1
 80010a8:	e711      	b.n	8000ece <z_cbvprintf_impl+0x4e>
	size_t width = extract_decimal(&sp);
 80010aa:	a80e      	add	r0, sp, #56	; 0x38
 80010ac:	f000 fdae 	bl	8001c0c <extract_decimal>
	if (sp != wp) {
 80010b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80010b2:	42bb      	cmp	r3, r7
 80010b4:	f43f af5d 	beq.w	8000f72 <z_cbvprintf_impl+0xf2>
		conv->unsupported |= ((conv->width_value < 0)
 80010b8:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
		conv->width_value = width;
 80010bc:	9013      	str	r0, [sp, #76]	; 0x4c
				      || (width != (size_t)conv->width_value));
 80010be:	0fc0      	lsrs	r0, r0, #31
		conv->unsupported |= ((conv->width_value < 0)
 80010c0:	f360 0241 	bfi	r2, r0, #1, #1
 80010c4:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
 80010c8:	e753      	b.n	8000f72 <z_cbvprintf_impl+0xf2>
	size_t prec = extract_decimal(&sp);
 80010ca:	a80e      	add	r0, sp, #56	; 0x38
 80010cc:	f000 fd9e 	bl	8001c0c <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
 80010d0:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	conv->prec_value = prec;
 80010d4:	9014      	str	r0, [sp, #80]	; 0x50
	conv->unsupported |= ((conv->prec_value < 0)
 80010d6:	f3c3 0240 	ubfx	r2, r3, #1, #1
 80010da:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
 80010de:	f362 0341 	bfi	r3, r2, #1, #1
 80010e2:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	return sp;
 80010e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80010e8:	e75c      	b.n	8000fa4 <z_cbvprintf_impl+0x124>
	switch (*sp) {
 80010ea:	2a74      	cmp	r2, #116	; 0x74
 80010ec:	d026      	beq.n	800113c <z_cbvprintf_impl+0x2bc>
 80010ee:	2a7a      	cmp	r2, #122	; 0x7a
 80010f0:	f47f af67 	bne.w	8000fc2 <z_cbvprintf_impl+0x142>
		conv->length_mod = LENGTH_Z;
 80010f4:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 80010f8:	2106      	movs	r1, #6
 80010fa:	e00c      	b.n	8001116 <z_cbvprintf_impl+0x296>
		if (*++sp == 'h') {
 80010fc:	785a      	ldrb	r2, [r3, #1]
 80010fe:	2a68      	cmp	r2, #104	; 0x68
 8001100:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 8001104:	d106      	bne.n	8001114 <z_cbvprintf_impl+0x294>
			conv->length_mod = LENGTH_HH;
 8001106:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
 8001108:	f361 02c6 	bfi	r2, r1, #3, #4
 800110c:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
			++sp;
 8001110:	3302      	adds	r3, #2
 8001112:	e756      	b.n	8000fc2 <z_cbvprintf_impl+0x142>
			conv->length_mod = LENGTH_H;
 8001114:	2102      	movs	r1, #2
 8001116:	f361 02c6 	bfi	r2, r1, #3, #4
 800111a:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		if (*++sp == 'h') {
 800111e:	3301      	adds	r3, #1
 8001120:	e74f      	b.n	8000fc2 <z_cbvprintf_impl+0x142>
		if (*++sp == 'l') {
 8001122:	785a      	ldrb	r2, [r3, #1]
 8001124:	2a6c      	cmp	r2, #108	; 0x6c
 8001126:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 800112a:	d101      	bne.n	8001130 <z_cbvprintf_impl+0x2b0>
			conv->length_mod = LENGTH_LL;
 800112c:	2104      	movs	r1, #4
 800112e:	e7eb      	b.n	8001108 <z_cbvprintf_impl+0x288>
			conv->length_mod = LENGTH_L;
 8001130:	2103      	movs	r1, #3
 8001132:	e7f0      	b.n	8001116 <z_cbvprintf_impl+0x296>
		conv->length_mod = LENGTH_J;
 8001134:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 8001138:	2105      	movs	r1, #5
 800113a:	e7ec      	b.n	8001116 <z_cbvprintf_impl+0x296>
		conv->length_mod = LENGTH_T;
 800113c:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 8001140:	2107      	movs	r1, #7
 8001142:	e7e8      	b.n	8001116 <z_cbvprintf_impl+0x296>
		conv->unsupported = true;
 8001144:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8001148:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 800114c:	f022 0202 	bic.w	r2, r2, #2
 8001150:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001154:	f042 0202 	orr.w	r2, r2, #2
 8001158:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
		break;
 800115c:	e7df      	b.n	800111e <z_cbvprintf_impl+0x29e>
	switch (conv->specifier) {
 800115e:	3a6e      	subs	r2, #110	; 0x6e
 8001160:	b2d3      	uxtb	r3, r2
 8001162:	2201      	movs	r2, #1
 8001164:	409a      	lsls	r2, r3
 8001166:	f240 4382 	movw	r3, #1154	; 0x482
 800116a:	421a      	tst	r2, r3
 800116c:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
 8001170:	d137      	bne.n	80011e2 <z_cbvprintf_impl+0x362>
 8001172:	f012 0f24 	tst.w	r2, #36	; 0x24
 8001176:	d15f      	bne.n	8001238 <z_cbvprintf_impl+0x3b8>
 8001178:	07d1      	lsls	r1, r2, #31
 800117a:	d52b      	bpl.n	80011d4 <z_cbvprintf_impl+0x354>
		conv->specifier_cat = SPECIFIER_PTR;
 800117c:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
 8001180:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8001184:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
 8001188:	2103      	movs	r1, #3
 800118a:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
 800118e:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
 8001190:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
 8001194:	4143      	adcs	r3, r0
 8001196:	e041      	b.n	800121c <z_cbvprintf_impl+0x39c>
	switch (conv->specifier) {
 8001198:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
 800119c:	b2c9      	uxtb	r1, r1
 800119e:	2001      	movs	r0, #1
 80011a0:	fa00 f101 	lsl.w	r1, r0, r1
 80011a4:	f411 4f62 	tst.w	r1, #57856	; 0xe200
 80011a8:	f47f af23 	bne.w	8000ff2 <z_cbvprintf_impl+0x172>
 80011ac:	f640 0301 	movw	r3, #2049	; 0x801
 80011b0:	4219      	tst	r1, r3
 80011b2:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
 80011b6:	d11a      	bne.n	80011ee <z_cbvprintf_impl+0x36e>
 80011b8:	f411 3f04 	tst.w	r1, #135168	; 0x21000
 80011bc:	d00a      	beq.n	80011d4 <z_cbvprintf_impl+0x354>
		conv->specifier_cat = SPECIFIER_SINT;
 80011be:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
 80011c2:	f360 0202 	bfi	r2, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
 80011c6:	f003 0378 	and.w	r3, r3, #120	; 0x78
 80011ca:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
 80011cc:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
 80011d0:	f47f af2f 	bne.w	8001032 <z_cbvprintf_impl+0x1b2>
		conv->invalid = true;
 80011d4:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80011d8:	f043 0301 	orr.w	r3, r3, #1
 80011dc:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		break;
 80011e0:	e727      	b.n	8001032 <z_cbvprintf_impl+0x1b2>
		conv->specifier_cat = SPECIFIER_UINT;
 80011e2:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
 80011e6:	2102      	movs	r1, #2
 80011e8:	f361 0202 	bfi	r2, r1, #0, #3
 80011ec:	e7eb      	b.n	80011c6 <z_cbvprintf_impl+0x346>
 80011ee:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
 80011f2:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
 80011f4:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
 80011f8:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
 80011fc:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
 80011fe:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			conv->invalid = true;
 8001202:	bf02      	ittt	eq
 8001204:	f89d 1048 	ldrbeq.w	r1, [sp, #72]	; 0x48
 8001208:	f041 0101 	orreq.w	r1, r1, #1
 800120c:	f88d 1048 	strbeq.w	r1, [sp, #72]	; 0x48
		if (conv->specifier == 'c') {
 8001210:	2a63      	cmp	r2, #99	; 0x63
 8001212:	f47f af0e 	bne.w	8001032 <z_cbvprintf_impl+0x1b2>
			unsupported = (conv->length_mod != LENGTH_NONE);
 8001216:	3b00      	subs	r3, #0
 8001218:	bf18      	it	ne
 800121a:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
 800121c:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8001220:	f3c2 0140 	ubfx	r1, r2, #1, #1
 8001224:	430b      	orrs	r3, r1
 8001226:	f363 0241 	bfi	r2, r3, #1, #1
 800122a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
 800122e:	e706      	b.n	800103e <z_cbvprintf_impl+0x1be>
		} else if ((conv->length_mod != LENGTH_NONE)
 8001230:	f013 0f38 	tst.w	r3, #56	; 0x38
 8001234:	d1ce      	bne.n	80011d4 <z_cbvprintf_impl+0x354>
 8001236:	e6fc      	b.n	8001032 <z_cbvprintf_impl+0x1b2>
		conv->specifier_cat = SPECIFIER_PTR;
 8001238:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
 800123c:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
 800123e:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
 8001242:	f361 0202 	bfi	r2, r1, #0, #3
 8001246:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
 800124a:	bf14      	ite	ne
 800124c:	2301      	movne	r3, #1
 800124e:	2300      	moveq	r3, #0
 8001250:	e7e4      	b.n	800121c <z_cbvprintf_impl+0x39c>
			unsupported = true;
 8001252:	2301      	movs	r3, #1
 8001254:	e7e2      	b.n	800121c <z_cbvprintf_impl+0x39c>
		} else if (conv->width_present) {
 8001256:	f99d 2048 	ldrsb.w	r2, [sp, #72]	; 0x48
 800125a:	2a00      	cmp	r2, #0
			width = conv->width_value;
 800125c:	bfb4      	ite	lt
 800125e:	9a13      	ldrlt	r2, [sp, #76]	; 0x4c
		int width = -1;
 8001260:	f04f 32ff 	movge.w	r2, #4294967295
 8001264:	e6fd      	b.n	8001062 <z_cbvprintf_impl+0x1e2>
		} else if (conv->prec_present) {
 8001266:	079f      	lsls	r7, r3, #30
 8001268:	f57f af0a 	bpl.w	8001080 <z_cbvprintf_impl+0x200>
			precision = conv->prec_value;
 800126c:	9f14      	ldr	r7, [sp, #80]	; 0x50
		conv->pad0_value = 0;
 800126e:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
 8001270:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
		    && (conv->specifier_cat == SPECIFIER_FP)
 8001274:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
 8001278:	f003 0207 	and.w	r2, r3, #7
 800127c:	2a04      	cmp	r2, #4
 800127e:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 8001282:	d107      	bne.n	8001294 <z_cbvprintf_impl+0x414>
		    && !conv->prec_present) {
 8001284:	0790      	lsls	r0, r2, #30
 8001286:	d405      	bmi.n	8001294 <z_cbvprintf_impl+0x414>
			if (conv->specifier_a) {
 8001288:	f99d 1049 	ldrsb.w	r1, [sp, #73]	; 0x49
				precision = FRACTION_HEX;
 800128c:	2900      	cmp	r1, #0
 800128e:	bfac      	ite	ge
 8001290:	2706      	movge	r7, #6
 8001292:	270d      	movlt	r7, #13
		enum specifier_cat_enum specifier_cat
 8001294:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
 8001298:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
 800129a:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
 800129e:	d133      	bne.n	8001308 <z_cbvprintf_impl+0x488>
			switch (length_mod) {
 80012a0:	1ed3      	subs	r3, r2, #3
 80012a2:	2b04      	cmp	r3, #4
 80012a4:	d804      	bhi.n	80012b0 <z_cbvprintf_impl+0x430>
 80012a6:	e8df f003 	tbb	[pc, r3]
 80012aa:	4621      	.short	0x4621
 80012ac:	2146      	.short	0x2146
 80012ae:	21          	.byte	0x21
 80012af:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
 80012b0:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
 80012b2:	2a01      	cmp	r2, #1
				value->sint = va_arg(ap, int);
 80012b4:	ea4f 71e3 	mov.w	r1, r3, asr #31
 80012b8:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
 80012bc:	d11c      	bne.n	80012f8 <z_cbvprintf_impl+0x478>
				value->sint = (signed char)value->sint;
 80012be:	f99d 3040 	ldrsb.w	r3, [sp, #64]	; 0x40
 80012c2:	17d9      	asrs	r1, r3, #31
 80012c4:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
				value->sint = va_arg(ap, int);
 80012c8:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
 80012ca:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80012ce:	9307      	str	r3, [sp, #28]
 80012d0:	0799      	lsls	r1, r3, #30
 80012d2:	d050      	beq.n	8001376 <z_cbvprintf_impl+0x4f6>
			OUTS(sp, fp);
 80012d4:	9b06      	ldr	r3, [sp, #24]
 80012d6:	9903      	ldr	r1, [sp, #12]
 80012d8:	4632      	mov	r2, r6
 80012da:	4650      	mov	r0, sl
 80012dc:	f002 ff47 	bl	800416e <outs>
 80012e0:	2800      	cmp	r0, #0
 80012e2:	f2c0 835f 	blt.w	80019a4 <z_cbvprintf_impl+0xb24>
 80012e6:	4405      	add	r5, r0
			continue;
 80012e8:	9e06      	ldr	r6, [sp, #24]
 80012ea:	e5d1      	b.n	8000e90 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
 80012ec:	f854 3b04 	ldr.w	r3, [r4], #4
 80012f0:	17d9      	asrs	r1, r3, #31
				value->uint = (unsigned char)value->uint;
 80012f2:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
 80012f6:	e7e8      	b.n	80012ca <z_cbvprintf_impl+0x44a>
			} else if (length_mod == LENGTH_H) {
 80012f8:	2a02      	cmp	r2, #2
 80012fa:	d1e5      	bne.n	80012c8 <z_cbvprintf_impl+0x448>
				value->sint = (short)value->sint;
 80012fc:	b219      	sxth	r1, r3
 80012fe:	f343 33c0 	sbfx	r3, r3, #15, #1
 8001302:	e9cd 1310 	strd	r1, r3, [sp, #64]	; 0x40
 8001306:	e7df      	b.n	80012c8 <z_cbvprintf_impl+0x448>
		} else if (specifier_cat == SPECIFIER_UINT) {
 8001308:	2b02      	cmp	r3, #2
 800130a:	d124      	bne.n	8001356 <z_cbvprintf_impl+0x4d6>
			switch (length_mod) {
 800130c:	1ed3      	subs	r3, r2, #3
 800130e:	2b04      	cmp	r3, #4
 8001310:	d804      	bhi.n	800131c <z_cbvprintf_impl+0x49c>
 8001312:	e8df f003 	tbb	[pc, r3]
 8001316:	1018      	.short	0x1018
 8001318:	1810      	.short	0x1810
 800131a:	18          	.byte	0x18
 800131b:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
 800131c:	2a01      	cmp	r2, #1
				value->uint = va_arg(ap, unsigned int);
 800131e:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
 8001322:	f04f 0100 	mov.w	r1, #0
 8001326:	d014      	beq.n	8001352 <z_cbvprintf_impl+0x4d2>
			} else if (length_mod == LENGTH_H) {
 8001328:	2a02      	cmp	r2, #2
				value->uint = va_arg(ap, unsigned int);
 800132a:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
			} else if (length_mod == LENGTH_H) {
 800132e:	d1cc      	bne.n	80012ca <z_cbvprintf_impl+0x44a>
				value->uint = (unsigned short)value->uint;
 8001330:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
 8001332:	9310      	str	r3, [sp, #64]	; 0x40
 8001334:	e7c9      	b.n	80012ca <z_cbvprintf_impl+0x44a>
					(uint_value_type)va_arg(ap,
 8001336:	3407      	adds	r4, #7
 8001338:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
 800133c:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8001340:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
 8001344:	e7c1      	b.n	80012ca <z_cbvprintf_impl+0x44a>
					(uint_value_type)va_arg(ap, size_t);
 8001346:	f854 3b04 	ldr.w	r3, [r4], #4
 800134a:	9310      	str	r3, [sp, #64]	; 0x40
 800134c:	2300      	movs	r3, #0
 800134e:	9311      	str	r3, [sp, #68]	; 0x44
			} else if (length_mod == LENGTH_H) {
 8001350:	e7bb      	b.n	80012ca <z_cbvprintf_impl+0x44a>
				value->uint = (unsigned char)value->uint;
 8001352:	b2db      	uxtb	r3, r3
 8001354:	e7cd      	b.n	80012f2 <z_cbvprintf_impl+0x472>
		} else if (specifier_cat == SPECIFIER_FP) {
 8001356:	2b04      	cmp	r3, #4
 8001358:	d108      	bne.n	800136c <z_cbvprintf_impl+0x4ec>
					(sint_value_type)va_arg(ap, long long);
 800135a:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
 800135c:	f024 0407 	bic.w	r4, r4, #7
 8001360:	e9d4 0100 	ldrd	r0, r1, [r4]
 8001364:	3408      	adds	r4, #8
 8001366:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800136a:	e7ae      	b.n	80012ca <z_cbvprintf_impl+0x44a>
		} else if (specifier_cat == SPECIFIER_PTR) {
 800136c:	2b03      	cmp	r3, #3
 800136e:	d1ac      	bne.n	80012ca <z_cbvprintf_impl+0x44a>
			value->ptr = va_arg(ap, void *);
 8001370:	f854 3b04 	ldr.w	r3, [r4], #4
 8001374:	e7dd      	b.n	8001332 <z_cbvprintf_impl+0x4b2>
		switch (conv->specifier) {
 8001376:	f89d b04b 	ldrb.w	fp, [sp, #75]	; 0x4b
 800137a:	f1bb 0f78 	cmp.w	fp, #120	; 0x78
 800137e:	d8b3      	bhi.n	80012e8 <z_cbvprintf_impl+0x468>
 8001380:	f1bb 0f57 	cmp.w	fp, #87	; 0x57
 8001384:	d849      	bhi.n	800141a <z_cbvprintf_impl+0x59a>
 8001386:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 800138a:	f000 8091 	beq.w	80014b0 <z_cbvprintf_impl+0x630>
 800138e:	f1bb 0f24 	cmp.w	fp, #36	; 0x24
 8001392:	d9a9      	bls.n	80012e8 <z_cbvprintf_impl+0x468>
 8001394:	f1bb 0f41 	cmp.w	fp, #65	; 0x41
 8001398:	d003      	beq.n	80013a2 <z_cbvprintf_impl+0x522>
 800139a:	f1ab 0245 	sub.w	r2, fp, #69	; 0x45
 800139e:	2a02      	cmp	r2, #2
 80013a0:	d8a2      	bhi.n	80012e8 <z_cbvprintf_impl+0x468>
	} u = {
 80013a2:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
	if ((u.u64 & SIGN_MASK) != 0U) {
 80013a6:	2a00      	cmp	r2, #0
 80013a8:	f2c0 8136 	blt.w	8001618 <z_cbvprintf_impl+0x798>
	} else if (conv->flag_plus) {
 80013ac:	9b07      	ldr	r3, [sp, #28]
 80013ae:	071e      	lsls	r6, r3, #28
 80013b0:	f100 8135 	bmi.w	800161e <z_cbvprintf_impl+0x79e>
	} else if (conv->flag_space) {
 80013b4:	f3c3 1900 	ubfx	r9, r3, #4, #1
 80013b8:	ea4f 1949 	mov.w	r9, r9, lsl #5
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
 80013bc:	f3c2 500a 	ubfx	r0, r2, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
 80013c0:	f3c2 0213 	ubfx	r2, r2, #0, #20
	bool is_subnormal = (expo == 0) && (fract != 0);
 80013c4:	2800      	cmp	r0, #0
 80013c6:	f040 812d 	bne.w	8001624 <z_cbvprintf_impl+0x7a4>
 80013ca:	ea51 0602 	orrs.w	r6, r1, r2
 80013ce:	bf14      	ite	ne
 80013d0:	2601      	movne	r6, #1
 80013d2:	2600      	moveq	r6, #0
	fract <<= EXPONENT_BITS;
 80013d4:	02d2      	lsls	r2, r2, #11
 80013d6:	ea42 5251 	orr.w	r2, r2, r1, lsr #21
 80013da:	02c9      	lsls	r1, r1, #11
		c = 'f';
 80013dc:	f1bb 0f46 	cmp.w	fp, #70	; 0x46
	if ((expo | fract) != 0) {
 80013e0:	ea40 0e01 	orr.w	lr, r0, r1
 80013e4:	ea42 7ce0 	orr.w	ip, r2, r0, asr #31
		c = 'f';
 80013e8:	bf08      	it	eq
 80013ea:	f04f 0b66 	moveq.w	fp, #102	; 0x66
	if ((expo | fract) != 0) {
 80013ee:	ea5e 0c0c 	orrs.w	ip, lr, ip
	fract &= ~SIGN_MASK;
 80013f2:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
	if ((expo | fract) != 0) {
 80013f6:	f000 819c 	beq.w	8001732 <z_cbvprintf_impl+0x8b2>
		if (is_subnormal) {
 80013fa:	2e00      	cmp	r6, #0
 80013fc:	f040 8149 	bne.w	8001692 <z_cbvprintf_impl+0x812>
		fract |= BIT_63;
 8001400:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001402:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
 8001406:	f2a0 38fe 	subw	r8, r0, #1022	; 0x3fe
		fract |= BIT_63;
 800140a:	920d      	str	r2, [sp, #52]	; 0x34
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
 800140c:	2000      	movs	r0, #0
 800140e:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8001412:	4606      	mov	r6, r0
		fract *= 5U;
 8001414:	f04f 0c05 	mov.w	ip, #5
 8001418:	e155      	b.n	80016c6 <z_cbvprintf_impl+0x846>
		switch (conv->specifier) {
 800141a:	f1ab 0158 	sub.w	r1, fp, #88	; 0x58
 800141e:	2920      	cmp	r1, #32
 8001420:	f63f af62 	bhi.w	80012e8 <z_cbvprintf_impl+0x468>
 8001424:	a001      	add	r0, pc, #4	; (adr r0, 800142c <z_cbvprintf_impl+0x5ac>)
 8001426:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800142a:	bf00      	nop
 800142c:	080015b7 	.word	0x080015b7
 8001430:	080012e9 	.word	0x080012e9
 8001434:	080012e9 	.word	0x080012e9
 8001438:	080012e9 	.word	0x080012e9
 800143c:	080012e9 	.word	0x080012e9
 8001440:	080012e9 	.word	0x080012e9
 8001444:	080012e9 	.word	0x080012e9
 8001448:	080012e9 	.word	0x080012e9
 800144c:	080012e9 	.word	0x080012e9
 8001450:	080013a3 	.word	0x080013a3
 8001454:	080012e9 	.word	0x080012e9
 8001458:	0800153b 	.word	0x0800153b
 800145c:	0800154f 	.word	0x0800154f
 8001460:	080013a3 	.word	0x080013a3
 8001464:	080013a3 	.word	0x080013a3
 8001468:	080013a3 	.word	0x080013a3
 800146c:	080012e9 	.word	0x080012e9
 8001470:	0800154f 	.word	0x0800154f
 8001474:	080012e9 	.word	0x080012e9
 8001478:	080012e9 	.word	0x080012e9
 800147c:	080012e9 	.word	0x080012e9
 8001480:	080012e9 	.word	0x080012e9
 8001484:	080015f1 	.word	0x080015f1
 8001488:	080015b7 	.word	0x080015b7
 800148c:	080015bd 	.word	0x080015bd
 8001490:	080012e9 	.word	0x080012e9
 8001494:	080012e9 	.word	0x080012e9
 8001498:	080014b7 	.word	0x080014b7
 800149c:	080012e9 	.word	0x080012e9
 80014a0:	080015b7 	.word	0x080015b7
 80014a4:	080012e9 	.word	0x080012e9
 80014a8:	080012e9 	.word	0x080012e9
 80014ac:	080015b7 	.word	0x080015b7
			OUTC('%');
 80014b0:	9903      	ldr	r1, [sp, #12]
 80014b2:	4658      	mov	r0, fp
 80014b4:	e4f6      	b.n	8000ea4 <z_cbvprintf_impl+0x24>
			if (precision >= 0) {
 80014b6:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
 80014b8:	9e10      	ldr	r6, [sp, #64]	; 0x40
			if (precision >= 0) {
 80014ba:	db3a      	blt.n	8001532 <z_cbvprintf_impl+0x6b2>
				len = strnlen(bps, precision);
 80014bc:	4639      	mov	r1, r7
 80014be:	4630      	mov	r0, r6
 80014c0:	f002 fdfa 	bl	80040b8 <strnlen>
			bpe = bps + len;
 80014c4:	1837      	adds	r7, r6, r0
		if (bps == NULL) {
 80014c6:	2e00      	cmp	r6, #0
 80014c8:	f43f af0e 	beq.w	80012e8 <z_cbvprintf_impl+0x468>
		char sign = 0;
 80014cc:	f04f 0900 	mov.w	r9, #0
		if (conv->altform_0c) {
 80014d0:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 80014d4:	f013 0210 	ands.w	r2, r3, #16
 80014d8:	9205      	str	r2, [sp, #20]
 80014da:	f000 8258 	beq.w	800198e <z_cbvprintf_impl+0xb0e>
			nj_len += 2U;
 80014de:	3002      	adds	r0, #2
		if (conv->pad_fp) {
 80014e0:	f013 0340 	ands.w	r3, r3, #64	; 0x40
		nj_len += conv->pad0_value;
 80014e4:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
		if (conv->pad_fp) {
 80014e8:	9308      	str	r3, [sp, #32]
			nj_len += conv->pad0_pre_exp;
 80014ea:	bf18      	it	ne
 80014ec:	9b14      	ldrne	r3, [sp, #80]	; 0x50
		nj_len += conv->pad0_value;
 80014ee:	f8cd 801c 	str.w	r8, [sp, #28]
 80014f2:	4440      	add	r0, r8
			nj_len += conv->pad0_pre_exp;
 80014f4:	bf18      	it	ne
 80014f6:	18c0      	addne	r0, r0, r3
		if (width > 0) {
 80014f8:	9b04      	ldr	r3, [sp, #16]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	f340 8262 	ble.w	80019c4 <z_cbvprintf_impl+0xb44>
			if (!conv->flag_dash) {
 8001500:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
			width -= (int)nj_len;
 8001504:	1a1b      	subs	r3, r3, r0
			if (!conv->flag_dash) {
 8001506:	0750      	lsls	r0, r2, #29
			width -= (int)nj_len;
 8001508:	9304      	str	r3, [sp, #16]
			if (!conv->flag_dash) {
 800150a:	f3c2 0b80 	ubfx	fp, r2, #2, #1
 800150e:	f100 8259 	bmi.w	80019c4 <z_cbvprintf_impl+0xb44>
				if (conv->flag_zero) {
 8001512:	0651      	lsls	r1, r2, #25
 8001514:	f140 8249 	bpl.w	80019aa <z_cbvprintf_impl+0xb2a>
					if (sign != 0) {
 8001518:	f1b9 0f00 	cmp.w	r9, #0
 800151c:	d007      	beq.n	800152e <z_cbvprintf_impl+0x6ae>
						OUTC(sign);
 800151e:	9903      	ldr	r1, [sp, #12]
 8001520:	4648      	mov	r0, r9
 8001522:	47d0      	blx	sl
 8001524:	2800      	cmp	r0, #0
 8001526:	f2c0 823d 	blt.w	80019a4 <z_cbvprintf_impl+0xb24>
 800152a:	3501      	adds	r5, #1
						sign = 0;
 800152c:	46d9      	mov	r9, fp
					pad = '0';
 800152e:	2230      	movs	r2, #48	; 0x30
 8001530:	e23c      	b.n	80019ac <z_cbvprintf_impl+0xb2c>
				len = strlen(bps);
 8001532:	4630      	mov	r0, r6
 8001534:	f7fe fe44 	bl	80001c0 <strlen>
 8001538:	e7c4      	b.n	80014c4 <z_cbvprintf_impl+0x644>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
 800153a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800153c:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		char sign = 0;
 8001540:	f04f 0900 	mov.w	r9, #0
			bpe = buf + 1;
 8001544:	f10d 075d 	add.w	r7, sp, #93	; 0x5d
			bps = buf;
 8001548:	ae17      	add	r6, sp, #92	; 0x5c
		size_t nj_len = (bpe - bps);
 800154a:	2001      	movs	r0, #1
 800154c:	e7c0      	b.n	80014d0 <z_cbvprintf_impl+0x650>
			if (conv->flag_plus) {
 800154e:	9b07      	ldr	r3, [sp, #28]
 8001550:	071a      	lsls	r2, r3, #28
			} else if (conv->flag_space) {
 8001552:	bf58      	it	pl
 8001554:	f3c3 1900 	ubfxpl	r9, r3, #4, #1
			sint = value->sint;
 8001558:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
			} else if (conv->flag_space) {
 800155c:	bf54      	ite	pl
 800155e:	ea4f 1949 	movpl.w	r9, r9, lsl #5
				sign = '+';
 8001562:	f04f 092b 	movmi.w	r9, #43	; 0x2b
			if (sint < 0) {
 8001566:	2b00      	cmp	r3, #0
 8001568:	da06      	bge.n	8001578 <z_cbvprintf_impl+0x6f8>
				value->uint = (uint_value_type)-sint;
 800156a:	4252      	negs	r2, r2
 800156c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001570:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
				sign = '-';
 8001574:	f04f 092d 	mov.w	r9, #45	; 0x2d
			bps = encode_uint(value->uint, conv, buf, bpe);
 8001578:	f10d 0375 	add.w	r3, sp, #117	; 0x75
 800157c:	9300      	str	r3, [sp, #0]
 800157e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8001582:	ab17      	add	r3, sp, #92	; 0x5c
 8001584:	aa12      	add	r2, sp, #72	; 0x48
 8001586:	f000 fb57 	bl	8001c38 <encode_uint>
 800158a:	4606      	mov	r6, r0
			if (precision >= 0) {
 800158c:	2f00      	cmp	r7, #0
 800158e:	db0c      	blt.n	80015aa <z_cbvprintf_impl+0x72a>
				conv->flag_zero = false;
 8001590:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				size_t len = bpe - bps;
 8001594:	f10d 0375 	add.w	r3, sp, #117	; 0x75
 8001598:	1b9b      	subs	r3, r3, r6
				conv->flag_zero = false;
 800159a:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
 800159e:	429f      	cmp	r7, r3
				conv->flag_zero = false;
 80015a0:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				if (len < (size_t)precision) {
 80015a4:	d901      	bls.n	80015aa <z_cbvprintf_impl+0x72a>
					conv->pad0_value = precision - (int)len;
 80015a6:	1afb      	subs	r3, r7, r3
 80015a8:	9313      	str	r3, [sp, #76]	; 0x4c
		if (bps == NULL) {
 80015aa:	2e00      	cmp	r6, #0
 80015ac:	f43f ae9c 	beq.w	80012e8 <z_cbvprintf_impl+0x468>
 80015b0:	f10d 0775 	add.w	r7, sp, #117	; 0x75
 80015b4:	e05b      	b.n	800166e <z_cbvprintf_impl+0x7ee>
		switch (conv->specifier) {
 80015b6:	f04f 0900 	mov.w	r9, #0
 80015ba:	e7dd      	b.n	8001578 <z_cbvprintf_impl+0x6f8>
			if (value->ptr != NULL) {
 80015bc:	9810      	ldr	r0, [sp, #64]	; 0x40
 80015be:	2800      	cmp	r0, #0
 80015c0:	f000 81e0 	beq.w	8001984 <z_cbvprintf_impl+0xb04>
				bps = encode_uint((uintptr_t)value->ptr, conv,
 80015c4:	f10d 0375 	add.w	r3, sp, #117	; 0x75
 80015c8:	9300      	str	r3, [sp, #0]
 80015ca:	aa12      	add	r2, sp, #72	; 0x48
 80015cc:	ab17      	add	r3, sp, #92	; 0x5c
 80015ce:	2100      	movs	r1, #0
 80015d0:	f000 fb32 	bl	8001c38 <encode_uint>
				conv->altform_0c = true;
 80015d4:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
 80015d8:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 80015dc:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
 80015e0:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
 80015e4:	4606      	mov	r6, r0
				conv->altform_0c = true;
 80015e6:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
		char sign = 0;
 80015ea:	f04f 0900 	mov.w	r9, #0
				goto prec_int_pad0;
 80015ee:	e7cd      	b.n	800158c <z_cbvprintf_impl+0x70c>
				store_count(conv, value->ptr, count);
 80015f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
	switch ((enum length_mod_enum)conv->length_mod) {
 80015f2:	2a07      	cmp	r2, #7
 80015f4:	f63f ae78 	bhi.w	80012e8 <z_cbvprintf_impl+0x468>
 80015f8:	e8df f002 	tbb	[pc, r2]
 80015fc:	0c06040c 	.word	0x0c06040c
 8001600:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
 8001604:	701d      	strb	r5, [r3, #0]
		break;
 8001606:	e66f      	b.n	80012e8 <z_cbvprintf_impl+0x468>
		*(short *)dp = (short)count;
 8001608:	801d      	strh	r5, [r3, #0]
		break;
 800160a:	e66d      	b.n	80012e8 <z_cbvprintf_impl+0x468>
		*(intmax_t *)dp = (intmax_t)count;
 800160c:	17ea      	asrs	r2, r5, #31
 800160e:	e9c3 5200 	strd	r5, r2, [r3]
		break;
 8001612:	e669      	b.n	80012e8 <z_cbvprintf_impl+0x468>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
 8001614:	601d      	str	r5, [r3, #0]
		break;
 8001616:	e667      	b.n	80012e8 <z_cbvprintf_impl+0x468>
		*sign = '-';
 8001618:	f04f 092d 	mov.w	r9, #45	; 0x2d
 800161c:	e6ce      	b.n	80013bc <z_cbvprintf_impl+0x53c>
		*sign = '+';
 800161e:	f04f 092b 	mov.w	r9, #43	; 0x2b
 8001622:	e6cb      	b.n	80013bc <z_cbvprintf_impl+0x53c>
	if (expo == BIT_MASK(EXPONENT_BITS)) {
 8001624:	f240 76ff 	movw	r6, #2047	; 0x7ff
 8001628:	42b0      	cmp	r0, r6
 800162a:	d12f      	bne.n	800168c <z_cbvprintf_impl+0x80c>
			if (isupper((unsigned char)c)) {
 800162c:	f10b 0301 	add.w	r3, fp, #1
 8001630:	489f      	ldr	r0, [pc, #636]	; (80018b0 <z_cbvprintf_impl+0xa30>)
 8001632:	b2db      	uxtb	r3, r3
		if (fract == 0) {
 8001634:	430a      	orrs	r2, r1
 8001636:	5cc3      	ldrb	r3, [r0, r3]
 8001638:	f003 0303 	and.w	r3, r3, #3
 800163c:	d11e      	bne.n	800167c <z_cbvprintf_impl+0x7fc>
			if (isupper((unsigned char)c)) {
 800163e:	2b01      	cmp	r3, #1
 8001640:	bf0b      	itete	eq
 8001642:	2349      	moveq	r3, #73	; 0x49
 8001644:	2369      	movne	r3, #105	; 0x69
 8001646:	214e      	moveq	r1, #78	; 0x4e
 8001648:	216e      	movne	r1, #110	; 0x6e
 800164a:	bf0c      	ite	eq
 800164c:	2246      	moveq	r2, #70	; 0x46
 800164e:	2266      	movne	r2, #102	; 0x66
				*buf++ = 'I';
 8001650:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		conv->flag_zero = false;
 8001654:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
				*buf++ = 'N';
 8001658:	f88d 105d 	strb.w	r1, [sp, #93]	; 0x5d
		conv->flag_zero = false;
 800165c:	f36f 1386 	bfc	r3, #6, #1
				*buf++ = 'F';
 8001660:	f88d 205e 	strb.w	r2, [sp, #94]	; 0x5e
		conv->flag_zero = false;
 8001664:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		*bpe = buf;
 8001668:	f10d 075f 	add.w	r7, sp, #95	; 0x5f
				bps = encode_float(value->dbl, conv, precision,
 800166c:	ae17      	add	r6, sp, #92	; 0x5c
		size_t nj_len = (bpe - bps);
 800166e:	1bb8      	subs	r0, r7, r6
		if (sign != 0) {
 8001670:	f1b9 0f00 	cmp.w	r9, #0
 8001674:	f43f af2c 	beq.w	80014d0 <z_cbvprintf_impl+0x650>
			nj_len += 1U;
 8001678:	3001      	adds	r0, #1
 800167a:	e729      	b.n	80014d0 <z_cbvprintf_impl+0x650>
			if (isupper((unsigned char)c)) {
 800167c:	2b01      	cmp	r3, #1
 800167e:	bf15      	itete	ne
 8001680:	236e      	movne	r3, #110	; 0x6e
 8001682:	234e      	moveq	r3, #78	; 0x4e
 8001684:	2161      	movne	r1, #97	; 0x61
 8001686:	2141      	moveq	r1, #65	; 0x41
 8001688:	461a      	mov	r2, r3
 800168a:	e7e1      	b.n	8001650 <z_cbvprintf_impl+0x7d0>
	bool is_subnormal = (expo == 0) && (fract != 0);
 800168c:	2600      	movs	r6, #0
 800168e:	e6a1      	b.n	80013d4 <z_cbvprintf_impl+0x554>
				expo--;
 8001690:	3801      	subs	r0, #1
			while (((fract <<= 1) & BIT_63) == 0) {
 8001692:	1849      	adds	r1, r1, r1
 8001694:	4152      	adcs	r2, r2
 8001696:	2a00      	cmp	r2, #0
 8001698:	dafa      	bge.n	8001690 <z_cbvprintf_impl+0x810>
 800169a:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
 800169e:	e6af      	b.n	8001400 <z_cbvprintf_impl+0x580>
			fract >>= 1;
 80016a0:	0849      	lsrs	r1, r1, #1
 80016a2:	ea41 71c2 	orr.w	r1, r1, r2, lsl #31
 80016a6:	0852      	lsrs	r2, r2, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
 80016a8:	f1b2 3f33 	cmp.w	r2, #858993459	; 0x33333333
 80016ac:	4640      	mov	r0, r8
			expo++;
 80016ae:	f108 0801 	add.w	r8, r8, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
 80016b2:	d2f5      	bcs.n	80016a0 <z_cbvprintf_impl+0x820>
		fract *= 5U;
 80016b4:	fb0c fe02 	mul.w	lr, ip, r2
 80016b8:	fba1 120c 	umull	r1, r2, r1, ip
		expo++;
 80016bc:	f100 0802 	add.w	r8, r0, #2
		fract *= 5U;
 80016c0:	4472      	add	r2, lr
		decexp--;
 80016c2:	3e01      	subs	r6, #1
 80016c4:	2001      	movs	r0, #1
	while (expo < -2) {
 80016c6:	f118 0f02 	cmn.w	r8, #2
 80016ca:	dbe9      	blt.n	80016a0 <z_cbvprintf_impl+0x820>
 80016cc:	b108      	cbz	r0, 80016d2 <z_cbvprintf_impl+0x852>
 80016ce:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
	while (expo > 0) {
 80016d2:	f1b8 0f00 	cmp.w	r8, #0
		fract += 2;
 80016d6:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
	while (expo > 0) {
 80016da:	dc2d      	bgt.n	8001738 <z_cbvprintf_impl+0x8b8>
	fract >>= (4 - expo);
 80016dc:	f1c8 0004 	rsb	r0, r8, #4
 80016e0:	f1a0 0c20 	sub.w	ip, r0, #32
 80016e4:	f108 081c 	add.w	r8, r8, #28
 80016e8:	40c2      	lsrs	r2, r0
 80016ea:	fa01 f808 	lsl.w	r8, r1, r8
 80016ee:	fa21 fc0c 	lsr.w	ip, r1, ip
 80016f2:	40c1      	lsrs	r1, r0
	if ((c == 'g') || (c == 'G')) {
 80016f4:	f00b 00df 	and.w	r0, fp, #223	; 0xdf
	fract >>= (4 - expo);
 80016f8:	ea42 0208 	orr.w	r2, r2, r8
	if ((c == 'g') || (c == 'G')) {
 80016fc:	2847      	cmp	r0, #71	; 0x47
	fract >>= (4 - expo);
 80016fe:	ea42 020c 	orr.w	r2, r2, ip
	if ((c == 'g') || (c == 'G')) {
 8001702:	d13a      	bne.n	800177a <z_cbvprintf_impl+0x8fa>
		if (decexp < (-4 + 1) || decexp > precision) {
 8001704:	1cf0      	adds	r0, r6, #3
 8001706:	db01      	blt.n	800170c <z_cbvprintf_impl+0x88c>
 8001708:	42b7      	cmp	r7, r6
 800170a:	da2b      	bge.n	8001764 <z_cbvprintf_impl+0x8e4>
			c += 'e' - 'g';  /* e or E */
 800170c:	f1ab 0302 	sub.w	r3, fp, #2
			if (precision > 0) {
 8001710:	2f00      	cmp	r7, #0
			c += 'e' - 'g';  /* e or E */
 8001712:	fa5f fb83 	uxtb.w	fp, r3
			if (precision > 0) {
 8001716:	dd7d      	ble.n	8001814 <z_cbvprintf_impl+0x994>
		if (!conv->flag_hash && (precision > 0)) {
 8001718:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 800171c:	0683      	lsls	r3, r0, #26
				precision--;
 800171e:	f107 37ff 	add.w	r7, r7, #4294967295
		if (!conv->flag_hash && (precision > 0)) {
 8001722:	d477      	bmi.n	8001814 <z_cbvprintf_impl+0x994>
 8001724:	1e3b      	subs	r3, r7, #0
 8001726:	bf18      	it	ne
 8001728:	2301      	movne	r3, #1
	bool prune_zero = false;
 800172a:	9305      	str	r3, [sp, #20]
		decimals = precision + 1;
 800172c:	f107 0801 	add.w	r8, r7, #1
 8001730:	e02d      	b.n	800178e <z_cbvprintf_impl+0x90e>
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
 8001732:	f04f 0800 	mov.w	r8, #0
 8001736:	e669      	b.n	800140c <z_cbvprintf_impl+0x58c>
		fract += 2;
 8001738:	3202      	adds	r2, #2
 800173a:	f141 0100 	adc.w	r1, r1, #0
		_ldiv5(&fract);
 800173e:	a80c      	add	r0, sp, #48	; 0x30
		fract += 2;
 8001740:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		_ldiv5(&fract);
 8001744:	f002 fce4 	bl	8004110 <_ldiv5>
		expo--;
 8001748:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
 800174c:	f108 38ff 	add.w	r8, r8, #4294967295
		decexp++;
 8001750:	3601      	adds	r6, #1
			fract <<= 1;
 8001752:	1892      	adds	r2, r2, r2
 8001754:	4149      	adcs	r1, r1
		} while (!(fract & BIT_63));
 8001756:	2900      	cmp	r1, #0
			expo--;
 8001758:	f108 38ff 	add.w	r8, r8, #4294967295
		} while (!(fract & BIT_63));
 800175c:	daf9      	bge.n	8001752 <z_cbvprintf_impl+0x8d2>
 800175e:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
 8001762:	e7b6      	b.n	80016d2 <z_cbvprintf_impl+0x852>
		if (!conv->flag_hash && (precision > 0)) {
 8001764:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8001768:	0698      	lsls	r0, r3, #26
			precision -= decexp;
 800176a:	eba7 0706 	sub.w	r7, r7, r6
		if (!conv->flag_hash && (precision > 0)) {
 800176e:	d44f      	bmi.n	8001810 <z_cbvprintf_impl+0x990>
 8001770:	1e3b      	subs	r3, r7, #0
 8001772:	bf18      	it	ne
 8001774:	2301      	movne	r3, #1
	bool prune_zero = false;
 8001776:	9305      	str	r3, [sp, #20]
 8001778:	e004      	b.n	8001784 <z_cbvprintf_impl+0x904>
 800177a:	2300      	movs	r3, #0
	if (c == 'f') {
 800177c:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
	bool prune_zero = false;
 8001780:	9305      	str	r3, [sp, #20]
	if (c == 'f') {
 8001782:	d1d3      	bne.n	800172c <z_cbvprintf_impl+0x8ac>
		if (decimals < 0) {
 8001784:	eb17 0806 	adds.w	r8, r7, r6
 8001788:	f04f 0b66 	mov.w	fp, #102	; 0x66
 800178c:	d444      	bmi.n	8001818 <z_cbvprintf_impl+0x998>
	if (decimals > 16) {
 800178e:	f1b8 0f10 	cmp.w	r8, #16
 8001792:	bfa8      	it	ge
 8001794:	f04f 0810 	movge.w	r8, #16
	uint64_t round = BIT64(59); /* 0.5 */
 8001798:	ed9f 7b43 	vldr	d7, [pc, #268]	; 80018a8 <z_cbvprintf_impl+0xa28>
 800179c:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80017a0:	2010      	movs	r0, #16
 80017a2:	900b      	str	r0, [sp, #44]	; 0x2c
	*v >>= 1;
 80017a4:	e9dd 030e 	ldrd	r0, r3, [sp, #56]	; 0x38
	while (decimals--) {
 80017a8:	f1b8 0f00 	cmp.w	r8, #0
 80017ac:	d137      	bne.n	800181e <z_cbvprintf_impl+0x99e>
	fract += round;
 80017ae:	1812      	adds	r2, r2, r0
 80017b0:	eb41 0103 	adc.w	r1, r1, r3
	if (fract >= BIT64(60)) {
 80017b4:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 80017b8:	d241      	bcs.n	800183e <z_cbvprintf_impl+0x9be>
	fract += round;
 80017ba:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		if (conv->flag_hash || (precision > 0)) {
 80017be:	9b07      	ldr	r3, [sp, #28]
	if (c == 'f') {
 80017c0:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
		if (conv->flag_hash || (precision > 0)) {
 80017c4:	f003 0220 	and.w	r2, r3, #32
	if (c == 'f') {
 80017c8:	f040 80bb 	bne.w	8001942 <z_cbvprintf_impl+0xac2>
		if (decexp > 0) {
 80017cc:	2e00      	cmp	r6, #0
 80017ce:	dc41      	bgt.n	8001854 <z_cbvprintf_impl+0x9d4>
			*buf++ = '0';
 80017d0:	2130      	movs	r1, #48	; 0x30
 80017d2:	f88d 105c 	strb.w	r1, [sp, #92]	; 0x5c
		if (conv->flag_hash || (precision > 0)) {
 80017d6:	2a00      	cmp	r2, #0
 80017d8:	d16c      	bne.n	80018b4 <z_cbvprintf_impl+0xa34>
 80017da:	2f00      	cmp	r7, #0
 80017dc:	f340 81b5 	ble.w	8001b4a <z_cbvprintf_impl+0xcca>
			*buf++ = '.';
 80017e0:	222e      	movs	r2, #46	; 0x2e
 80017e2:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
		if (decexp < 0 && precision > 0) {
 80017e6:	b186      	cbz	r6, 800180a <z_cbvprintf_impl+0x98a>
			conv->pad0_value = -decexp;
 80017e8:	4272      	negs	r2, r6
 80017ea:	42ba      	cmp	r2, r7
 80017ec:	bfa8      	it	ge
 80017ee:	463a      	movge	r2, r7
			conv->pad_postdp = (conv->pad0_value > 0);
 80017f0:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
 80017f4:	9213      	str	r2, [sp, #76]	; 0x4c
 80017f6:	2a00      	cmp	r2, #0
			precision -= conv->pad0_value;
 80017f8:	eba7 0702 	sub.w	r7, r7, r2
			conv->pad_postdp = (conv->pad0_value > 0);
 80017fc:	bfd4      	ite	le
 80017fe:	2200      	movle	r2, #0
 8001800:	2201      	movgt	r2, #1
 8001802:	f362 1145 	bfi	r1, r2, #5, #1
 8001806:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			*buf++ = '.';
 800180a:	f10d 085e 	add.w	r8, sp, #94	; 0x5e
 800180e:	e039      	b.n	8001884 <z_cbvprintf_impl+0xa04>
	bool prune_zero = false;
 8001810:	2300      	movs	r3, #0
 8001812:	e7b0      	b.n	8001776 <z_cbvprintf_impl+0x8f6>
 8001814:	2300      	movs	r3, #0
 8001816:	e788      	b.n	800172a <z_cbvprintf_impl+0x8aa>
			decimals = 0;
 8001818:	f04f 0800 	mov.w	r8, #0
 800181c:	e7bc      	b.n	8001798 <z_cbvprintf_impl+0x918>
	*v >>= 1;
 800181e:	0840      	lsrs	r0, r0, #1
 8001820:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 8001824:	085b      	lsrs	r3, r3, #1
 8001826:	e9cd 030e 	strd	r0, r3, [sp, #56]	; 0x38
	_ldiv5(v);
 800182a:	a80e      	add	r0, sp, #56	; 0x38
 800182c:	e9cd 2108 	strd	r2, r1, [sp, #32]
 8001830:	f108 38ff 	add.w	r8, r8, #4294967295
 8001834:	f002 fc6c 	bl	8004110 <_ldiv5>
 8001838:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
}
 800183c:	e7b2      	b.n	80017a4 <z_cbvprintf_impl+0x924>
	*v >>= 1;
 800183e:	0852      	lsrs	r2, r2, #1
 8001840:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
	_ldiv5(v);
 8001844:	a80c      	add	r0, sp, #48	; 0x30
	*v >>= 1;
 8001846:	0849      	lsrs	r1, r1, #1
 8001848:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		decexp++;
 800184c:	3601      	adds	r6, #1
	_ldiv5(v);
 800184e:	f002 fc5f 	bl	8004110 <_ldiv5>
		decexp++;
 8001852:	e7b4      	b.n	80017be <z_cbvprintf_impl+0x93e>
	char *buf = bps;
 8001854:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
			while (decexp > 0 && digit_count > 0) {
 8001858:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800185a:	2900      	cmp	r1, #0
 800185c:	dd09      	ble.n	8001872 <z_cbvprintf_impl+0x9f2>
				*buf++ = _get_digit(&fract, &digit_count);
 800185e:	a90b      	add	r1, sp, #44	; 0x2c
 8001860:	a80c      	add	r0, sp, #48	; 0x30
 8001862:	9207      	str	r2, [sp, #28]
 8001864:	f002 fc6c 	bl	8004140 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
 8001868:	3e01      	subs	r6, #1
				*buf++ = _get_digit(&fract, &digit_count);
 800186a:	f808 0b01 	strb.w	r0, [r8], #1
			while (decexp > 0 && digit_count > 0) {
 800186e:	9a07      	ldr	r2, [sp, #28]
 8001870:	d1f2      	bne.n	8001858 <z_cbvprintf_impl+0x9d8>
			conv->pad0_value = decexp;
 8001872:	9613      	str	r6, [sp, #76]	; 0x4c
		if (conv->flag_hash || (precision > 0)) {
 8001874:	b99a      	cbnz	r2, 800189e <z_cbvprintf_impl+0xa1e>
 8001876:	2f00      	cmp	r7, #0
 8001878:	f340 8165 	ble.w	8001b46 <z_cbvprintf_impl+0xcc6>
			*buf++ = '.';
 800187c:	212e      	movs	r1, #46	; 0x2e
 800187e:	f808 1b01 	strb.w	r1, [r8], #1
 8001882:	2600      	movs	r6, #0
	while (precision > 0 && digit_count > 0) {
 8001884:	2f00      	cmp	r7, #0
 8001886:	dd1e      	ble.n	80018c6 <z_cbvprintf_impl+0xa46>
 8001888:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800188a:	2a00      	cmp	r2, #0
 800188c:	dd1b      	ble.n	80018c6 <z_cbvprintf_impl+0xa46>
		*buf++ = _get_digit(&fract, &digit_count);
 800188e:	a90b      	add	r1, sp, #44	; 0x2c
 8001890:	a80c      	add	r0, sp, #48	; 0x30
 8001892:	f002 fc55 	bl	8004140 <_get_digit>
		precision--;
 8001896:	3f01      	subs	r7, #1
		*buf++ = _get_digit(&fract, &digit_count);
 8001898:	f808 0b01 	strb.w	r0, [r8], #1
		precision--;
 800189c:	e7f2      	b.n	8001884 <z_cbvprintf_impl+0xa04>
			*buf++ = '.';
 800189e:	222e      	movs	r2, #46	; 0x2e
 80018a0:	f808 2b01 	strb.w	r2, [r8], #1
 80018a4:	e7ed      	b.n	8001882 <z_cbvprintf_impl+0xa02>
 80018a6:	bf00      	nop
 80018a8:	00000000 	.word	0x00000000
 80018ac:	08000000 	.word	0x08000000
 80018b0:	08005c40 	.word	0x08005c40
 80018b4:	222e      	movs	r2, #46	; 0x2e
 80018b6:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
		if (decexp < 0 && precision > 0) {
 80018ba:	2e00      	cmp	r6, #0
 80018bc:	d0a5      	beq.n	800180a <z_cbvprintf_impl+0x98a>
 80018be:	2f00      	cmp	r7, #0
 80018c0:	dc92      	bgt.n	80017e8 <z_cbvprintf_impl+0x968>
			*buf++ = '.';
 80018c2:	f10d 085e 	add.w	r8, sp, #94	; 0x5e
	if (prune_zero) {
 80018c6:	9b05      	ldr	r3, [sp, #20]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d14e      	bne.n	800196a <z_cbvprintf_impl+0xaea>
	conv->pad0_pre_exp = precision;
 80018cc:	9714      	str	r7, [sp, #80]	; 0x50
 80018ce:	4647      	mov	r7, r8
	if ((c == 'e') || (c == 'E')) {
 80018d0:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80018d4:	2a45      	cmp	r2, #69	; 0x45
 80018d6:	d123      	bne.n	8001920 <z_cbvprintf_impl+0xaa0>
		if (decexp < 0) {
 80018d8:	2e00      	cmp	r6, #0
			decexp = -decexp;
 80018da:	bfba      	itte	lt
 80018dc:	4276      	neglt	r6, r6
			*buf++ = '-';
 80018de:	232d      	movlt	r3, #45	; 0x2d
			*buf++ = '+';
 80018e0:	232b      	movge	r3, #43	; 0x2b
		if (decexp >= 100) {
 80018e2:	2e63      	cmp	r6, #99	; 0x63
			*buf++ = (decexp / 100) + '0';
 80018e4:	bfc8      	it	gt
 80018e6:	2164      	movgt	r1, #100	; 0x64
 80018e8:	707b      	strb	r3, [r7, #1]
			*buf++ = '-';
 80018ea:	bfd1      	iteee	le
 80018ec:	1cba      	addle	r2, r7, #2
			*buf++ = (decexp / 100) + '0';
 80018ee:	fbb6 f3f1 	udivgt	r3, r6, r1
 80018f2:	1cfa      	addgt	r2, r7, #3
 80018f4:	f103 0030 	addgt.w	r0, r3, #48	; 0x30
			decexp %= 100;
 80018f8:	bfc8      	it	gt
 80018fa:	fb01 6613 	mlsgt	r6, r1, r3, r6
		*buf++ = (decexp / 10) + '0';
 80018fe:	f04f 010a 	mov.w	r1, #10
			*buf++ = (decexp / 100) + '0';
 8001902:	bfc8      	it	gt
 8001904:	70b8      	strbgt	r0, [r7, #2]
		*buf++ = c;
 8001906:	f887 b000 	strb.w	fp, [r7]
		*buf++ = (decexp / 10) + '0';
 800190a:	fbb6 f3f1 	udiv	r3, r6, r1
 800190e:	4617      	mov	r7, r2
 8001910:	f103 0030 	add.w	r0, r3, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
 8001914:	fb01 6313 	mls	r3, r1, r3, r6
 8001918:	3330      	adds	r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
 800191a:	f807 0b02 	strb.w	r0, [r7], #2
		*buf++ = (decexp % 10) + '0';
 800191e:	7053      	strb	r3, [r2, #1]
		|| (conv->pad0_pre_exp > 0);
 8001920:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8001922:	2b00      	cmp	r3, #0
 8001924:	dc2c      	bgt.n	8001980 <z_cbvprintf_impl+0xb00>
 8001926:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8001928:	2b00      	cmp	r3, #0
 800192a:	bfd4      	ite	le
 800192c:	2300      	movle	r3, #0
 800192e:	2301      	movgt	r3, #1
	conv->pad_fp = (conv->pad0_value > 0)
 8001930:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
 8001934:	f363 1286 	bfi	r2, r3, #6, #1
	*buf = 0;
 8001938:	2300      	movs	r3, #0
	conv->pad_fp = (conv->pad0_value > 0)
 800193a:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
	*buf = 0;
 800193e:	703b      	strb	r3, [r7, #0]
	return bps;
 8001940:	e694      	b.n	800166c <z_cbvprintf_impl+0x7ec>
		*buf = _get_digit(&fract, &digit_count);
 8001942:	a90b      	add	r1, sp, #44	; 0x2c
 8001944:	a80c      	add	r0, sp, #48	; 0x30
 8001946:	9207      	str	r2, [sp, #28]
 8001948:	f002 fbfa 	bl	8004140 <_get_digit>
		if (*buf++ != '0') {
 800194c:	9a07      	ldr	r2, [sp, #28]
		*buf = _get_digit(&fract, &digit_count);
 800194e:	f88d 005c 	strb.w	r0, [sp, #92]	; 0x5c
		if (*buf++ != '0') {
 8001952:	2830      	cmp	r0, #48	; 0x30
			decexp--;
 8001954:	bf18      	it	ne
 8001956:	f106 36ff 	addne.w	r6, r6, #4294967295
		if (conv->flag_hash || (precision > 0)) {
 800195a:	b912      	cbnz	r2, 8001962 <z_cbvprintf_impl+0xae2>
 800195c:	2f00      	cmp	r7, #0
 800195e:	f340 80f4 	ble.w	8001b4a <z_cbvprintf_impl+0xcca>
			*buf++ = '.';
 8001962:	222e      	movs	r2, #46	; 0x2e
 8001964:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
 8001968:	e74f      	b.n	800180a <z_cbvprintf_impl+0x98a>
		while (*--buf == '0') {
 800196a:	4647      	mov	r7, r8
 800196c:	f108 38ff 	add.w	r8, r8, #4294967295
 8001970:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8001974:	2a30      	cmp	r2, #48	; 0x30
 8001976:	d0f8      	beq.n	800196a <z_cbvprintf_impl+0xaea>
 8001978:	2a2e      	cmp	r2, #46	; 0x2e
 800197a:	bf08      	it	eq
 800197c:	4647      	moveq	r7, r8
 800197e:	e7a7      	b.n	80018d0 <z_cbvprintf_impl+0xa50>
		|| (conv->pad0_pre_exp > 0);
 8001980:	2301      	movs	r3, #1
 8001982:	e7d5      	b.n	8001930 <z_cbvprintf_impl+0xab0>
			bpe = bps + 5;
 8001984:	4f72      	ldr	r7, [pc, #456]	; (8001b50 <z_cbvprintf_impl+0xcd0>)
		char sign = 0;
 8001986:	4681      	mov	r9, r0
			bps = "(nil)";
 8001988:	1f7e      	subs	r6, r7, #5
		size_t nj_len = (bpe - bps);
 800198a:	2005      	movs	r0, #5
 800198c:	e5a0      	b.n	80014d0 <z_cbvprintf_impl+0x650>
		} else if (conv->altform_0) {
 800198e:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
 8001990:	bf48      	it	mi
 8001992:	3001      	addmi	r0, #1
 8001994:	e5a4      	b.n	80014e0 <z_cbvprintf_impl+0x660>
					OUTC(pad);
 8001996:	4610      	mov	r0, r2
 8001998:	9209      	str	r2, [sp, #36]	; 0x24
 800199a:	9903      	ldr	r1, [sp, #12]
 800199c:	47d0      	blx	sl
 800199e:	2800      	cmp	r0, #0
 80019a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80019a2:	da05      	bge.n	80019b0 <z_cbvprintf_impl+0xb30>
#undef OUTS
#undef OUTC
}
 80019a4:	b01f      	add	sp, #124	; 0x7c
 80019a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
 80019aa:	2220      	movs	r2, #32
					pad = '0';
 80019ac:	f8dd b010 	ldr.w	fp, [sp, #16]
				while (width-- > 0) {
 80019b0:	4659      	mov	r1, fp
 80019b2:	2900      	cmp	r1, #0
 80019b4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80019b8:	dced      	bgt.n	8001996 <z_cbvprintf_impl+0xb16>
 80019ba:	9b04      	ldr	r3, [sp, #16]
 80019bc:	f8cd b010 	str.w	fp, [sp, #16]
 80019c0:	442b      	add	r3, r5
 80019c2:	1a5d      	subs	r5, r3, r1
		if (sign != 0) {
 80019c4:	f1b9 0f00 	cmp.w	r9, #0
 80019c8:	d005      	beq.n	80019d6 <z_cbvprintf_impl+0xb56>
			OUTC(sign);
 80019ca:	9903      	ldr	r1, [sp, #12]
 80019cc:	4648      	mov	r0, r9
 80019ce:	47d0      	blx	sl
 80019d0:	2800      	cmp	r0, #0
 80019d2:	dbe7      	blt.n	80019a4 <z_cbvprintf_impl+0xb24>
 80019d4:	3501      	adds	r5, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
 80019d6:	9b08      	ldr	r3, [sp, #32]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d079      	beq.n	8001ad0 <z_cbvprintf_impl+0xc50>
			if (conv->specifier_a) {
 80019dc:	f99d 3049 	ldrsb.w	r3, [sp, #73]	; 0x49
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	db29      	blt.n	8001a38 <z_cbvprintf_impl+0xbb8>
				while (isdigit((unsigned char)*cp)) {
 80019e4:	f8df 916c 	ldr.w	r9, [pc, #364]	; 8001b54 <z_cbvprintf_impl+0xcd4>
			if (conv->specifier_a) {
 80019e8:	4633      	mov	r3, r6
				while (isdigit((unsigned char)*cp)) {
 80019ea:	7818      	ldrb	r0, [r3, #0]
 80019ec:	f819 2000 	ldrb.w	r2, [r9, r0]
 80019f0:	0752      	lsls	r2, r2, #29
 80019f2:	469b      	mov	fp, r3
 80019f4:	f103 0301 	add.w	r3, r3, #1
 80019f8:	d43f      	bmi.n	8001a7a <z_cbvprintf_impl+0xbfa>
				if (!conv->pad_postdp) {
 80019fa:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 80019fe:	1bae      	subs	r6, r5, r6
 8001a00:	0698      	lsls	r0, r3, #26
 8001a02:	445e      	add	r6, fp
 8001a04:	d407      	bmi.n	8001a16 <z_cbvprintf_impl+0xb96>
					while (pad_len-- > 0) {
 8001a06:	4642      	mov	r2, r8
 8001a08:	2a00      	cmp	r2, #0
 8001a0a:	f108 38ff 	add.w	r8, r8, #4294967295
 8001a0e:	dc3b      	bgt.n	8001a88 <z_cbvprintf_impl+0xc08>
 8001a10:	9b07      	ldr	r3, [sp, #28]
 8001a12:	4433      	add	r3, r6
 8001a14:	1a9e      	subs	r6, r3, r2
				if (*cp == '.') {
 8001a16:	f89b 0000 	ldrb.w	r0, [fp]
 8001a1a:	282e      	cmp	r0, #46	; 0x2e
 8001a1c:	d10a      	bne.n	8001a34 <z_cbvprintf_impl+0xbb4>
					OUTC(*cp++);
 8001a1e:	9903      	ldr	r1, [sp, #12]
 8001a20:	47d0      	blx	sl
						OUTC('0');
 8001a22:	2800      	cmp	r0, #0
 8001a24:	dbbe      	blt.n	80019a4 <z_cbvprintf_impl+0xb24>
					while (pad_len-- > 0) {
 8001a26:	f1b8 0f00 	cmp.w	r8, #0
						OUTC('0');
 8001a2a:	f106 0601 	add.w	r6, r6, #1
					while (pad_len-- > 0) {
 8001a2e:	dc31      	bgt.n	8001a94 <z_cbvprintf_impl+0xc14>
					OUTC(*cp++);
 8001a30:	f10b 0b01 	add.w	fp, fp, #1
			if (conv->specifier_a) {
 8001a34:	465d      	mov	r5, fp
 8001a36:	e038      	b.n	8001aaa <z_cbvprintf_impl+0xc2a>
 8001a38:	46b1      	mov	r9, r6
				while (*cp != 'p') {
 8001a3a:	f899 0000 	ldrb.w	r0, [r9]
 8001a3e:	2870      	cmp	r0, #112	; 0x70
 8001a40:	46c8      	mov	r8, r9
 8001a42:	f109 0901 	add.w	r9, r9, #1
 8001a46:	d113      	bne.n	8001a70 <z_cbvprintf_impl+0xbf0>
 8001a48:	1bae      	subs	r6, r5, r6
 8001a4a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8001a4c:	4446      	add	r6, r8
			while (pad_len-- > 0) {
 8001a4e:	4435      	add	r5, r6
 8001a50:	1bab      	subs	r3, r5, r6
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	dc34      	bgt.n	8001ac0 <z_cbvprintf_impl+0xc40>
			OUTS(cp, bpe);
 8001a56:	9903      	ldr	r1, [sp, #12]
 8001a58:	463b      	mov	r3, r7
 8001a5a:	4642      	mov	r2, r8
 8001a5c:	4650      	mov	r0, sl
 8001a5e:	f002 fb86 	bl	800416e <outs>
 8001a62:	2800      	cmp	r0, #0
 8001a64:	db9e      	blt.n	80019a4 <z_cbvprintf_impl+0xb24>
 8001a66:	4430      	add	r0, r6
 8001a68:	9e04      	ldr	r6, [sp, #16]
			while (pad_len-- > 0) {
 8001a6a:	4605      	mov	r5, r0
 8001a6c:	4406      	add	r6, r0
 8001a6e:	e065      	b.n	8001b3c <z_cbvprintf_impl+0xcbc>
					OUTC(*cp++);
 8001a70:	9903      	ldr	r1, [sp, #12]
 8001a72:	47d0      	blx	sl
 8001a74:	2800      	cmp	r0, #0
 8001a76:	dae0      	bge.n	8001a3a <z_cbvprintf_impl+0xbba>
 8001a78:	e794      	b.n	80019a4 <z_cbvprintf_impl+0xb24>
 8001a7a:	9305      	str	r3, [sp, #20]
					OUTC(*cp++);
 8001a7c:	9903      	ldr	r1, [sp, #12]
 8001a7e:	47d0      	blx	sl
 8001a80:	2800      	cmp	r0, #0
 8001a82:	9b05      	ldr	r3, [sp, #20]
 8001a84:	dab1      	bge.n	80019ea <z_cbvprintf_impl+0xb6a>
 8001a86:	e78d      	b.n	80019a4 <z_cbvprintf_impl+0xb24>
						OUTC('0');
 8001a88:	9903      	ldr	r1, [sp, #12]
 8001a8a:	2030      	movs	r0, #48	; 0x30
 8001a8c:	47d0      	blx	sl
 8001a8e:	2800      	cmp	r0, #0
 8001a90:	dab9      	bge.n	8001a06 <z_cbvprintf_impl+0xb86>
 8001a92:	e787      	b.n	80019a4 <z_cbvprintf_impl+0xb24>
						OUTC('0');
 8001a94:	9903      	ldr	r1, [sp, #12]
 8001a96:	2030      	movs	r0, #48	; 0x30
 8001a98:	47d0      	blx	sl
 8001a9a:	f108 38ff 	add.w	r8, r8, #4294967295
 8001a9e:	e7c0      	b.n	8001a22 <z_cbvprintf_impl+0xba2>
					OUTC(*cp++);
 8001aa0:	9903      	ldr	r1, [sp, #12]
 8001aa2:	47d0      	blx	sl
 8001aa4:	2800      	cmp	r0, #0
 8001aa6:	f6ff af7d 	blt.w	80019a4 <z_cbvprintf_impl+0xb24>
				while (isdigit((unsigned char)*cp)) {
 8001aaa:	7828      	ldrb	r0, [r5, #0]
 8001aac:	f819 3000 	ldrb.w	r3, [r9, r0]
 8001ab0:	0759      	lsls	r1, r3, #29
 8001ab2:	46a8      	mov	r8, r5
 8001ab4:	f105 0501 	add.w	r5, r5, #1
 8001ab8:	d4f2      	bmi.n	8001aa0 <z_cbvprintf_impl+0xc20>
 8001aba:	eba6 060b 	sub.w	r6, r6, fp
 8001abe:	e7c4      	b.n	8001a4a <z_cbvprintf_impl+0xbca>
				OUTC('0');
 8001ac0:	9903      	ldr	r1, [sp, #12]
 8001ac2:	2030      	movs	r0, #48	; 0x30
 8001ac4:	47d0      	blx	sl
 8001ac6:	2800      	cmp	r0, #0
 8001ac8:	f6ff af6c 	blt.w	80019a4 <z_cbvprintf_impl+0xb24>
 8001acc:	3601      	adds	r6, #1
 8001ace:	e7bf      	b.n	8001a50 <z_cbvprintf_impl+0xbd0>
			if (conv->altform_0c | conv->altform_0) {
 8001ad0:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 8001ad4:	06da      	lsls	r2, r3, #27
 8001ad6:	d401      	bmi.n	8001adc <z_cbvprintf_impl+0xc5c>
 8001ad8:	071b      	lsls	r3, r3, #28
 8001ada:	d506      	bpl.n	8001aea <z_cbvprintf_impl+0xc6a>
				OUTC('0');
 8001adc:	9903      	ldr	r1, [sp, #12]
 8001ade:	2030      	movs	r0, #48	; 0x30
 8001ae0:	47d0      	blx	sl
 8001ae2:	2800      	cmp	r0, #0
 8001ae4:	f6ff af5e 	blt.w	80019a4 <z_cbvprintf_impl+0xb24>
 8001ae8:	3501      	adds	r5, #1
			if (conv->altform_0c) {
 8001aea:	9b05      	ldr	r3, [sp, #20]
 8001aec:	b13b      	cbz	r3, 8001afe <z_cbvprintf_impl+0xc7e>
				OUTC(conv->specifier);
 8001aee:	9903      	ldr	r1, [sp, #12]
 8001af0:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
 8001af4:	47d0      	blx	sl
 8001af6:	2800      	cmp	r0, #0
 8001af8:	f6ff af54 	blt.w	80019a4 <z_cbvprintf_impl+0xb24>
 8001afc:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
 8001afe:	44a8      	add	r8, r5
 8001b00:	e006      	b.n	8001b10 <z_cbvprintf_impl+0xc90>
				OUTC('0');
 8001b02:	9903      	ldr	r1, [sp, #12]
 8001b04:	2030      	movs	r0, #48	; 0x30
 8001b06:	47d0      	blx	sl
 8001b08:	2800      	cmp	r0, #0
 8001b0a:	f6ff af4b 	blt.w	80019a4 <z_cbvprintf_impl+0xb24>
 8001b0e:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
 8001b10:	eba8 0305 	sub.w	r3, r8, r5
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	dcf4      	bgt.n	8001b02 <z_cbvprintf_impl+0xc82>
			OUTS(bps, bpe);
 8001b18:	9903      	ldr	r1, [sp, #12]
 8001b1a:	463b      	mov	r3, r7
 8001b1c:	4632      	mov	r2, r6
 8001b1e:	4650      	mov	r0, sl
 8001b20:	f002 fb25 	bl	800416e <outs>
 8001b24:	2800      	cmp	r0, #0
 8001b26:	f6ff af3d 	blt.w	80019a4 <z_cbvprintf_impl+0xb24>
 8001b2a:	4428      	add	r0, r5
 8001b2c:	e79c      	b.n	8001a68 <z_cbvprintf_impl+0xbe8>
			OUTC(' ');
 8001b2e:	9903      	ldr	r1, [sp, #12]
 8001b30:	2020      	movs	r0, #32
 8001b32:	47d0      	blx	sl
 8001b34:	2800      	cmp	r0, #0
 8001b36:	f6ff af35 	blt.w	80019a4 <z_cbvprintf_impl+0xb24>
 8001b3a:	3501      	adds	r5, #1
		while (width > 0) {
 8001b3c:	1b73      	subs	r3, r6, r5
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	dcf5      	bgt.n	8001b2e <z_cbvprintf_impl+0xcae>
 8001b42:	f7ff bbd1 	b.w	80012e8 <z_cbvprintf_impl+0x468>
			decexp = 0;
 8001b46:	4616      	mov	r6, r2
 8001b48:	e6bd      	b.n	80018c6 <z_cbvprintf_impl+0xa46>
		if (*buf++ != '0') {
 8001b4a:	f10d 085d 	add.w	r8, sp, #93	; 0x5d
	while (precision > 0 && digit_count > 0) {
 8001b4e:	e6ba      	b.n	80018c6 <z_cbvprintf_impl+0xa46>
 8001b50:	08005d64 	.word	0x08005d64
 8001b54:	08005c41 	.word	0x08005c41

08001b58 <currsmp_shunt_stm32_get_smp_time>:
	data->sector = sector;
	config->adc->JSQR = data->jsqr[sector / 2U % 3U];
}

static uint32_t currsmp_shunt_stm32_get_smp_time(const struct device *dev)
{
 8001b58:	b537      	push	{r0, r1, r2, r4, r5, lr}
	const struct currsmp_shunt_stm32_config *config = dev->config;
 8001b5a:	6844      	ldr	r4, [r0, #4]

	int ret;
	uint32_t clk;
	float t_sar;

	ret = stm32_adc_clk_get(config->adc, &config->pclken, &clk);
 8001b5c:	466a      	mov	r2, sp
 8001b5e:	6820      	ldr	r0, [r4, #0]
 8001b60:	1d21      	adds	r1, r4, #4
 8001b62:	f001 fb0f 	bl	8003184 <stm32_adc_clk_get>
	if (ret < 0) {
 8001b66:	2800      	cmp	r0, #0
 8001b68:	da02      	bge.n	8001b70 <currsmp_shunt_stm32_get_smp_time+0x18>
		LOG_ERR("Could not obtain ADC clock rate");
		return 0U;
 8001b6a:	2000      	movs	r0, #0
		return 0U;
	}

	return (uint32_t)((1.0e9 / (float)clk) *
			  (t_sar + 2.0f * (float)config->adc_tsample));
}
 8001b6c:	b003      	add	sp, #12
 8001b6e:	bd30      	pop	{r4, r5, pc}
	ret = stm32_adc_t_sar_get(config->adc_resolution, &t_sar);
 8001b70:	7c20      	ldrb	r0, [r4, #16]
 8001b72:	a901      	add	r1, sp, #4
 8001b74:	f002 fee8 	bl	8004948 <stm32_adc_t_sar_get>
	if (ret < 0) {
 8001b78:	2800      	cmp	r0, #0
 8001b7a:	dbf6      	blt.n	8001b6a <currsmp_shunt_stm32_get_smp_time+0x12>
			  (t_sar + 2.0f * (float)config->adc_tsample));
 8001b7c:	8a63      	ldrh	r3, [r4, #18]
 8001b7e:	ed9d 7a01 	vldr	s14, [sp, #4]
 8001b82:	ee07 3a90 	vmov	s15, r3
 8001b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b8a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001b8e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b92:	ee17 0a90 	vmov	r0, s15
 8001b96:	f7fe fce5 	bl	8000564 <__aeabi_f2d>
	return (uint32_t)((1.0e9 / (float)clk) *
 8001b9a:	eddd 7a00 	vldr	s15, [sp]
 8001b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
			  (t_sar + 2.0f * (float)config->adc_tsample));
 8001ba2:	4604      	mov	r4, r0
	return (uint32_t)((1.0e9 / (float)clk) *
 8001ba4:	ee17 0a90 	vmov	r0, s15
			  (t_sar + 2.0f * (float)config->adc_tsample));
 8001ba8:	460d      	mov	r5, r1
	return (uint32_t)((1.0e9 / (float)clk) *
 8001baa:	f7fe fcdb 	bl	8000564 <__aeabi_f2d>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	a107      	add	r1, pc, #28	; (adr r1, 8001bd0 <currsmp_shunt_stm32_get_smp_time+0x78>)
 8001bb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001bb8:	f7fe fe56 	bl	8000868 <__aeabi_ddiv>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	4620      	mov	r0, r4
 8001bc2:	4629      	mov	r1, r5
 8001bc4:	f7fe fd26 	bl	8000614 <__aeabi_dmul>
 8001bc8:	f7fe ff36 	bl	8000a38 <__aeabi_d2uiz>
 8001bcc:	e7ce      	b.n	8001b6c <currsmp_shunt_stm32_get_smp_time+0x14>
 8001bce:	bf00      	nop
 8001bd0:	00000000 	.word	0x00000000
 8001bd4:	41cdcd65 	.word	0x41cdcd65

08001bd8 <main>:

void main(void)
{
	//cloop_start();
	//cloop_set_ref(0.0f, 0.25f);
	printk("Test af main");
 8001bd8:	4801      	ldr	r0, [pc, #4]	; (8001be0 <main+0x8>)
 8001bda:	f002 ba82 	b.w	80040e2 <printk>
 8001bde:	bf00      	nop
 8001be0:	08005d41 	.word	0x08005d41

08001be4 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
 8001be4:	4b01      	ldr	r3, [pc, #4]	; (8001bec <char_out+0x8>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4718      	bx	r3
 8001bea:	bf00      	nop
 8001bec:	20000000 	.word	0x20000000

08001bf0 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
 8001bf0:	b507      	push	{r0, r1, r2, lr}
 8001bf2:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	9100      	str	r1, [sp, #0]
 8001bfa:	4803      	ldr	r0, [pc, #12]	; (8001c08 <vprintk+0x18>)
 8001bfc:	f7ff f940 	bl	8000e80 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
 8001c00:	b003      	add	sp, #12
 8001c02:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c06:	bf00      	nop
 8001c08:	08001be5 	.word	0x08001be5

08001c0c <extract_decimal>:
{
 8001c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
	while (isdigit((int)(unsigned char)*sp)) {
 8001c0e:	4e09      	ldr	r6, [pc, #36]	; (8001c34 <extract_decimal+0x28>)
 8001c10:	6801      	ldr	r1, [r0, #0]
{
 8001c12:	4602      	mov	r2, r0
		val = 10U * val + *sp++ - '0';
 8001c14:	270a      	movs	r7, #10
	size_t val = 0;
 8001c16:	2000      	movs	r0, #0
 8001c18:	460b      	mov	r3, r1
	while (isdigit((int)(unsigned char)*sp)) {
 8001c1a:	3101      	adds	r1, #1
 8001c1c:	781c      	ldrb	r4, [r3, #0]
 8001c1e:	5d35      	ldrb	r5, [r6, r4]
 8001c20:	076d      	lsls	r5, r5, #29
 8001c22:	d401      	bmi.n	8001c28 <extract_decimal+0x1c>
	*str = sp;
 8001c24:	6013      	str	r3, [r2, #0]
}
 8001c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
 8001c28:	fb07 4300 	mla	r3, r7, r0, r4
 8001c2c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8001c30:	e7f2      	b.n	8001c18 <extract_decimal+0xc>
 8001c32:	bf00      	nop
 8001c34:	08005c41 	.word	0x08005c41

08001c38 <encode_uint>:
{
 8001c38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c3c:	4615      	mov	r5, r2
 8001c3e:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
 8001c40:	78d3      	ldrb	r3, [r2, #3]
 8001c42:	4a22      	ldr	r2, [pc, #136]	; (8001ccc <encode_uint+0x94>)
 8001c44:	f812 b003 	ldrb.w	fp, [r2, r3]
	switch (specifier) {
 8001c48:	2b6f      	cmp	r3, #111	; 0x6f
{
 8001c4a:	4680      	mov	r8, r0
 8001c4c:	460f      	mov	r7, r1
 8001c4e:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
 8001c52:	d029      	beq.n	8001ca8 <encode_uint+0x70>
 8001c54:	d824      	bhi.n	8001ca0 <encode_uint+0x68>
		return 10;
 8001c56:	2b58      	cmp	r3, #88	; 0x58
 8001c58:	bf0c      	ite	eq
 8001c5a:	2610      	moveq	r6, #16
 8001c5c:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
 8001c5e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
 8001c62:	4632      	mov	r2, r6
 8001c64:	2300      	movs	r3, #0
 8001c66:	4640      	mov	r0, r8
 8001c68:	4639      	mov	r1, r7
 8001c6a:	f7fe ff05 	bl	8000a78 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8001c6e:	2a09      	cmp	r2, #9
 8001c70:	b2d4      	uxtb	r4, r2
 8001c72:	d81e      	bhi.n	8001cb2 <encode_uint+0x7a>
 8001c74:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
 8001c76:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8001c78:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
 8001c7a:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8001c7e:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
 8001c82:	d301      	bcc.n	8001c88 <encode_uint+0x50>
 8001c84:	45d1      	cmp	r9, sl
 8001c86:	d811      	bhi.n	8001cac <encode_uint+0x74>
	if (conv->flag_hash) {
 8001c88:	782b      	ldrb	r3, [r5, #0]
 8001c8a:	069b      	lsls	r3, r3, #26
 8001c8c:	d505      	bpl.n	8001c9a <encode_uint+0x62>
		if (radix == 8) {
 8001c8e:	2e08      	cmp	r6, #8
 8001c90:	d115      	bne.n	8001cbe <encode_uint+0x86>
			conv->altform_0 = true;
 8001c92:	78ab      	ldrb	r3, [r5, #2]
 8001c94:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
 8001c98:	70ab      	strb	r3, [r5, #2]
}
 8001c9a:	4648      	mov	r0, r9
 8001c9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
 8001ca0:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
 8001ca4:	2b70      	cmp	r3, #112	; 0x70
 8001ca6:	e7d7      	b.n	8001c58 <encode_uint+0x20>
	switch (specifier) {
 8001ca8:	2608      	movs	r6, #8
 8001caa:	e7d8      	b.n	8001c5e <encode_uint+0x26>
		value /= radix;
 8001cac:	4680      	mov	r8, r0
 8001cae:	460f      	mov	r7, r1
 8001cb0:	e7d7      	b.n	8001c62 <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8001cb2:	f1bb 0f01 	cmp.w	fp, #1
 8001cb6:	bf0c      	ite	eq
 8001cb8:	3437      	addeq	r4, #55	; 0x37
 8001cba:	3457      	addne	r4, #87	; 0x57
 8001cbc:	e7db      	b.n	8001c76 <encode_uint+0x3e>
		} else if (radix == 16) {
 8001cbe:	2e10      	cmp	r6, #16
 8001cc0:	d1eb      	bne.n	8001c9a <encode_uint+0x62>
			conv->altform_0c = true;
 8001cc2:	78ab      	ldrb	r3, [r5, #2]
 8001cc4:	f043 0310 	orr.w	r3, r3, #16
 8001cc8:	e7e6      	b.n	8001c98 <encode_uint+0x60>
 8001cca:	bf00      	nop
 8001ccc:	08005c41 	.word	0x08005c41

08001cd0 <st_stm32f4_init>:
  * @rmtoll FLASH_ACR    ICEN          LL_FLASH_EnableInstCache
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_EnableInstCache(void)
{
  SET_BIT(FLASH->ACR, FLASH_ACR_ICEN);
 8001cd0:	4b0c      	ldr	r3, [pc, #48]	; (8001d04 <st_stm32f4_init+0x34>)
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cd8:	601a      	str	r2, [r3, #0]
  * @rmtoll FLASH_ACR    DCEN          LL_FLASH_EnableDataCache
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_EnableDataCache(void)
{
  SET_BIT(FLASH->ACR, FLASH_ACR_DCEN);
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001ce0:	601a      	str	r2, [r3, #0]
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
 8001ce2:	f04f 0220 	mov.w	r2, #32
 8001ce6:	f3ef 8311 	mrs	r3, BASEPRI
 8001cea:	f382 8812 	msr	BASEPRI_MAX, r2
 8001cee:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 8001cf2:	f383 8811 	msr	BASEPRI, r3
 8001cf6:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	/* Update CMSIS SystemCoreClock variable (HCLK) */
	/* At reset, system core clock is set to 16 MHz from HSI */
	SystemCoreClock = 16000000;
 8001cfa:	4b03      	ldr	r3, [pc, #12]	; (8001d08 <st_stm32f4_init+0x38>)
 8001cfc:	4a03      	ldr	r2, [pc, #12]	; (8001d0c <st_stm32f4_init+0x3c>)
 8001cfe:	601a      	str	r2, [r3, #0]

	return 0;
}
 8001d00:	2000      	movs	r0, #0
 8001d02:	4770      	bx	lr
 8001d04:	40023c00 	.word	0x40023c00
 8001d08:	20000020 	.word	0x20000020
 8001d0c:	00f42400 	.word	0x00f42400

08001d10 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
 8001d10:	4901      	ldr	r1, [pc, #4]	; (8001d18 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
 8001d12:	2210      	movs	r2, #16
	str	r2, [r1]
 8001d14:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
 8001d16:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
 8001d18:	e000ed10 	.word	0xe000ed10

08001d1c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
 8001d1c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
 8001d1e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
 8001d20:	f380 8811 	msr	BASEPRI, r0
	isb
 8001d24:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
 8001d28:	f3bf 8f4f 	dsb	sy
 8001d2c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
 8001d2e:	b662      	cpsie	i
	isb
 8001d30:	f3bf 8f6f 	isb	sy

	bx	lr
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop

08001d38 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 8001d38:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8001d3a:	2800      	cmp	r0, #0
 8001d3c:	db07      	blt.n	8001d4e <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d3e:	4a04      	ldr	r2, [pc, #16]	; (8001d50 <arch_irq_enable+0x18>)
 8001d40:	0941      	lsrs	r1, r0, #5
 8001d42:	2301      	movs	r3, #1
 8001d44:	f000 001f 	and.w	r0, r0, #31
 8001d48:	4083      	lsls	r3, r0
 8001d4a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 8001d4e:	4770      	bx	lr
 8001d50:	e000e100 	.word	0xe000e100

08001d54 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 8001d54:	b240      	sxtb	r0, r0
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
 8001d56:	07d3      	lsls	r3, r2, #31
		prio += _IRQ_PRIO_OFFSET;
 8001d58:	bf54      	ite	pl
 8001d5a:	3102      	addpl	r1, #2
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
 8001d5c:	2100      	movmi	r1, #0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8001d5e:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d60:	bfac      	ite	ge
 8001d62:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d66:	4a07      	ldrlt	r2, [pc, #28]	; (8001d84 <z_arm_irq_priority_set+0x30>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d68:	ea4f 1301 	mov.w	r3, r1, lsl #4
 8001d6c:	bfac      	ite	ge
 8001d6e:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d72:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d76:	b2db      	uxtb	r3, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d78:	bfb4      	ite	lt
 8001d7a:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d7c:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
}
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	e000ed14 	.word	0xe000ed14

08001d88 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 8001d88:	bf30      	wfi
    b z_SysNmiOnReset
 8001d8a:	f7ff bffd 	b.w	8001d88 <z_SysNmiOnReset>
 8001d8e:	bf00      	nop

08001d90 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8001d90:	4a14      	ldr	r2, [pc, #80]	; (8001de4 <z_arm_prep_c+0x54>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
 8001d92:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8001d94:	4b14      	ldr	r3, [pc, #80]	; (8001de8 <z_arm_prep_c+0x58>)
 8001d96:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8001d9a:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001d9c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001da0:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
 8001da4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001da8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001dac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
 8001db0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001db4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001db8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
 8001dbc:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8001dc0:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
 8001dc4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001dc8:	f3bf 8f6f 	isb	sy
     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
#if __has_builtin(__builtin_arm_set_fpscr)
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
 8001dcc:	2300      	movs	r3, #0
 8001dce:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
 8001dd2:	f001 fca7 	bl	8003724 <z_bss_zero>
	z_data_copy();
 8001dd6:	f001 ff9b 	bl	8003d10 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
 8001dda:	f000 fa0d 	bl	80021f8 <z_arm_interrupt_init>
	z_cstart();
 8001dde:	f001 fce1 	bl	80037a4 <z_cstart>
 8001de2:	bf00      	nop
 8001de4:	08000000 	.word	0x08000000
 8001de8:	e000ed00 	.word	0xe000ed00

08001dec <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
 8001dec:	4a09      	ldr	r2, [pc, #36]	; (8001e14 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
 8001dee:	490a      	ldr	r1, [pc, #40]	; (8001e18 <arch_swap+0x2c>)
	_current->arch.basepri = key;
 8001df0:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
 8001df2:	6809      	ldr	r1, [r1, #0]
 8001df4:	66d9      	str	r1, [r3, #108]	; 0x6c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8001df6:	4909      	ldr	r1, [pc, #36]	; (8001e1c <arch_swap+0x30>)
	_current->arch.basepri = key;
 8001df8:	6698      	str	r0, [r3, #104]	; 0x68
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8001dfa:	684b      	ldr	r3, [r1, #4]
 8001dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e00:	604b      	str	r3, [r1, #4]
 8001e02:	2300      	movs	r3, #0
 8001e04:	f383 8811 	msr	BASEPRI, r3
 8001e08:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 8001e0c:	6893      	ldr	r3, [r2, #8]
}
 8001e0e:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	20000380 	.word	0x20000380
 8001e18:	08005c24 	.word	0x08005c24
 8001e1c:	e000ed00 	.word	0xe000ed00

08001e20 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 8001e20:	491e      	ldr	r1, [pc, #120]	; (8001e9c <in_fp_endif+0x1e>)
    ldr r2, [r1, #_kernel_offset_to_current]
 8001e22:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
 8001e24:	f882 e0b1 	strb.w	lr, [r2, #177]	; 0xb1
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 8001e28:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
 8001e2c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
 8001e2e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 8001e32:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    tst lr, #_EXC_RETURN_FTYPE_Msk
 8001e36:	f01e 0f10 	tst.w	lr, #16
    bne out_fp_endif
 8001e3a:	d103      	bne.n	8001e44 <out_fp_endif>
    /* FP context active: set FP state and store callee-saved registers.
     * Note: if Lazy FP stacking is enabled, storing the callee-saved
     * registers will automatically trigger FP state preservation in
     * the thread's stack. This will also clear the FPCCR.LSPACT flag.
     */
    add r0, r2, #_thread_offset_to_preempt_float
 8001e3c:	f102 0070 	add.w	r0, r2, #112	; 0x70
    vstmia r0, {s16-s31}
 8001e40:	ec80 8a10 	vstmia	r0, {s16-s31}

08001e44 <out_fp_endif>:

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8001e44:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
 8001e46:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 8001e4a:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
 8001e4e:	4f14      	ldr	r7, [pc, #80]	; (8001ea0 <in_fp_endif+0x22>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 8001e50:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 8001e54:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
 8001e56:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
 8001e58:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
 8001e5a:	f992 e0b1 	ldrsb.w	lr, [r2, #177]	; 0xb1

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 8001e5e:	6e90      	ldr	r0, [r2, #104]	; 0x68
    movs r3, #0
 8001e60:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 8001e62:	6693      	str	r3, [r2, #104]	; 0x68
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 8001e64:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    tst lr, #_EXC_RETURN_FTYPE_Msk
 8001e68:	f01e 0f10 	tst.w	lr, #16
    beq in_fp_active
 8001e6c:	d003      	beq.n	8001e76 <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
 8001e6e:	2300      	movs	r3, #0
    vmsr fpscr, r3
 8001e70:	eee1 3a10 	vmsr	fpscr, r3
    b in_fp_endif
 8001e74:	e003      	b.n	8001e7e <in_fp_endif>

08001e76 <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    add r0, r2, #_thread_offset_to_preempt_float
 8001e76:	f102 0070 	add.w	r0, r2, #112	; 0x70
    vldmia r0, {s16-s31}
 8001e7a:	ec90 8a10 	vldmia	r0, {s16-s31}

08001e7e <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
 8001e7e:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #_CONTROL_FPCA_Msk
 8001e82:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
 8001e86:	f383 8814 	msr	CONTROL, r3
    isb
 8001e8a:	f3bf 8f6f 	isb	sy
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 8001e8e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
 8001e92:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
 8001e96:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
 8001e9a:	4770      	bx	lr
    ldr r1, =_kernel
 8001e9c:	20000380 	.word	0x20000380
    ldr v4, =_SCS_ICSR
 8001ea0:	e000ed04 	.word	0xe000ed04

08001ea4 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
 8001ea4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 8001ea8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 8001eaa:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 8001eae:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 8001eb2:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
 8001eb4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
 8001eb8:	2902      	cmp	r1, #2
    beq _oops
 8001eba:	d0ff      	beq.n	8001ebc <_oops>

08001ebc <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
 8001ebc:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
 8001ebe:	f002 f972 	bl	80041a6 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
 8001ec2:	bd01      	pop	{r0, pc}

08001ec4 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
 8001ec4:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
 8001ec8:	9b00      	ldr	r3, [sp, #0]
 8001eca:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
 8001ece:	9b01      	ldr	r3, [sp, #4]
 8001ed0:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->pc &= 0xfffffffe;
 8001ed4:	490a      	ldr	r1, [pc, #40]	; (8001f00 <arch_new_thread+0x3c>)
	iframe->a4 = (uint32_t)p3;
 8001ed6:	9b02      	ldr	r3, [sp, #8]
 8001ed8:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
 8001edc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ee0:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
 8001ee4:	f021 0101 	bic.w	r1, r1, #1
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
 8001ee8:	2300      	movs	r3, #0
	iframe->pc &= 0xfffffffe;
 8001eea:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
 8001eee:	3a20      	subs	r2, #32
	thread->arch.basepri = 0;
 8001ef0:	6683      	str	r3, [r0, #104]	; 0x68

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
 8001ef2:	f44f 437d 	mov.w	r3, #64768	; 0xfd00
	thread->callee_saved.psp = (uint32_t)iframe;
 8001ef6:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.mode = 0;
 8001ef8:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	080040fd 	.word	0x080040fd

08001f04 <arch_switch_to_main_thread>:
 8001f04:	2300      	movs	r3, #0
 8001f06:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8001f0a:	f3ef 8314 	mrs	r3, CONTROL
#else
	__set_FPSCR(0);
#endif
#if defined(CONFIG_CPU_CORTEX_M) && defined(CONFIG_FPU_SHARING)
	/* In Sharing mode clearing FPSCR may set the CONTROL.FPCA flag. */
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
 8001f0e:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8001f12:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
 8001f16:	f3bf 8f6f 	isb	sy
 8001f1a:	f3bf 8f6f 	isb	sy
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
 8001f1e:	4b07      	ldr	r3, [pc, #28]	; (8001f3c <arch_switch_to_main_thread+0x38>)
 8001f20:	6098      	str	r0, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 8001f22:	4610      	mov	r0, r2
 8001f24:	f381 8809 	msr	PSP, r1
 8001f28:	2100      	movs	r1, #0
 8001f2a:	b663      	cpsie	if
 8001f2c:	f381 8811 	msr	BASEPRI, r1
 8001f30:	f3bf 8f6f 	isb	sy
 8001f34:	2200      	movs	r2, #0
 8001f36:	2300      	movs	r3, #0
 8001f38:	f002 f8e0 	bl	80040fc <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
 8001f3c:	20000380 	.word	0x20000380

08001f40 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
 8001f40:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
 8001f42:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 8001f46:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 8001f4a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
 8001f4e:	4904      	ldr	r1, [pc, #16]	; (8001f60 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 8001f50:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 8001f52:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
 8001f54:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 8001f56:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
 8001f5a:	4902      	ldr	r1, [pc, #8]	; (8001f64 <_isr_wrapper+0x24>)
	bx r1
 8001f5c:	4708      	bx	r1
 8001f5e:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 8001f60:	08004e7c 	.word	0x08004e7c
	ldr r1, =z_arm_int_exit
 8001f64:	08001f69 	.word	0x08001f69

08001f68 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
 8001f68:	4b04      	ldr	r3, [pc, #16]	; (8001f7c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
 8001f6a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
 8001f6c:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
 8001f6e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
 8001f70:	d003      	beq.n	8001f7a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
 8001f72:	4903      	ldr	r1, [pc, #12]	; (8001f80 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
 8001f74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
 8001f78:	600a      	str	r2, [r1, #0]

08001f7a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
 8001f7a:	4770      	bx	lr
	ldr r3, =_kernel
 8001f7c:	20000380 	.word	0x20000380
	ldr r1, =_SCS_ICSR
 8001f80:	e000ed04 	.word	0xe000ed04

08001f84 <usage_fault.constprop.0>:
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 8001f84:	4b13      	ldr	r3, [pc, #76]	; (8001fd4 <usage_fault.constprop.0+0x50>)
 8001f86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
 8001f88:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 8001f8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
 8001f8e:	bf14      	ite	ne
 8001f90:	201e      	movne	r0, #30
 8001f92:	201d      	moveq	r0, #29
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
 8001f94:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 8001f98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
 8001f9a:	bf18      	it	ne
 8001f9c:	201f      	movne	r0, #31
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
 8001f9e:	f412 2f00 	tst.w	r2, #524288	; 0x80000
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 8001fa2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
 8001fa4:	bf18      	it	ne
 8001fa6:	2021      	movne	r0, #33	; 0x21
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
 8001fa8:	f412 2f80 	tst.w	r2, #262144	; 0x40000
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 8001fac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
 8001fae:	bf18      	it	ne
 8001fb0:	2022      	movne	r0, #34	; 0x22
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
 8001fb2:	f412 3f00 	tst.w	r2, #131072	; 0x20000
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 8001fb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
 8001fb8:	bf18      	it	ne
 8001fba:	2023      	movne	r0, #35	; 0x23
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
 8001fbc:	f412 3f80 	tst.w	r2, #65536	; 0x10000
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 8001fc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fc2:	ea6f 4202 	mvn.w	r2, r2, lsl #16
 8001fc6:	ea6f 4212 	mvn.w	r2, r2, lsr #16
 8001fca:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
 8001fcc:	bf18      	it	ne
 8001fce:	2024      	movne	r0, #36	; 0x24
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	e000ed00 	.word	0xe000ed00

08001fd8 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
 8001fd8:	b510      	push	{r4, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 8001fda:	4b19      	ldr	r3, [pc, #100]	; (8002040 <bus_fault.constprop.0+0x68>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
 8001fdc:	4602      	mov	r2, r0
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 8001fde:	6a98      	ldr	r0, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 8001fe0:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
 8001fe2:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 8001fe6:	bf14      	ite	ne
 8001fe8:	2017      	movne	r0, #23
 8001fea:	2016      	moveq	r0, #22
		reason = K_ERR_ARM_BUS_UNSTACKING;
 8001fec:	f414 6f00 	tst.w	r4, #2048	; 0x800
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 8001ff0:	6a9c      	ldr	r4, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_UNSTACKING;
 8001ff2:	bf18      	it	ne
 8001ff4:	2018      	movne	r0, #24
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 8001ff6:	05a4      	lsls	r4, r4, #22
 8001ff8:	d509      	bpl.n	800200e <bus_fault.constprop.0+0x36>
		STORE_xFAR(bfar, SCB->BFAR);
 8001ffa:	6b98      	ldr	r0, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 8001ffc:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001ffe:	0400      	lsls	r0, r0, #16
 8002000:	d504      	bpl.n	800200c <bus_fault.constprop.0+0x34>
			if (from_hard_fault != 0) {
 8002002:	b11a      	cbz	r2, 800200c <bus_fault.constprop.0+0x34>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 8002004:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002006:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800200a:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
 800200c:	2019      	movs	r0, #25
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 800200e:	4b0c      	ldr	r3, [pc, #48]	; (8002040 <bus_fault.constprop.0+0x68>)
 8002010:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
 8002012:	f412 6f80 	tst.w	r2, #1024	; 0x400
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 8002016:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
 8002018:	bf18      	it	ne
 800201a:	201a      	movne	r0, #26
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 800201c:	05d2      	lsls	r2, r2, #23
 800201e:	d40c      	bmi.n	800203a <bus_fault.constprop.0+0x62>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
 8002020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
 8002022:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8002026:	bf18      	it	ne
 8002028:	201c      	movne	r0, #28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 800202a:	4a05      	ldr	r2, [pc, #20]	; (8002040 <bus_fault.constprop.0+0x68>)
 800202c:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800202e:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 8002032:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 8002034:	2300      	movs	r3, #0
 8002036:	700b      	strb	r3, [r1, #0]
}
 8002038:	bd10      	pop	{r4, pc}
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
 800203a:	201b      	movs	r0, #27
 800203c:	e7f5      	b.n	800202a <bus_fault.constprop.0+0x52>
 800203e:	bf00      	nop
 8002040:	e000ed00 	.word	0xe000ed00

08002044 <mem_manage_fault.constprop.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
 8002044:	b510      	push	{r4, lr}
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 8002046:	4b1c      	ldr	r3, [pc, #112]	; (80020b8 <mem_manage_fault.constprop.0+0x74>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
 8002048:	4602      	mov	r2, r0
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 800204a:	6a98      	ldr	r0, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 800204c:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
 800204e:	f010 0f10 	tst.w	r0, #16
 8002052:	bf14      	ite	ne
 8002054:	2011      	movne	r0, #17
 8002056:	2010      	moveq	r0, #16
		reason = K_ERR_ARM_MEM_UNSTACKING;
 8002058:	f014 0f08 	tst.w	r4, #8
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 800205c:	6a9c      	ldr	r4, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_UNSTACKING;
 800205e:	bf18      	it	ne
 8002060:	2012      	movne	r0, #18
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 8002062:	07a4      	lsls	r4, r4, #30
 8002064:	d509      	bpl.n	800207a <mem_manage_fault.constprop.0+0x36>
		uint32_t temp = SCB->MMFAR;
 8002066:	6b58      	ldr	r0, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 8002068:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800206a:	0600      	lsls	r0, r0, #24
 800206c:	d504      	bpl.n	8002078 <mem_manage_fault.constprop.0+0x34>
			if (from_hard_fault != 0) {
 800206e:	b11a      	cbz	r2, 8002078 <mem_manage_fault.constprop.0+0x34>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 8002070:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002072:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002076:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
 8002078:	2013      	movs	r0, #19
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 800207a:	4b0f      	ldr	r3, [pc, #60]	; (80020b8 <mem_manage_fault.constprop.0+0x74>)
 800207c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
 800207e:	f012 0f01 	tst.w	r2, #1
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 8002082:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
 8002084:	bf18      	it	ne
 8002086:	2014      	movne	r0, #20
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
 8002088:	f012 0f20 	tst.w	r2, #32
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 800208c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
 800208e:	bf18      	it	ne
 8002090:	2015      	movne	r0, #21
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 8002092:	06d4      	lsls	r4, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
 8002094:	bf58      	it	pl
 8002096:	6a9b      	ldrpl	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 8002098:	4b07      	ldr	r3, [pc, #28]	; (80020b8 <mem_manage_fault.constprop.0+0x74>)
 800209a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800209c:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
 800209e:	bf42      	ittt	mi
 80020a0:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
 80020a2:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
 80020a6:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 80020a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020aa:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 80020ae:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 80020b0:	2300      	movs	r3, #0
 80020b2:	700b      	strb	r3, [r1, #0]
}
 80020b4:	bd10      	pop	{r4, pc}
 80020b6:	bf00      	nop
 80020b8:	e000ed00 	.word	0xe000ed00

080020bc <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
 80020bc:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 80020be:	4b44      	ldr	r3, [pc, #272]	; (80021d0 <z_arm_fault+0x114>)
 80020c0:	685b      	ldr	r3, [r3, #4]
{
 80020c2:	b09c      	sub	sp, #112	; 0x70
 80020c4:	4606      	mov	r6, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 80020c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020ca:	2500      	movs	r5, #0
 80020cc:	f385 8811 	msr	BASEPRI, r5
 80020d0:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
 80020d4:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
 80020d8:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
 80020dc:	d111      	bne.n	8002102 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
 80020de:	f002 000c 	and.w	r0, r2, #12
 80020e2:	2808      	cmp	r0, #8
 80020e4:	d00d      	beq.n	8002102 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
 80020e6:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
 80020e8:	bf4c      	ite	mi
 80020ea:	460e      	movmi	r6, r1
			*nested_exc = true;
 80020ec:	2501      	movpl	r5, #1
	*recoverable = false;
 80020ee:	2200      	movs	r2, #0
	switch (fault) {
 80020f0:	3b03      	subs	r3, #3
	*recoverable = false;
 80020f2:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
 80020f6:	2b03      	cmp	r3, #3
 80020f8:	d805      	bhi.n	8002106 <z_arm_fault+0x4a>
 80020fa:	e8df f003 	tbb	[pc, r3]
 80020fe:	5c1e      	.short	0x5c1e
 8002100:	5960      	.short	0x5960
		return NULL;
 8002102:	462e      	mov	r6, r5
 8002104:	e7f3      	b.n	80020ee <z_arm_fault+0x32>
 8002106:	2400      	movs	r4, #0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
 8002108:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800210c:	b99b      	cbnz	r3, 8002136 <z_arm_fault+0x7a>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
 800210e:	2268      	movs	r2, #104	; 0x68
 8002110:	4631      	mov	r1, r6
 8002112:	a802      	add	r0, sp, #8
 8002114:	f7fe fcca 	bl	8000aac <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
 8002118:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800211a:	2d00      	cmp	r5, #0
 800211c:	d053      	beq.n	80021c6 <z_arm_fault+0x10a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 800211e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002122:	b922      	cbnz	r2, 800212e <z_arm_fault+0x72>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
 8002124:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 8002128:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 800212c:	9309      	str	r3, [sp, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
 800212e:	a902      	add	r1, sp, #8
 8002130:	4620      	mov	r0, r4
 8002132:	f002 f836 	bl	80041a2 <z_arm_fatal_error>
}
 8002136:	b01c      	add	sp, #112	; 0x70
 8002138:	bd70      	pop	{r4, r5, r6, pc}
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 800213a:	4b25      	ldr	r3, [pc, #148]	; (80021d0 <z_arm_fault+0x114>)
 800213c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800213e:	0791      	lsls	r1, r2, #30
 8002140:	d4e1      	bmi.n	8002106 <z_arm_fault+0x4a>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
 8002142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002144:	2a00      	cmp	r2, #0
 8002146:	dbde      	blt.n	8002106 <z_arm_fault+0x4a>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 8002148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800214a:	0052      	lsls	r2, r2, #1
 800214c:	d5db      	bpl.n	8002106 <z_arm_fault+0x4a>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
 800214e:	695a      	ldr	r2, [r3, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
 8002150:	69b1      	ldr	r1, [r6, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
 8002152:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002156:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002158:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800215c:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
 8002160:	695a      	ldr	r2, [r3, #20]
	uint16_t fault_insn = *(ret_addr - 1);
 8002162:	f831 1c02 	ldrh.w	r1, [r1, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
 8002166:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800216a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800216c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002170:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
 8002174:	f64d 7202 	movw	r2, #57090	; 0xdf02
 8002178:	4291      	cmp	r1, r2
 800217a:	d009      	beq.n	8002190 <z_arm_fault+0xd4>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
 800217c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800217e:	b2d2      	uxtb	r2, r2
 8002180:	b142      	cbz	r2, 8002194 <z_arm_fault+0xd8>
			reason = mem_manage_fault(esf, 1, recoverable);
 8002182:	f10d 0107 	add.w	r1, sp, #7
 8002186:	2001      	movs	r0, #1
		reason = mem_manage_fault(esf, 0, recoverable);
 8002188:	f7ff ff5c 	bl	8002044 <mem_manage_fault.constprop.0>
		reason = usage_fault(esf);
 800218c:	4604      	mov	r4, r0
		break;
 800218e:	e7bb      	b.n	8002108 <z_arm_fault+0x4c>
			reason = esf->basic.r0;
 8002190:	6834      	ldr	r4, [r6, #0]
 8002192:	e7b9      	b.n	8002108 <z_arm_fault+0x4c>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
 8002194:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002196:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
 800219a:	d005      	beq.n	80021a8 <z_arm_fault+0xec>
			reason = bus_fault(esf, 1, recoverable);
 800219c:	f10d 0107 	add.w	r1, sp, #7
 80021a0:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
 80021a2:	f7ff ff19 	bl	8001fd8 <bus_fault.constprop.0>
 80021a6:	e7f1      	b.n	800218c <z_arm_fault+0xd0>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
 80021a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021ae:	d3aa      	bcc.n	8002106 <z_arm_fault+0x4a>
		reason = usage_fault(esf);
 80021b0:	f7ff fee8 	bl	8001f84 <usage_fault.constprop.0>
 80021b4:	e7ea      	b.n	800218c <z_arm_fault+0xd0>
		reason = mem_manage_fault(esf, 0, recoverable);
 80021b6:	f10d 0107 	add.w	r1, sp, #7
 80021ba:	2000      	movs	r0, #0
 80021bc:	e7e4      	b.n	8002188 <z_arm_fault+0xcc>
		reason = bus_fault(esf, 0, recoverable);
 80021be:	f10d 0107 	add.w	r1, sp, #7
 80021c2:	2000      	movs	r0, #0
 80021c4:	e7ed      	b.n	80021a2 <z_arm_fault+0xe6>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 80021c6:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80021ca:	f023 0301 	bic.w	r3, r3, #1
 80021ce:	e7ad      	b.n	800212c <z_arm_fault+0x70>
 80021d0:	e000ed00 	.word	0xe000ed00

080021d4 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 80021d4:	4a02      	ldr	r2, [pc, #8]	; (80021e0 <z_arm_fault_init+0xc>)
 80021d6:	6953      	ldr	r3, [r2, #20]
 80021d8:	f043 0310 	orr.w	r3, r3, #16
 80021dc:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
 80021de:	4770      	bx	lr
 80021e0:	e000ed00 	.word	0xe000ed00

080021e4 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
 80021e4:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
 80021e8:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
 80021ec:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
 80021ee:	4672      	mov	r2, lr
	bl z_arm_fault
 80021f0:	f7ff ff64 	bl	80020bc <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
 80021f4:	bd01      	pop	{r0, pc}
 80021f6:	bf00      	nop

080021f8 <z_arm_interrupt_init>:
 80021f8:	4804      	ldr	r0, [pc, #16]	; (800220c <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
 80021fa:	2300      	movs	r3, #0
 80021fc:	2120      	movs	r1, #32
 80021fe:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 8002200:	3301      	adds	r3, #1
 8002202:	2b56      	cmp	r3, #86	; 0x56
 8002204:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
 8002208:	d1f9      	bne.n	80021fe <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
 800220a:	4770      	bx	lr
 800220c:	e000e100 	.word	0xe000e100

08002210 <__start>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8002210:	2020      	movs	r0, #32
    msr BASEPRI, r0
 8002212:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
 8002216:	4808      	ldr	r0, [pc, #32]	; (8002238 <__start+0x28>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
 8002218:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
 800221c:	1840      	adds	r0, r0, r1
    msr PSP, r0
 800221e:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 8002222:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 8002226:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 8002228:	4308      	orrs	r0, r1
    msr CONTROL, r0
 800222a:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 800222e:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
 8002232:	f7ff fdad 	bl	8001d90 <z_arm_prep_c>
 8002236:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
 8002238:	200003c0 	.word	0x200003c0

0800223c <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
 800223c:	4b08      	ldr	r3, [pc, #32]	; (8002260 <z_impl_k_thread_abort+0x24>)
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	4283      	cmp	r3, r0
 8002242:	d10b      	bne.n	800225c <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002244:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
 8002248:	b143      	cbz	r3, 800225c <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 800224a:	4b06      	ldr	r3, [pc, #24]	; (8002264 <z_impl_k_thread_abort+0x28>)
 800224c:	685a      	ldr	r2, [r3, #4]
 800224e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002252:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
 8002254:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002256:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800225a:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
 800225c:	f001 bcf8 	b.w	8003c50 <z_thread_abort>
 8002260:	20000380 	.word	0x20000380
 8002264:	e000ed00 	.word	0xe000ed00

08002268 <stm32_exti_isr>:
 * Check EXTI lines in exti_range for pending interrupts
 *
 * @param *exti_range Pointer to a exti_range structure
 */
static void stm32_exti_isr(const void *exti_range)
{
 8002268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 800226c:	4e0e      	ldr	r6, [pc, #56]	; (80022a8 <stm32_exti_isr+0x40>)
		if (stm32_exti_is_pending(line)) {
			/* clear pending interrupt */
			stm32_exti_clear_pending(line);

			/* run callback only if one is registered */
			if (!data->cb[line].cb) {
 800226e:	4f0f      	ldr	r7, [pc, #60]	; (80022ac <stm32_exti_isr+0x44>)
{
 8002270:	4605      	mov	r5, r0
	for (int i = 0; i <= range->len; i++) {
 8002272:	2400      	movs	r4, #0
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 8002274:	f04f 0801 	mov.w	r8, #1
		line = range->start + i;
 8002278:	782b      	ldrb	r3, [r5, #0]
 800227a:	1918      	adds	r0, r3, r4
	if (line < 32) {
 800227c:	281f      	cmp	r0, #31
 800227e:	dc0d      	bgt.n	800229c <stm32_exti_isr+0x34>
 8002280:	6972      	ldr	r2, [r6, #20]
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 8002282:	fa08 f300 	lsl.w	r3, r8, r0
		if (stm32_exti_is_pending(line)) {
 8002286:	ea33 0202 	bics.w	r2, r3, r2
 800228a:	d107      	bne.n	800229c <stm32_exti_isr+0x34>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 800228c:	6173      	str	r3, [r6, #20]
			if (!data->cb[line].cb) {
 800228e:	f857 3030 	ldr.w	r3, [r7, r0, lsl #3]
 8002292:	b11b      	cbz	r3, 800229c <stm32_exti_isr+0x34>
				continue;
			}

			data->cb[line].cb(line, data->cb[line].data);
 8002294:	eb07 02c0 	add.w	r2, r7, r0, lsl #3
 8002298:	6851      	ldr	r1, [r2, #4]
 800229a:	4798      	blx	r3
	for (int i = 0; i <= range->len; i++) {
 800229c:	786b      	ldrb	r3, [r5, #1]
 800229e:	3401      	adds	r4, #1
 80022a0:	42a3      	cmp	r3, r4
 80022a2:	dae9      	bge.n	8002278 <stm32_exti_isr+0x10>
		}
	}
}
 80022a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80022a8:	40013c00 	.word	0x40013c00
 80022ac:	200001d0 	.word	0x200001d0

080022b0 <stm32_fill_irq_table>:

static void stm32_fill_irq_table(int8_t start, int8_t len, int32_t irqn)
{
	for (int i = 0; i < len; i++) {
 80022b0:	4b04      	ldr	r3, [pc, #16]	; (80022c4 <stm32_fill_irq_table+0x14>)
 80022b2:	4418      	add	r0, r3
 80022b4:	2300      	movs	r3, #0
 80022b6:	3301      	adds	r3, #1
 80022b8:	4299      	cmp	r1, r3
		exti_irq_table[start + i] = irqn;
 80022ba:	f800 2b01 	strb.w	r2, [r0], #1
	for (int i = 0; i < len; i++) {
 80022be:	dcfa      	bgt.n	80022b6 <stm32_fill_irq_table+0x6>
	}
}
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	2000002c 	.word	0x2000002c

080022c8 <stm32_exti_enable>:
{
 80022c8:	b410      	push	{r4}
	irqnum = exti_irq_table[line];
 80022ca:	4b06      	ldr	r3, [pc, #24]	; (80022e4 <stm32_exti_enable+0x1c>)
  SET_BIT(EXTI->IMR, ExtiLine);
 80022cc:	4906      	ldr	r1, [pc, #24]	; (80022e8 <stm32_exti_enable+0x20>)
{
 80022ce:	4602      	mov	r2, r0
 80022d0:	680c      	ldr	r4, [r1, #0]
	irqnum = exti_irq_table[line];
 80022d2:	5618      	ldrsb	r0, [r3, r0]
	LL_EXTI_EnableIT_0_31(1 << line);
 80022d4:	2301      	movs	r3, #1
 80022d6:	4093      	lsls	r3, r2
 80022d8:	4323      	orrs	r3, r4
 80022da:	600b      	str	r3, [r1, #0]
}
 80022dc:	f85d 4b04 	ldr.w	r4, [sp], #4
	irq_enable(irqnum);
 80022e0:	f7ff bd2a 	b.w	8001d38 <arch_irq_enable>
 80022e4:	2000002c 	.word	0x2000002c
 80022e8:	40013c00 	.word	0x40013c00

080022ec <stm32_exti_disable>:
	if (line < 32) {
 80022ec:	281f      	cmp	r0, #31
 80022ee:	dc06      	bgt.n	80022fe <stm32_exti_disable+0x12>
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80022f0:	4903      	ldr	r1, [pc, #12]	; (8002300 <stm32_exti_disable+0x14>)
		LL_EXTI_DisableIT_0_31(1 << line);
 80022f2:	2201      	movs	r2, #1
 80022f4:	680b      	ldr	r3, [r1, #0]
 80022f6:	4082      	lsls	r2, r0
 80022f8:	ea23 0302 	bic.w	r3, r3, r2
 80022fc:	600b      	str	r3, [r1, #0]
}
 80022fe:	4770      	bx	lr
 8002300:	40013c00 	.word	0x40013c00

08002304 <stm32_exti_trigger>:
	switch (trigger) {
 8002304:	2903      	cmp	r1, #3
 8002306:	d82a      	bhi.n	800235e <stm32_exti_trigger+0x5a>
 8002308:	e8df f001 	tbb	[pc, r1]
 800230c:	1f140e02 	.word	0x1f140e02
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8002310:	4b13      	ldr	r3, [pc, #76]	; (8002360 <stm32_exti_trigger+0x5c>)
		LL_EXTI_DisableRisingTrig_0_31(1 << line);
 8002312:	2201      	movs	r2, #1
 8002314:	6899      	ldr	r1, [r3, #8]
 8002316:	4082      	lsls	r2, r0
 8002318:	ea21 0102 	bic.w	r1, r1, r2
  SET_BIT(EXTI->RTSR, ExtiLine);
 800231c:	6099      	str	r1, [r3, #8]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 800231e:	68d9      	ldr	r1, [r3, #12]
 8002320:	ea21 0202 	bic.w	r2, r1, r2
 8002324:	60da      	str	r2, [r3, #12]
}
 8002326:	4770      	bx	lr
  SET_BIT(EXTI->RTSR, ExtiLine);
 8002328:	4b0d      	ldr	r3, [pc, #52]	; (8002360 <stm32_exti_trigger+0x5c>)
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 800232a:	2201      	movs	r2, #1
 800232c:	6899      	ldr	r1, [r3, #8]
 800232e:	4082      	lsls	r2, r0
 8002330:	4311      	orrs	r1, r2
 8002332:	e7f3      	b.n	800231c <stm32_exti_trigger+0x18>
  SET_BIT(EXTI->FTSR, ExtiLine);
 8002334:	4b0a      	ldr	r3, [pc, #40]	; (8002360 <stm32_exti_trigger+0x5c>)
		LL_EXTI_EnableFallingTrig_0_31(1 << line);
 8002336:	2201      	movs	r2, #1
 8002338:	68d9      	ldr	r1, [r3, #12]
 800233a:	4082      	lsls	r2, r0
 800233c:	4311      	orrs	r1, r2
 800233e:	60d9      	str	r1, [r3, #12]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8002340:	6899      	ldr	r1, [r3, #8]
 8002342:	ea21 0202 	bic.w	r2, r1, r2
 8002346:	609a      	str	r2, [r3, #8]
}
 8002348:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 800234a:	2301      	movs	r3, #1
 800234c:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR, ExtiLine);
 8002350:	4b03      	ldr	r3, [pc, #12]	; (8002360 <stm32_exti_trigger+0x5c>)
 8002352:	689a      	ldr	r2, [r3, #8]
 8002354:	4302      	orrs	r2, r0
 8002356:	609a      	str	r2, [r3, #8]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8002358:	68da      	ldr	r2, [r3, #12]
 800235a:	4310      	orrs	r0, r2
 800235c:	60d8      	str	r0, [r3, #12]
}
 800235e:	4770      	bx	lr
 8002360:	40013c00 	.word	0x40013c00

08002364 <stm32_exti_set_callback>:

/**
 * @brief set & unset for the interrupt callbacks
 */
int stm32_exti_set_callback(int line, stm32_exti_callback_t cb, void *arg)
{
 8002364:	b510      	push	{r4, lr}
	const struct device *const dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	if (data->cb[line].cb) {
 8002366:	4b07      	ldr	r3, [pc, #28]	; (8002384 <stm32_exti_set_callback+0x20>)
{
 8002368:	4604      	mov	r4, r0
	if (data->cb[line].cb) {
 800236a:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 800236e:	b928      	cbnz	r0, 800237c <stm32_exti_set_callback+0x18>
		return -EBUSY;
	}

	data->cb[line].cb = cb;
 8002370:	f843 1034 	str.w	r1, [r3, r4, lsl #3]
	data->cb[line].data = arg;
 8002374:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8002378:	605a      	str	r2, [r3, #4]

	return 0;
}
 800237a:	bd10      	pop	{r4, pc}
		return -EBUSY;
 800237c:	f06f 000f 	mvn.w	r0, #15
 8002380:	e7fb      	b.n	800237a <stm32_exti_set_callback+0x16>
 8002382:	bf00      	nop
 8002384:	200001d0 	.word	0x200001d0

08002388 <stm32_exti_unset_callback>:
void stm32_exti_unset_callback(int line)
{
	const struct device *const dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	data->cb[line].cb = NULL;
 8002388:	4b03      	ldr	r3, [pc, #12]	; (8002398 <stm32_exti_unset_callback+0x10>)
 800238a:	2200      	movs	r2, #0
 800238c:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
	data->cb[line].data = NULL;
 8002390:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8002394:	605a      	str	r2, [r3, #4]
}
 8002396:	4770      	bx	lr
 8002398:	200001d0 	.word	0x200001d0

0800239c <stm32_clock_control_get_subsys_rate>:
}

static int stm32_clock_control_get_subsys_rate(const struct device *clock,
						clock_control_subsys_t sub_system,
						uint32_t *rate)
{
 800239c:	b510      	push	{r4, lr}
	 * Get AHB Clock (= SystemCoreClock = SYSCLK/prescaler)
	 * SystemCoreClock is preferred to CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC
	 * since it will be updated after clock configuration and hence
	 * more likely to contain actual clock speed
	 */
	uint32_t ahb_clock = SystemCoreClock;
 800239e:	4b21      	ldr	r3, [pc, #132]	; (8002424 <stm32_clock_control_get_subsys_rate+0x88>)
 80023a0:	6818      	ldr	r0, [r3, #0]
	}
#endif

	ARG_UNUSED(clock);

	switch (pclken->bus) {
 80023a2:	680b      	ldr	r3, [r1, #0]
 80023a4:	2b44      	cmp	r3, #68	; 0x44
{
 80023a6:	4614      	mov	r4, r2
	switch (pclken->bus) {
 80023a8:	d828      	bhi.n	80023fc <stm32_clock_control_get_subsys_rate+0x60>
 80023aa:	2b2f      	cmp	r3, #47	; 0x2f
 80023ac:	d805      	bhi.n	80023ba <stm32_clock_control_get_subsys_rate+0x1e>
 80023ae:	3b01      	subs	r3, #1
 80023b0:	2b05      	cmp	r3, #5
 80023b2:	d90d      	bls.n	80023d0 <stm32_clock_control_get_subsys_rate+0x34>
 80023b4:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80023b8:	e01f      	b.n	80023fa <stm32_clock_control_get_subsys_rate+0x5e>
 80023ba:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80023be:	2201      	movs	r2, #1
 80023c0:	408a      	lsls	r2, r1
 80023c2:	4919      	ldr	r1, [pc, #100]	; (8002428 <stm32_clock_control_get_subsys_rate+0x8c>)
 80023c4:	420a      	tst	r2, r1
 80023c6:	d116      	bne.n	80023f6 <stm32_clock_control_get_subsys_rate+0x5a>
 80023c8:	2b40      	cmp	r3, #64	; 0x40
 80023ca:	d1f3      	bne.n	80023b4 <stm32_clock_control_get_subsys_rate+0x18>
	return clock / prescaler;
 80023cc:	0840      	lsrs	r0, r0, #1
	case STM32_CLOCK_BUS_APB1:
#if defined(STM32_CLOCK_BUS_APB1_2)
	case STM32_CLOCK_BUS_APB1_2:
#endif
		*rate = apb1_clock;
		break;
 80023ce:	e012      	b.n	80023f6 <stm32_clock_control_get_subsys_rate+0x5a>
	switch (pclken->bus) {
 80023d0:	2b05      	cmp	r3, #5
 80023d2:	d8ef      	bhi.n	80023b4 <stm32_clock_control_get_subsys_rate+0x18>
 80023d4:	a201      	add	r2, pc, #4	; (adr r2, 80023dc <stm32_clock_control_get_subsys_rate+0x40>)
 80023d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023da:	bf00      	nop
 80023dc:	08002403 	.word	0x08002403
 80023e0:	08002413 	.word	0x08002413
 80023e4:	080023b5 	.word	0x080023b5
 80023e8:	080023f5 	.word	0x080023f5
 80023ec:	080023f5 	.word	0x080023f5
 80023f0:	080023f7 	.word	0x080023f7
 80023f4:	2000      	movs	r0, #0
#endif /* STM32_SRC_PLLI2S_R */
/* PLLSAI1x not supported yet */
/* PLLSAI2x not supported yet */
#if defined(STM32_SRC_LSE)
	case STM32_SRC_LSE:
		*rate = STM32_LSE_FREQ;
 80023f6:	6020      	str	r0, [r4, #0]
#endif /* STM32_HSI48_ENABLED */
	default:
		return -ENOTSUP;
	}

	return 0;
 80023f8:	2000      	movs	r0, #0
}
 80023fa:	bd10      	pop	{r4, pc}
	switch (pclken->bus) {
 80023fc:	2ba8      	cmp	r3, #168	; 0xa8
 80023fe:	d0fa      	beq.n	80023f6 <stm32_clock_control_get_subsys_rate+0x5a>
 8002400:	e7d8      	b.n	80023b4 <stm32_clock_control_get_subsys_rate+0x18>
		*rate = get_pll_div_frequency(get_pllsrc_frequency(),
 8002402:	f000 f895 	bl	8002530 <get_pllsrc_frequency>
	return pllsrc_freq / pllm_div * plln_mul / pllout_div;
 8002406:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800240a:	08c0      	lsrs	r0, r0, #3
 800240c:	4358      	muls	r0, r3
 800240e:	0880      	lsrs	r0, r0, #2
		break;
 8002410:	e7f1      	b.n	80023f6 <stm32_clock_control_get_subsys_rate+0x5a>
		*rate = get_pll_div_frequency(get_pllsrc_frequency(),
 8002412:	f000 f88d 	bl	8002530 <get_pllsrc_frequency>
	return pllsrc_freq / pllm_div * plln_mul / pllout_div;
 8002416:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800241a:	08c0      	lsrs	r0, r0, #3
 800241c:	4358      	muls	r0, r3
 800241e:	08c0      	lsrs	r0, r0, #3
		break;
 8002420:	e7e9      	b.n	80023f6 <stm32_clock_control_get_subsys_rate+0x5a>
 8002422:	bf00      	nop
 8002424:	20000020 	.word	0x20000020
 8002428:	00100111 	.word	0x00100111

0800242c <stm32_clock_control_init>:
 * @param dev clock device struct
 *
 * @return 0
 */
int stm32_clock_control_init(const struct device *dev)
{
 800242c:	b570      	push	{r4, r5, r6, lr}
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800242e:	4c3c      	ldr	r4, [pc, #240]	; (8002520 <stm32_clock_control_init+0xf4>)
	ARG_UNUSED(dev);

	/* Some clocks would be activated by default */
	config_enable_default_clocks();
 8002430:	f000 f896 	bl	8002560 <config_enable_default_clocks>

#if defined(FLASH_ACR_LATENCY)
	uint32_t old_flash_freq;
	uint32_t new_flash_freq;

	old_flash_freq = RCC_CALC_FLASH_FREQ(HAL_RCC_GetSysClockFreq(),
 8002434:	f000 ff3c 	bl	80032b0 <HAL_RCC_GetSysClockFreq>
 8002438:	68a3      	ldr	r3, [r4, #8]
 800243a:	4a3a      	ldr	r2, [pc, #232]	; (8002524 <stm32_clock_control_init+0xf8>)
 800243c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002440:	5cd3      	ldrb	r3, [r2, r3]
 8002442:	fa20 f503 	lsr.w	r5, r0, r3

	new_flash_freq = RCC_CALC_FLASH_FREQ(CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC,
				      STM32_FLASH_PRESCALER);

	/* If freq increases, set flash latency before any clock setting */
	if (old_flash_freq < CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC) {
 8002446:	4838      	ldr	r0, [pc, #224]	; (8002528 <stm32_clock_control_init+0xfc>)
 8002448:	4285      	cmp	r5, r0
 800244a:	d201      	bcs.n	8002450 <stm32_clock_control_init+0x24>
		LL_SetFlashLatency(CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC);
 800244c:	f001 f8a2 	bl	8003594 <LL_SetFlashLatency>
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8002450:	6823      	ldr	r3, [r4, #0]
 8002452:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002456:	6023      	str	r3, [r4, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002458:	6823      	ldr	r3, [r4, #0]
 800245a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800245e:	6023      	str	r3, [r4, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8002460:	4b2f      	ldr	r3, [pc, #188]	; (8002520 <stm32_clock_control_init+0xf4>)
 8002462:	681a      	ldr	r2, [r3, #0]
		while (LL_RCC_HSE_IsReady() != 1) {
 8002464:	0394      	lsls	r4, r2, #14
 8002466:	d5fc      	bpl.n	8002462 <stm32_clock_control_init+0x36>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002468:	689a      	ldr	r2, [r3, #8]
 800246a:	f002 020c 	and.w	r2, r2, #12
	if (LL_RCC_GetSysClkSource() == LL_RCC_SYS_CLKSOURCE_STATUS_PLL) {
 800246e:	2a08      	cmp	r2, #8
 8002470:	d117      	bne.n	80024a2 <stm32_clock_control_init+0x76>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002472:	689a      	ldr	r2, [r3, #8]
 8002474:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002478:	609a      	str	r2, [r3, #8]
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800247a:	681a      	ldr	r2, [r3, #0]
	if (LL_RCC_HSI_IsReady() != 1) {
 800247c:	0790      	lsls	r0, r2, #30
 800247e:	d407      	bmi.n	8002490 <stm32_clock_control_init+0x64>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	f042 0201 	orr.w	r2, r2, #1
 8002486:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8002488:	4a25      	ldr	r2, [pc, #148]	; (8002520 <stm32_clock_control_init+0xf4>)
 800248a:	6813      	ldr	r3, [r2, #0]
		while (LL_RCC_HSI_IsReady() != 1) {
 800248c:	0799      	lsls	r1, r3, #30
 800248e:	d5fc      	bpl.n	800248a <stm32_clock_control_init+0x5e>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002490:	4b23      	ldr	r3, [pc, #140]	; (8002520 <stm32_clock_control_init+0xf4>)
 8002492:	689a      	ldr	r2, [r3, #8]
 8002494:	f022 0203 	bic.w	r2, r2, #3
 8002498:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800249a:	689a      	ldr	r2, [r3, #8]
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 800249c:	f012 0f0c 	tst.w	r2, #12
 80024a0:	d1fb      	bne.n	800249a <stm32_clock_control_init+0x6e>
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80024a2:	4c1f      	ldr	r4, [pc, #124]	; (8002520 <stm32_clock_control_init+0xf4>)
 80024a4:	6823      	ldr	r3, [r4, #0]
 80024a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024aa:	6023      	str	r3, [r4, #0]
	MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, pllp(STM32_PLL_P_DIVISOR));
 80024ac:	6863      	ldr	r3, [r4, #4]
 80024ae:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80024b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024b6:	6063      	str	r3, [r4, #4]
	MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ, pllq(STM32_PLL_Q_DIVISOR));
 80024b8:	6863      	ldr	r3, [r4, #4]
 80024ba:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80024be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80024c2:	6063      	str	r3, [r4, #4]
	config_pll_sysclock();
 80024c4:	f000 f838 	bl	8002538 <config_pll_sysclock>
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80024c8:	6823      	ldr	r3, [r4, #0]
 80024ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024ce:	6023      	str	r3, [r4, #0]
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80024d0:	6823      	ldr	r3, [r4, #0]
	while (LL_RCC_PLL_IsReady() != 1U) {
 80024d2:	019b      	lsls	r3, r3, #6
 80024d4:	d5fc      	bpl.n	80024d0 <stm32_clock_control_init+0xa4>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80024d6:	68a3      	ldr	r3, [r4, #8]
 80024d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024dc:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80024de:	68a3      	ldr	r3, [r4, #8]
 80024e0:	f023 0303 	bic.w	r3, r3, #3
 80024e4:	f043 0302 	orr.w	r3, r3, #2
 80024e8:	60a3      	str	r3, [r4, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80024ea:	4c0d      	ldr	r4, [pc, #52]	; (8002520 <stm32_clock_control_init+0xf4>)
 80024ec:	68a3      	ldr	r3, [r4, #8]
 80024ee:	f003 030c 	and.w	r3, r3, #12
	}

#if STM32_SYSCLK_SRC_PLL
	/* Set PLL as System Clock Source */
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL) {
 80024f2:	2b08      	cmp	r3, #8
 80024f4:	d1fa      	bne.n	80024ec <stm32_clock_control_init+0xc0>
		LL_RCC_SetAHBPrescaler(ahb_prescaler(STM32_CORE_PRESCALER));
	}

#if defined(FLASH_ACR_LATENCY)
	/* If freq not increased, set flash latency after all clock setting */
	if (old_flash_freq >= CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC) {
 80024f6:	4e0c      	ldr	r6, [pc, #48]	; (8002528 <stm32_clock_control_init+0xfc>)
 80024f8:	42b5      	cmp	r5, r6
 80024fa:	d302      	bcc.n	8002502 <stm32_clock_control_init+0xd6>
		LL_SetFlashLatency(CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC);
 80024fc:	4630      	mov	r0, r6
 80024fe:	f001 f849 	bl	8003594 <LL_SetFlashLatency>
	}
#endif /* FLASH_ACR_LATENCY */

	SystemCoreClock = CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC;
 8002502:	4b0a      	ldr	r3, [pc, #40]	; (800252c <stm32_clock_control_init+0x100>)
 8002504:	601e      	str	r6, [r3, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002506:	68a3      	ldr	r3, [r4, #8]
 8002508:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800250c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002510:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002512:	68a3      	ldr	r3, [r4, #8]
 8002514:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002518:	60a3      	str	r3, [r4, #8]

	/* configure MCO1/MCO2 based on Kconfig */
	stm32_clock_control_mco_init();

	return 0;
}
 800251a:	2000      	movs	r0, #0
 800251c:	bd70      	pop	{r4, r5, r6, pc}
 800251e:	bf00      	nop
 8002520:	40023800 	.word	0x40023800
 8002524:	08005e51 	.word	0x08005e51
 8002528:	05b8d800 	.word	0x05b8d800
 800252c:	20000020 	.word	0x20000020

08002530 <get_pllsrc_frequency>:
		return STM32_HSE_FREQ;
	}

	__ASSERT(0, "Invalid source");
	return 0;
}
 8002530:	4800      	ldr	r0, [pc, #0]	; (8002534 <get_pllsrc_frequency+0x4>)
 8002532:	4770      	bx	lr
 8002534:	007a1200 	.word	0x007a1200

08002538 <config_pll_sysclock>:
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8002538:	4a06      	ldr	r2, [pc, #24]	; (8002554 <config_pll_sysclock+0x1c>)
 800253a:	4907      	ldr	r1, [pc, #28]	; (8002558 <config_pll_sysclock+0x20>)
 800253c:	6853      	ldr	r3, [r2, #4]
 800253e:	4019      	ands	r1, r3
 8002540:	4b06      	ldr	r3, [pc, #24]	; (800255c <config_pll_sysclock+0x24>)
 8002542:	430b      	orrs	r3, r1
 8002544:	6053      	str	r3, [r2, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8002546:	6853      	ldr	r3, [r2, #4]
 8002548:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800254c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002550:	6053      	str	r3, [r2, #4]
{
	LL_RCC_PLL_ConfigDomain_SYS(get_pll_source(),
				    pllm(STM32_PLL_M_DIVISOR),
				    STM32_PLL_N_MULTIPLIER,
				    pllp(STM32_PLL_P_DIVISOR));
}
 8002552:	4770      	bx	lr
 8002554:	40023800 	.word	0x40023800
 8002558:	ffbf8000 	.word	0xffbf8000
 800255c:	00406008 	.word	0x00406008

08002560 <config_enable_default_clocks>:
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8002560:	4b06      	ldr	r3, [pc, #24]	; (800257c <config_enable_default_clocks+0x1c>)
 8002562:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002564:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002568:	641a      	str	r2, [r3, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800256a:	6c1b      	ldr	r3, [r3, #64]	; 0x40

/**
 * @brief Activate default clocks
 */
void config_enable_default_clocks(void)
{
 800256c:	b082      	sub	sp, #8
 800256e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002572:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8002574:	9b01      	ldr	r3, [sp, #4]
	/* Power Interface clock enabled by default */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
}
 8002576:	b002      	add	sp, #8
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	40023800 	.word	0x40023800

08002580 <gpio_stm32_init>:
 * @param dev GPIO device struct
 *
 * @return 0
 */
static int gpio_stm32_init(const struct device *dev)
{
 8002580:	b538      	push	{r3, r4, r5, lr}
	struct gpio_stm32_data *data = dev->data;
 8002582:	6903      	ldr	r3, [r0, #16]
{
 8002584:	4604      	mov	r4, r0
	int ret;

	data->dev = dev;
 8002586:	6058      	str	r0, [r3, #4]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
 8002588:	4d08      	ldr	r5, [pc, #32]	; (80025ac <gpio_stm32_init+0x2c>)
 800258a:	4628      	mov	r0, r5
 800258c:	f002 fac0 	bl	8004b10 <z_device_is_ready>

	if (!device_is_ready(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE))) {
 8002590:	b140      	cbz	r0, 80025a4 <gpio_stm32_init+0x24>
					(clock_control_subsys_t *)&cfg->pclken);
 8002592:	6861      	ldr	r1, [r4, #4]
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	return api->on(dev, sys);
 8002594:	68ab      	ldr	r3, [r5, #8]
 8002596:	310c      	adds	r1, #12
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4628      	mov	r0, r5
 800259c:	4798      	blx	r3
	LL_PWR_EnableVddIO2();
	z_stm32_hsem_unlock(CFG_HW_RCC_SEMID);
#endif
	/* enable port clock (if runtime PM is not enabled) */
	ret = gpio_stm32_clock_request(dev, !IS_ENABLED(CONFIG_PM_DEVICE_RUNTIME));
	if (ret < 0) {
 800259e:	ea00 70e0 	and.w	r0, r0, r0, asr #31

	pm_device_init_suspended(dev);
	(void)pm_device_runtime_enable(dev);

	return 0;
}
 80025a2:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
 80025a4:	f06f 0012 	mvn.w	r0, #18
 80025a8:	e7fb      	b.n	80025a2 <gpio_stm32_init+0x22>
 80025aa:	bf00      	nop
 80025ac:	08004d44 	.word	0x08004d44

080025b0 <gpio_stm32_pin_interrupt_configure>:
{
 80025b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80025b2:	4617      	mov	r7, r2
	if (mode == GPIO_INT_MODE_DISABLED) {
 80025b4:	f5b7 1f00 	cmp.w	r7, #2097152	; 0x200000
	const struct gpio_stm32_config *cfg = dev->config;
 80025b8:	6846      	ldr	r6, [r0, #4]
	struct gpio_stm32_data *data = dev->data;
 80025ba:	6902      	ldr	r2, [r0, #16]
{
 80025bc:	460c      	mov	r4, r1
 80025be:	461d      	mov	r5, r3
	if (mode == GPIO_INT_MODE_DISABLED) {
 80025c0:	d124      	bne.n	800260c <gpio_stm32_pin_interrupt_configure+0x5c>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 80025c2:	f001 0203 	and.w	r2, r1, #3
 80025c6:	3204      	adds	r2, #4
 80025c8:	0092      	lsls	r2, r2, #2
 80025ca:	230f      	movs	r3, #15
 80025cc:	4093      	lsls	r3, r2
 80025ce:	ea43 0391 	orr.w	r3, r3, r1, lsr #2
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16)) >> POSITION_VAL(Line >> 16));
 80025d2:	b2da      	uxtb	r2, r3
 80025d4:	4933      	ldr	r1, [pc, #204]	; (80026a4 <gpio_stm32_pin_interrupt_configure+0xf4>)
 80025d6:	3202      	adds	r2, #2
 80025d8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80025dc:	0c19      	lsrs	r1, r3, #16
 80025de:	ea02 4313 	and.w	r3, r2, r3, lsr #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e2:	fa91 f2a1 	rbit	r2, r1
  return __builtin_clz(value);
 80025e6:	fab2 f282 	clz	r2, r2
 80025ea:	40d3      	lsrs	r3, r2
		if (gpio_stm32_get_exti_source(pin) == cfg->port) {
 80025ec:	68b2      	ldr	r2, [r6, #8]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d109      	bne.n	8002606 <gpio_stm32_pin_interrupt_configure+0x56>
			stm32_exti_disable(pin);
 80025f2:	4620      	mov	r0, r4
 80025f4:	f7ff fe7a 	bl	80022ec <stm32_exti_disable>
			stm32_exti_unset_callback(pin);
 80025f8:	4620      	mov	r0, r4
 80025fa:	f7ff fec5 	bl	8002388 <stm32_exti_unset_callback>
			stm32_exti_trigger(pin, STM32_EXTI_TRIG_NONE);
 80025fe:	2100      	movs	r1, #0
 8002600:	4620      	mov	r0, r4
 8002602:	f7ff fe7f 	bl	8002304 <stm32_exti_trigger>
	int err = 0;
 8002606:	2000      	movs	r0, #0
}
 8002608:	b003      	add	sp, #12
 800260a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (mode == GPIO_INT_MODE_LEVEL) {
 800260c:	f5b7 0f80 	cmp.w	r7, #4194304	; 0x400000
 8002610:	d041      	beq.n	8002696 <gpio_stm32_pin_interrupt_configure+0xe6>
	if (stm32_exti_set_callback(pin, gpio_stm32_isr, data) != 0) {
 8002612:	4925      	ldr	r1, [pc, #148]	; (80026a8 <gpio_stm32_pin_interrupt_configure+0xf8>)
 8002614:	4620      	mov	r0, r4
 8002616:	f7ff fea5 	bl	8002364 <stm32_exti_set_callback>
 800261a:	2800      	cmp	r0, #0
 800261c:	d13e      	bne.n	800269c <gpio_stm32_pin_interrupt_configure+0xec>
	struct stm32_pclken pclken = {
 800261e:	4a23      	ldr	r2, [pc, #140]	; (80026ac <gpio_stm32_pin_interrupt_configure+0xfc>)
	gpio_stm32_enable_int(cfg->port, pin);
 8002620:	68b6      	ldr	r6, [r6, #8]
	struct stm32_pclken pclken = {
 8002622:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002626:	466b      	mov	r3, sp
 8002628:	e883 0003 	stmia.w	r3, {r0, r1}
 800262c:	4820      	ldr	r0, [pc, #128]	; (80026b0 <gpio_stm32_pin_interrupt_configure+0x100>)
 800262e:	6882      	ldr	r2, [r0, #8]
 8002630:	4619      	mov	r1, r3
 8002632:	6812      	ldr	r2, [r2, #0]
 8002634:	4790      	blx	r2
	if (ret != 0) {
 8002636:	b9c0      	cbnz	r0, 800266a <gpio_stm32_pin_interrupt_configure+0xba>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8002638:	f004 0303 	and.w	r3, r4, #3
 800263c:	3304      	adds	r3, #4
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	220f      	movs	r2, #15
 8002642:	409a      	lsls	r2, r3
 8002644:	ea42 0294 	orr.w	r2, r2, r4, lsr #2
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8002648:	b2d3      	uxtb	r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002650:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8002654:	0c11      	lsrs	r1, r2, #16
 8002656:	6898      	ldr	r0, [r3, #8]
 8002658:	ea20 4012 	bic.w	r0, r0, r2, lsr #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265c:	fa91 f2a1 	rbit	r2, r1
  return __builtin_clz(value);
 8002660:	fab2 f282 	clz	r2, r2
 8002664:	4096      	lsls	r6, r2
 8002666:	4306      	orrs	r6, r0
 8002668:	609e      	str	r6, [r3, #8]
	switch (trig) {
 800266a:	f1b5 6f80 	cmp.w	r5, #67108864	; 0x4000000
 800266e:	d00e      	beq.n	800268e <gpio_stm32_pin_interrupt_configure+0xde>
 8002670:	f1b5 6fc0 	cmp.w	r5, #100663296	; 0x6000000
 8002674:	d00d      	beq.n	8002692 <gpio_stm32_pin_interrupt_configure+0xe2>
 8002676:	f105 437e 	add.w	r3, r5, #4261412864	; 0xfe000000
 800267a:	4259      	negs	r1, r3
 800267c:	4159      	adcs	r1, r3
 800267e:	0049      	lsls	r1, r1, #1
	stm32_exti_trigger(pin, edge);
 8002680:	4620      	mov	r0, r4
 8002682:	f7ff fe3f 	bl	8002304 <stm32_exti_trigger>
	stm32_exti_enable(pin);
 8002686:	4620      	mov	r0, r4
 8002688:	f7ff fe1e 	bl	80022c8 <stm32_exti_enable>
 800268c:	e7bb      	b.n	8002606 <gpio_stm32_pin_interrupt_configure+0x56>
		edge = STM32_EXTI_TRIG_RISING;
 800268e:	2101      	movs	r1, #1
 8002690:	e7f6      	b.n	8002680 <gpio_stm32_pin_interrupt_configure+0xd0>
		edge = STM32_EXTI_TRIG_BOTH;
 8002692:	2103      	movs	r1, #3
 8002694:	e7f4      	b.n	8002680 <gpio_stm32_pin_interrupt_configure+0xd0>
		err = -ENOTSUP;
 8002696:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800269a:	e7b5      	b.n	8002608 <gpio_stm32_pin_interrupt_configure+0x58>
		err = -EBUSY;
 800269c:	f06f 000f 	mvn.w	r0, #15
	return err;
 80026a0:	e7b2      	b.n	8002608 <gpio_stm32_pin_interrupt_configure+0x58>
 80026a2:	bf00      	nop
 80026a4:	40013800 	.word	0x40013800
 80026a8:	080044f1 	.word	0x080044f1
 80026ac:	080051dc 	.word	0x080051dc
 80026b0:	08004d44 	.word	0x08004d44

080026b4 <pinctrl_configure_pins>:
	return gpio_stm32_configure(port_device, STM32_PIN(pin), pin_cgf, pin_func);
}

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
 80026b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	port_device = gpio_ports[STM32_PORT(pin)];
 80026b8:	4f1e      	ldr	r7, [pc, #120]	; (8002734 <pinctrl_configure_pins+0x80>)
 80026ba:	4604      	mov	r4, r0
 80026bc:	eb00 06c1 	add.w	r6, r0, r1, lsl #3
	uint32_t pin, mux;
	uint32_t pin_cgf = 0;
 80026c0:	2500      	movs	r5, #0
	if (ret < 0) {
		return ret;
	}
#endif /* DT_HAS_COMPAT_STATUS_OKAY(st_stm32f1_pinctrl) */

	for (uint8_t i = 0U; i < pin_cnt; i++) {
 80026c2:	42b4      	cmp	r4, r6
 80026c4:	d101      	bne.n	80026ca <pinctrl_configure_pins+0x16>
		if (ret < 0) {
			return ret;
		}
	}

	return 0;
 80026c6:	2000      	movs	r0, #0
 80026c8:	e014      	b.n	80026f4 <pinctrl_configure_pins+0x40>
		mux = pins[i].pinmux;
 80026ca:	6820      	ldr	r0, [r4, #0]
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
 80026cc:	06c3      	lsls	r3, r0, #27
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_ANALOG) {
 80026ce:	f000 091f 	and.w	r9, r0, #31
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
 80026d2:	d411      	bmi.n	80026f8 <pinctrl_configure_pins+0x44>
			pin_cgf = pins[i].pincfg | STM32_MODER_ALT_MODE;
 80026d4:	6865      	ldr	r5, [r4, #4]
 80026d6:	f045 0520 	orr.w	r5, r5, #32
		pin = STM32PIN(STM32_DT_PINMUX_PORT(mux),
 80026da:	f3c0 1a47 	ubfx	sl, r0, #5, #8
	if (STM32_PORT(pin) >= gpio_ports_cnt) {
 80026de:	f3c0 2043 	ubfx	r0, r0, #9, #4
 80026e2:	280a      	cmp	r0, #10
 80026e4:	d823      	bhi.n	800272e <pinctrl_configure_pins+0x7a>
	port_device = gpio_ports[STM32_PORT(pin)];
 80026e6:	f857 8020 	ldr.w	r8, [r7, r0, lsl #2]
	if ((port_device == NULL) || (!device_is_ready(port_device))) {
 80026ea:	f1b8 0f00 	cmp.w	r8, #0
 80026ee:	d10d      	bne.n	800270c <pinctrl_configure_pins+0x58>
		return -ENODEV;
 80026f0:	f06f 0012 	mvn.w	r0, #18
}
 80026f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_ANALOG) {
 80026f8:	f1b9 0f10 	cmp.w	r9, #16
 80026fc:	d004      	beq.n	8002708 <pinctrl_configure_pins+0x54>
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_GPIO) {
 80026fe:	f1b9 0f11 	cmp.w	r9, #17
 8002702:	d1ea      	bne.n	80026da <pinctrl_configure_pins+0x26>
			pin_cgf = pins[i].pincfg;
 8002704:	6865      	ldr	r5, [r4, #4]
 8002706:	e7e8      	b.n	80026da <pinctrl_configure_pins+0x26>
			pin_cgf = STM32_MODER_ANALOG_MODE;
 8002708:	2530      	movs	r5, #48	; 0x30
 800270a:	e7e6      	b.n	80026da <pinctrl_configure_pins+0x26>
 800270c:	4640      	mov	r0, r8
 800270e:	f002 f9ff 	bl	8004b10 <z_device_is_ready>
	if ((port_device == NULL) || (!device_is_ready(port_device))) {
 8002712:	2800      	cmp	r0, #0
 8002714:	d0ec      	beq.n	80026f0 <pinctrl_configure_pins+0x3c>
	return gpio_stm32_configure(port_device, STM32_PIN(pin), pin_cgf, pin_func);
 8002716:	464b      	mov	r3, r9
 8002718:	462a      	mov	r2, r5
 800271a:	f00a 010f 	and.w	r1, sl, #15
 800271e:	4640      	mov	r0, r8
 8002720:	f001 fefd 	bl	800451e <gpio_stm32_configure>
		if (ret < 0) {
 8002724:	2800      	cmp	r0, #0
 8002726:	f104 0408 	add.w	r4, r4, #8
 800272a:	daca      	bge.n	80026c2 <pinctrl_configure_pins+0xe>
 800272c:	e7e2      	b.n	80026f4 <pinctrl_configure_pins+0x40>
		return -EINVAL;
 800272e:	f06f 0015 	mvn.w	r0, #21
 8002732:	e7df      	b.n	80026f4 <pinctrl_configure_pins+0x40>
 8002734:	080052a8 	.word	0x080052a8

08002738 <elapsed>:
 *     - the timer reset or the last time the function was called
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
 8002738:	b510      	push	{r4, lr}
	uint32_t val1 = SysTick->VAL;	/* A */
 800273a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800273e:	699a      	ldr	r2, [r3, #24]
	uint32_t ctrl = SysTick->CTRL;	/* B */
 8002740:	6919      	ldr	r1, [r3, #16]
	uint32_t val2 = SysTick->VAL;	/* C */
 8002742:	6998      	ldr	r0, [r3, #24]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 8002744:	4b09      	ldr	r3, [pc, #36]	; (800276c <elapsed+0x34>)
 8002746:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 800274a:	4909      	ldr	r1, [pc, #36]	; (8002770 <elapsed+0x38>)
 800274c:	d101      	bne.n	8002752 <elapsed+0x1a>
	    || (val1 < val2)) {
 800274e:	4282      	cmp	r2, r0
 8002750:	d206      	bcs.n	8002760 <elapsed+0x28>
		overflow_cyc += last_load;
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	680c      	ldr	r4, [r1, #0]
 8002756:	4422      	add	r2, r4
 8002758:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
 800275a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800275e:	6912      	ldr	r2, [r2, #16]
	}

	return (last_load - val2) + overflow_cyc;
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	680a      	ldr	r2, [r1, #0]
 8002764:	4413      	add	r3, r2
}
 8002766:	1a18      	subs	r0, r3, r0
 8002768:	bd10      	pop	{r4, pc}
 800276a:	bf00      	nop
 800276c:	200002d0 	.word	0x200002d0
 8002770:	200002dc 	.word	0x200002dc

08002774 <sys_clock_driver_init>:
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002774:	4b09      	ldr	r3, [pc, #36]	; (800279c <sys_clock_driver_init+0x28>)
 8002776:	2220      	movs	r2, #32
 8002778:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
static int sys_clock_driver_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
 800277c:	4b08      	ldr	r3, [pc, #32]	; (80027a0 <sys_clock_driver_init+0x2c>)
 800277e:	f242 527f 	movw	r2, #9599	; 0x257f
 8002782:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
 8002784:	4b07      	ldr	r3, [pc, #28]	; (80027a4 <sys_clock_driver_init+0x30>)
 8002786:	2000      	movs	r0, #0
 8002788:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
 800278a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800278e:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 8002790:	6198      	str	r0, [r3, #24]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 8002792:	691a      	ldr	r2, [r3, #16]
 8002794:	f042 0207 	orr.w	r2, r2, #7
 8002798:	611a      	str	r2, [r3, #16]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
 800279a:	4770      	bx	lr
 800279c:	e000ed00 	.word	0xe000ed00
 80027a0:	200002dc 	.word	0x200002dc
 80027a4:	200002d0 	.word	0x200002d0

080027a8 <sys_clock_isr>:
{
 80027a8:	b508      	push	{r3, lr}
	elapsed();
 80027aa:	f7ff ffc5 	bl	8002738 <elapsed>
	cycle_count += overflow_cyc;
 80027ae:	4b0c      	ldr	r3, [pc, #48]	; (80027e0 <sys_clock_isr+0x38>)
 80027b0:	4a0c      	ldr	r2, [pc, #48]	; (80027e4 <sys_clock_isr+0x3c>)
 80027b2:	6818      	ldr	r0, [r3, #0]
 80027b4:	6811      	ldr	r1, [r2, #0]
 80027b6:	4408      	add	r0, r1
 80027b8:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
 80027ba:	2200      	movs	r2, #0
 80027bc:	601a      	str	r2, [r3, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 80027be:	4a0a      	ldr	r2, [pc, #40]	; (80027e8 <sys_clock_isr+0x40>)
 80027c0:	6813      	ldr	r3, [r2, #0]
 80027c2:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80027c6:	1ac0      	subs	r0, r0, r3
 80027c8:	fbb0 f0f1 	udiv	r0, r0, r1
		announced_cycles += dticks * CYC_PER_TICK;
 80027cc:	fb01 3300 	mla	r3, r1, r0, r3
 80027d0:	6013      	str	r3, [r2, #0]
		sys_clock_announce(dticks);
 80027d2:	f001 fb83 	bl	8003edc <sys_clock_announce>
}
 80027d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 80027da:	f7ff bbc5 	b.w	8001f68 <z_arm_exc_exit>
 80027de:	bf00      	nop
 80027e0:	200002d0 	.word	0x200002d0
 80027e4:	200002d8 	.word	0x200002d8
 80027e8:	200002d4 	.word	0x200002d4

080027ec <sys_clock_set_timeout>:
{
 80027ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027f0:	4e31      	ldr	r6, [pc, #196]	; (80028b8 <sys_clock_set_timeout+0xcc>)
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
 80027f2:	2900      	cmp	r1, #0
 80027f4:	d054      	beq.n	80028a0 <sys_clock_set_timeout+0xb4>
 80027f6:	1c42      	adds	r2, r0, #1
 80027f8:	d10a      	bne.n	8002810 <sys_clock_set_timeout+0x24>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 80027fa:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80027fe:	6913      	ldr	r3, [r2, #16]
 8002800:	f023 0301 	bic.w	r3, r3, #1
 8002804:	6113      	str	r3, [r2, #16]
		last_load = TIMER_STOPPED;
 8002806:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800280a:	6033      	str	r3, [r6, #0]
}
 800280c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint32_t last_load_ = last_load;
 8002810:	6835      	ldr	r5, [r6, #0]
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8002812:	2801      	cmp	r0, #1
 8002814:	dd4a      	ble.n	80028ac <sys_clock_set_timeout+0xc0>
 8002816:	f240 68d2 	movw	r8, #1746	; 0x6d2
 800281a:	4540      	cmp	r0, r8
 800281c:	dc01      	bgt.n	8002822 <sys_clock_set_timeout+0x36>
 800281e:	f100 38ff 	add.w	r8, r0, #4294967295
	__asm__ volatile(
 8002822:	f04f 0320 	mov.w	r3, #32
 8002826:	f3ef 8411 	mrs	r4, BASEPRI
 800282a:	f383 8812 	msr	BASEPRI_MAX, r3
 800282e:	f3bf 8f6f 	isb	sy
	uint32_t pending = elapsed();
 8002832:	f7ff ff81 	bl	8002738 <elapsed>
	cycle_count += pending;
 8002836:	4f21      	ldr	r7, [pc, #132]	; (80028bc <sys_clock_set_timeout+0xd0>)
	val1 = SysTick->VAL;
 8002838:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	overflow_cyc = 0U;
 800283c:	2100      	movs	r1, #0
	val1 = SysTick->VAL;
 800283e:	f8d3 c018 	ldr.w	ip, [r3, #24]
	cycle_count += pending;
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	18c2      	adds	r2, r0, r3
	overflow_cyc = 0U;
 8002846:	4b1e      	ldr	r3, [pc, #120]	; (80028c0 <sys_clock_set_timeout+0xd4>)
 8002848:	6019      	str	r1, [r3, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
 800284a:	4b1e      	ldr	r3, [pc, #120]	; (80028c4 <sys_clock_set_timeout+0xd8>)
 800284c:	681b      	ldr	r3, [r3, #0]
	if ((int32_t)unannounced < 0) {
 800284e:	1ad1      	subs	r1, r2, r3
 8002850:	d42f      	bmi.n	80028b2 <sys_clock_set_timeout+0xc6>
		delay = ticks * CYC_PER_TICK;
 8002852:	f44f 5016 	mov.w	r0, #9600	; 0x2580
		delay += unannounced;
 8002856:	fb00 1108 	mla	r1, r0, r8, r1
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 800285a:	f501 5115 	add.w	r1, r1, #9536	; 0x2540
		delay -= unannounced;
 800285e:	1a9b      	subs	r3, r3, r2
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8002860:	313f      	adds	r1, #63	; 0x3f
 8002862:	fbb1 f1f0 	udiv	r1, r1, r0
		delay -= unannounced;
 8002866:	fb00 3301 	mla	r3, r0, r1, r3
		delay = MAX(delay, MIN_DELAY);
 800286a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800286e:	d920      	bls.n	80028b2 <sys_clock_set_timeout+0xc6>
		if (delay > MAX_CYCLES) {
 8002870:	4915      	ldr	r1, [pc, #84]	; (80028c8 <sys_clock_set_timeout+0xdc>)
 8002872:	428b      	cmp	r3, r1
 8002874:	bf28      	it	cs
 8002876:	460b      	movcs	r3, r1
	val2 = SysTick->VAL;
 8002878:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		last_load = MIN_DELAY;
 800287c:	6033      	str	r3, [r6, #0]
	val2 = SysTick->VAL;
 800287e:	6988      	ldr	r0, [r1, #24]
	SysTick->LOAD = last_load - 1;
 8002880:	3b01      	subs	r3, #1
 8002882:	614b      	str	r3, [r1, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 8002884:	2300      	movs	r3, #0
 8002886:	618b      	str	r3, [r1, #24]
	if (val1 < val2) {
 8002888:	4584      	cmp	ip, r0
 800288a:	ebac 0300 	sub.w	r3, ip, r0
		cycle_count += (val1 + (last_load_ - val2));
 800288e:	bf38      	it	cc
 8002890:	195b      	addcc	r3, r3, r5
		cycle_count += (val1 - val2);
 8002892:	441a      	add	r2, r3
 8002894:	603a      	str	r2, [r7, #0]
	__asm__ volatile(
 8002896:	f384 8811 	msr	BASEPRI, r4
 800289a:	f3bf 8f6f 	isb	sy
 800289e:	e7b5      	b.n	800280c <sys_clock_set_timeout+0x20>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 80028a0:	1c43      	adds	r3, r0, #1
	uint32_t last_load_ = last_load;
 80028a2:	6835      	ldr	r5, [r6, #0]
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 80028a4:	d1b5      	bne.n	8002812 <sys_clock_set_timeout+0x26>
 80028a6:	f240 60d2 	movw	r0, #1746	; 0x6d2
 80028aa:	e7b8      	b.n	800281e <sys_clock_set_timeout+0x32>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 80028ac:	f04f 0800 	mov.w	r8, #0
 80028b0:	e7b7      	b.n	8002822 <sys_clock_set_timeout+0x36>
 80028b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028b6:	e7df      	b.n	8002878 <sys_clock_set_timeout+0x8c>
 80028b8:	200002dc 	.word	0x200002dc
 80028bc:	200002d8 	.word	0x200002d8
 80028c0:	200002d0 	.word	0x200002d0
 80028c4:	200002d4 	.word	0x200002d4
 80028c8:	00ffc300 	.word	0x00ffc300

080028cc <sys_clock_elapsed>:
{
 80028cc:	b510      	push	{r4, lr}
	__asm__ volatile(
 80028ce:	f04f 0320 	mov.w	r3, #32
 80028d2:	f3ef 8411 	mrs	r4, BASEPRI
 80028d6:	f383 8812 	msr	BASEPRI_MAX, r3
 80028da:	f3bf 8f6f 	isb	sy
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
 80028de:	f7ff ff2b 	bl	8002738 <elapsed>
 80028e2:	4b07      	ldr	r3, [pc, #28]	; (8002900 <sys_clock_elapsed+0x34>)
 80028e4:	4a07      	ldr	r2, [pc, #28]	; (8002904 <sys_clock_elapsed+0x38>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	6812      	ldr	r2, [r2, #0]
 80028ea:	1a9b      	subs	r3, r3, r2
 80028ec:	4403      	add	r3, r0
	__asm__ volatile(
 80028ee:	f384 8811 	msr	BASEPRI, r4
 80028f2:	f3bf 8f6f 	isb	sy
}
 80028f6:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 80028fa:	fbb3 f0f0 	udiv	r0, r3, r0
 80028fe:	bd10      	pop	{r4, pc}
 8002900:	200002d8 	.word	0x200002d8
 8002904:	200002d4 	.word	0x200002d4

08002908 <adc_irq>:
ISR_DIRECT_DECLARE(adc_irq)
 8002908:	4668      	mov	r0, sp
 800290a:	f020 0107 	bic.w	r1, r0, #7
 800290e:	468d      	mov	sp, r1
 8002910:	b501      	push	{r0, lr}
{
  /* Note: on this STM32 series, there is no flag ADC group injected          */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "JEOC" is corresponding to flag "JEOS"               */
  /*       in other STM32 families).                                          */
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_JEOS) == (LL_ADC_FLAG_JEOS));
 8002912:	4b07      	ldr	r3, [pc, #28]	; (8002930 <adc_irq+0x28>)
 8002914:	681a      	ldr	r2, [r3, #0]
	if (LL_ADC_IsActiveFlag_JEOS(config->adc)) {
 8002916:	0752      	lsls	r2, r2, #29
 8002918:	d506      	bpl.n	8002928 <adc_irq+0x20>
{
  /* Note: on this STM32 series, there is no flag ADC group injected          */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "JEOC" is corresponding to flag "JEOS"               */
  /*       in other STM32 families).                                          */
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 800291a:	f06f 0204 	mvn.w	r2, #4
 800291e:	601a      	str	r2, [r3, #0]
		data->regulation_cb(data->regulation_ctx);
 8002920:	4b04      	ldr	r3, [pc, #16]	; (8002934 <adc_irq+0x2c>)
 8002922:	e9d3 2000 	ldrd	r2, r0, [r3]
 8002926:	4790      	blx	r2
ISR_DIRECT_DECLARE(adc_irq)
 8002928:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
 800292c:	4685      	mov	sp, r0
 800292e:	4770      	bx	lr
 8002930:	40012000 	.word	0x40012000
 8002934:	200002e0 	.word	0x200002e0

08002938 <currsmp_shunt_stm32_init>:
/*******************************************************************************
 * Initialization
 ******************************************************************************/

static int currsmp_shunt_stm32_init(const struct device *dev)
{
 8002938:	b570      	push	{r4, r5, r6, lr}
	struct currsmp_shunt_stm32_data *data = dev->data;

	int ret;

	/* configure pinmux */
	ret = pinctrl_apply_state(config->pcfg, PINCTRL_STATE_DEFAULT);
 800293a:	6843      	ldr	r3, [r0, #4]
	struct currsmp_shunt_stm32_data *data = dev->data;
 800293c:	6904      	ldr	r4, [r0, #16]
{
 800293e:	b090      	sub	sp, #64	; 0x40
 8002940:	4605      	mov	r5, r0
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
 8002942:	aa0b      	add	r2, sp, #44	; 0x2c
 8002944:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002946:	2100      	movs	r1, #0
 8002948:	f001 fe01 	bl	800454e <pinctrl_lookup_state>
	if (ret < 0) {
 800294c:	2800      	cmp	r0, #0
 800294e:	db20      	blt.n	8002992 <currsmp_shunt_stm32_init+0x5a>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
 8002950:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 8002952:	2200      	movs	r2, #0
 8002954:	7919      	ldrb	r1, [r3, #4]
 8002956:	6818      	ldr	r0, [r3, #0]
 8002958:	f7ff feac 	bl	80026b4 <pinctrl_configure_pins>
	if (ret < 0) {
 800295c:	2800      	cmp	r0, #0
 800295e:	db18      	blt.n	8002992 <currsmp_shunt_stm32_init+0x5a>
 8002960:	4839      	ldr	r0, [pc, #228]	; (8002a48 <currsmp_shunt_stm32_init+0x110>)
 8002962:	686d      	ldr	r5, [r5, #4]
 8002964:	6883      	ldr	r3, [r0, #8]
	ret = clock_control_on(clk, (clock_control_subsys_t *)&config->pclken);
 8002966:	1d2e      	adds	r6, r5, #4
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4631      	mov	r1, r6
 800296c:	4798      	blx	r3
	if (ret < 0) {
 800296e:	2800      	cmp	r0, #0
 8002970:	db0f      	blt.n	8002992 <currsmp_shunt_stm32_init+0x5a>
	LL_ADC_CommonStructInit(&adc_cinit);
 8002972:	a802      	add	r0, sp, #8
 8002974:	f002 f807 	bl	8004986 <LL_ADC_CommonStructInit>
	if (config->adc_resolution == 6U) {
 8002978:	7c2b      	ldrb	r3, [r5, #16]
	if (LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(config->adc),
 800297a:	4834      	ldr	r0, [pc, #208]	; (8002a4c <currsmp_shunt_stm32_init+0x114>)
	if (config->adc_resolution == 6U) {
 800297c:	3b06      	subs	r3, #6
 800297e:	bf18      	it	ne
 8002980:	2301      	movne	r3, #1
 8002982:	041b      	lsls	r3, r3, #16
	if (LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(config->adc),
 8002984:	a902      	add	r1, sp, #8
 8002986:	9302      	str	r3, [sp, #8]
 8002988:	f000 fcc0 	bl	800330c <LL_ADC_CommonInit>
 800298c:	b118      	cbz	r0, 8002996 <currsmp_shunt_stm32_init+0x5e>
		return -EIO;
 800298e:	f06f 0004 	mvn.w	r0, #4
				      config->adc_ch_c);
	data->jsqr[2] = adc_calc_jsqr(config->adc_trigger, config->adc_ch_b,
				      config->adc_ch_a);

	return 0;
}
 8002992:	b010      	add	sp, #64	; 0x40
 8002994:	bd70      	pop	{r4, r5, r6, pc}
	LL_ADC_StructInit(&adc_init);
 8002996:	a804      	add	r0, sp, #16
 8002998:	f002 f811 	bl	80049be <LL_ADC_StructInit>
	ret = stm32_adc_res_get(config->adc_resolution, &adc_init.Resolution);
 800299c:	7c28      	ldrb	r0, [r5, #16]
 800299e:	a904      	add	r1, sp, #16
 80029a0:	f001 ffcc 	bl	800493c <stm32_adc_res_get>
	if (ret < 0) {
 80029a4:	2800      	cmp	r0, #0
 80029a6:	dbf4      	blt.n	8002992 <currsmp_shunt_stm32_init+0x5a>
	if (LL_ADC_Init(config->adc, &adc_init) != SUCCESS) {
 80029a8:	6828      	ldr	r0, [r5, #0]
 80029aa:	a904      	add	r1, sp, #16
 80029ac:	f001 ffee 	bl	800498c <LL_ADC_Init>
 80029b0:	2800      	cmp	r0, #0
 80029b2:	d1ec      	bne.n	800298e <currsmp_shunt_stm32_init+0x56>
	LL_ADC_REG_StructInit(&adc_rinit);
 80029b4:	a80b      	add	r0, sp, #44	; 0x2c
 80029b6:	f002 f809 	bl	80049cc <LL_ADC_REG_StructInit>
	if (LL_ADC_REG_Init(config->adc, &adc_rinit) != SUCCESS) {
 80029ba:	6828      	ldr	r0, [r5, #0]
 80029bc:	a90b      	add	r1, sp, #44	; 0x2c
 80029be:	f000 fcb7 	bl	8003330 <LL_ADC_REG_Init>
 80029c2:	2800      	cmp	r0, #0
 80029c4:	d1e3      	bne.n	800298e <currsmp_shunt_stm32_init+0x56>
	LL_ADC_INJ_StructInit(&adc_jinit);
 80029c6:	a807      	add	r0, sp, #28
 80029c8:	f002 f82a 	bl	8004a20 <LL_ADC_INJ_StructInit>
		config->adc_trigger | LL_ADC_INJ_TRIG_EXT_RISING;
 80029cc:	6a2b      	ldr	r3, [r5, #32]
 80029ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
	adc_jinit.TriggerSource =
 80029d2:	9307      	str	r3, [sp, #28]
	if (LL_ADC_INJ_Init(config->adc, &adc_jinit) != SUCCESS) {
 80029d4:	6828      	ldr	r0, [r5, #0]
 80029d6:	a907      	add	r1, sp, #28
 80029d8:	f001 ffff 	bl	80049da <LL_ADC_INJ_Init>
 80029dc:	2800      	cmp	r0, #0
 80029de:	d1d6      	bne.n	800298e <currsmp_shunt_stm32_init+0x56>
	ret = stm32_adc_smp_get(config->adc_tsample, &smp);
 80029e0:	8a68      	ldrh	r0, [r5, #18]
 80029e2:	a901      	add	r1, sp, #4
 80029e4:	f001 ffad 	bl	8004942 <stm32_adc_smp_get>
	if (ret < 0) {
 80029e8:	2800      	cmp	r0, #0
 80029ea:	dbd2      	blt.n	8002992 <currsmp_shunt_stm32_init+0x5a>
	LL_ADC_SetChannelSamplingTime(config->adc, config->adc_ch_a, smp);
 80029ec:	9a01      	ldr	r2, [sp, #4]
 80029ee:	6969      	ldr	r1, [r5, #20]
 80029f0:	6828      	ldr	r0, [r5, #0]
 80029f2:	f001 fde3 	bl	80045bc <LL_ADC_SetChannelSamplingTime>
	LL_ADC_SetChannelSamplingTime(config->adc, config->adc_ch_b, smp);
 80029f6:	9a01      	ldr	r2, [sp, #4]
 80029f8:	69a9      	ldr	r1, [r5, #24]
 80029fa:	6828      	ldr	r0, [r5, #0]
 80029fc:	f001 fdde 	bl	80045bc <LL_ADC_SetChannelSamplingTime>
	LL_ADC_SetChannelSamplingTime(config->adc, config->adc_ch_c, smp);
 8002a00:	9a01      	ldr	r2, [sp, #4]
 8002a02:	69e9      	ldr	r1, [r5, #28]
 8002a04:	6828      	ldr	r0, [r5, #0]
 8002a06:	f001 fdd9 	bl	80045bc <LL_ADC_SetChannelSamplingTime>
	ret = stm32_adc_clk_get(config->adc, &config->pclken, &adc_clk);
 8002a0a:	6828      	ldr	r0, [r5, #0]
 8002a0c:	aa03      	add	r2, sp, #12
 8002a0e:	4631      	mov	r1, r6
 8002a10:	f000 fbb8 	bl	8003184 <stm32_adc_clk_get>
	if (ret < 0) {
 8002a14:	2800      	cmp	r0, #0
 8002a16:	dbbc      	blt.n	8002992 <currsmp_shunt_stm32_init+0x5a>
	LL_ADC_Enable(config->adc);
 8002a18:	682a      	ldr	r2, [r5, #0]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8002a1a:	6893      	ldr	r3, [r2, #8]
 8002a1c:	f043 0301 	orr.w	r3, r3, #1
 8002a20:	6093      	str	r3, [r2, #8]
	LL_ADC_EnableIT_JEOS(config->adc);
 8002a22:	682a      	ldr	r2, [r5, #0]
{
  /* Note: on this STM32 series, there is no flag ADC group injected          */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "JEOC" is corresponding to flag "JEOS"               */
  /*       in other STM32 families).                                          */
  SET_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8002a24:	6853      	ldr	r3, [r2, #4]
 8002a26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a2a:	6053      	str	r3, [r2, #4]
	IRQ_DIRECT_CONNECT(DT_IRQ_BY_IDX(DT_INST_PARENT(0), 0, irq),
 8002a2c:	2100      	movs	r1, #0
 8002a2e:	2201      	movs	r2, #1
 8002a30:	2012      	movs	r0, #18
 8002a32:	f7ff f98f 	bl	8001d54 <z_arm_irq_priority_set>
	irq_enable(config->adc_irq);
 8002a36:	68e8      	ldr	r0, [r5, #12]
 8002a38:	f7ff f97e 	bl	8001d38 <arch_irq_enable>
	data->jsqr[0] = adc_calc_jsqr(config->adc_trigger, config->adc_ch_b,
 8002a3c:	2300      	movs	r3, #0
	data->jsqr[1] = adc_calc_jsqr(config->adc_trigger, config->adc_ch_a,
 8002a3e:	e9c4 3304 	strd	r3, r3, [r4, #16]
	data->jsqr[2] = adc_calc_jsqr(config->adc_trigger, config->adc_ch_b,
 8002a42:	61a3      	str	r3, [r4, #24]
	return 0;
 8002a44:	4618      	mov	r0, r3
 8002a46:	e7a4      	b.n	8002992 <currsmp_shunt_stm32_init+0x5a>
 8002a48:	08004d44 	.word	0x08004d44
 8002a4c:	40012300 	.word	0x40012300

08002a50 <timer_irq>:
	       (uint8_t)gpio_pin_get_raw(config->h2.port, config->h2.pin)
		       << 1U |
	       (uint8_t)gpio_pin_get_raw(config->h1.port, config->h1.pin);
}

ISR_DIRECT_DECLARE(timer_irq)
 8002a50:	4668      	mov	r0, sp
 8002a52:	f020 0107 	bic.w	r1, r0, #7
 8002a56:	468d      	mov	sp, r1
 8002a58:	b501      	push	{r0, lr}
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC1(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8002a5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a5e:	691a      	ldr	r2, [r3, #16]
 8002a60:	0792      	lsls	r2, r2, #30
 8002a62:	d51f      	bpl.n	8002aa4 <timer_irq+0x54>
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8002a64:	f06f 0202 	mvn.w	r2, #2
 8002a68:	611a      	str	r2, [r3, #16]
		return 0;
	}

	LL_TIM_ClearFlag_CC1(config->timer);

	curr_state = halls_stm32_get_state(dev);
 8002a6a:	4836      	ldr	r0, [pc, #216]	; (8002b44 <timer_irq+0xf4>)
 8002a6c:	f001 fe66 	bl	800473c <halls_stm32_get_state.isra.0>

	switch (curr_state) {
 8002a70:	1e43      	subs	r3, r0, #1
 8002a72:	2b05      	cmp	r3, #5
 8002a74:	d816      	bhi.n	8002aa4 <timer_irq+0x54>
 8002a76:	e8df f003 	tbb	[pc, r3]
 8002a7a:	3119      	.short	0x3119
 8002a7c:	3d034a25 	.word	0x3d034a25
	case 5U:
		if (data->last_state == 4U) {
 8002a80:	4b31      	ldr	r3, [pc, #196]	; (8002b48 <timer_irq+0xf8>)
			eangle = 0;
		} else if (data->last_state == 1U) {
 8002a82:	789b      	ldrb	r3, [r3, #2]
			eangle = 60;
			direction = -1;
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	bf15      	itete	ne
 8002a88:	2301      	movne	r3, #1
 8002a8a:	f04f 33ff 	moveq.w	r3, #4294967295
 8002a8e:	2200      	movne	r2, #0
 8002a90:	223c      	moveq	r2, #60	; 0x3c
		return 0;
	}

	eangle += config->phase_shift;

	data->eangle = eangle;
 8002a92:	492d      	ldr	r1, [pc, #180]	; (8002b48 <timer_irq+0xf8>)
	eangle += config->phase_shift;
 8002a94:	323c      	adds	r2, #60	; 0x3c
	data->eangle = eangle;
 8002a96:	800a      	strh	r2, [r1, #0]
  return (uint32_t)(READ_REG(TIMx->CCR1));
 8002a98:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
	data->last_state = curr_state;
 8002a9c:	7088      	strb	r0, [r1, #2]
 8002a9e:	6b52      	ldr	r2, [r2, #52]	; 0x34
	data->raw_speed =
		direction * (int32_t)LL_TIM_IC_GetCaptureCH1(config->timer);
 8002aa0:	4353      	muls	r3, r2
	data->raw_speed =
 8002aa2:	608b      	str	r3, [r1, #8]
ISR_DIRECT_DECLARE(timer_irq)
 8002aa4:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
 8002aa8:	4685      	mov	sp, r0
 8002aaa:	4770      	bx	lr
		if (data->last_state == 5U) {
 8002aac:	4b26      	ldr	r3, [pc, #152]	; (8002b48 <timer_irq+0xf8>)
 8002aae:	789b      	ldrb	r3, [r3, #2]
 8002ab0:	2b05      	cmp	r3, #5
 8002ab2:	d037      	beq.n	8002b24 <timer_irq+0xd4>
	int8_t direction = 1;
 8002ab4:	2b03      	cmp	r3, #3
 8002ab6:	bf0b      	itete	eq
 8002ab8:	f04f 33ff 	moveq.w	r3, #4294967295
 8002abc:	2301      	movne	r3, #1
 8002abe:	2278      	moveq	r2, #120	; 0x78
 8002ac0:	2200      	movne	r2, #0
 8002ac2:	e7e6      	b.n	8002a92 <timer_irq+0x42>
		if (data->last_state == 1U) {
 8002ac4:	4b20      	ldr	r3, [pc, #128]	; (8002b48 <timer_irq+0xf8>)
 8002ac6:	789b      	ldrb	r3, [r3, #2]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d02e      	beq.n	8002b2a <timer_irq+0xda>
			direction = -1;
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	bf15      	itete	ne
 8002ad0:	2301      	movne	r3, #1
 8002ad2:	f04f 33ff 	moveq.w	r3, #4294967295
 8002ad6:	2200      	movne	r2, #0
 8002ad8:	22b4      	moveq	r2, #180	; 0xb4
 8002ada:	e7da      	b.n	8002a92 <timer_irq+0x42>
		if (data->last_state == 3U) {
 8002adc:	4b1a      	ldr	r3, [pc, #104]	; (8002b48 <timer_irq+0xf8>)
 8002ade:	789b      	ldrb	r3, [r3, #2]
 8002ae0:	2b03      	cmp	r3, #3
 8002ae2:	d024      	beq.n	8002b2e <timer_irq+0xde>
			direction = -1;
 8002ae4:	2b06      	cmp	r3, #6
 8002ae6:	bf15      	itete	ne
 8002ae8:	2301      	movne	r3, #1
 8002aea:	f04f 33ff 	moveq.w	r3, #4294967295
 8002aee:	2200      	movne	r2, #0
 8002af0:	22f0      	moveq	r2, #240	; 0xf0
 8002af2:	e7ce      	b.n	8002a92 <timer_irq+0x42>
		if (data->last_state == 2U) {
 8002af4:	4b14      	ldr	r3, [pc, #80]	; (8002b48 <timer_irq+0xf8>)
 8002af6:	789b      	ldrb	r3, [r3, #2]
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d01b      	beq.n	8002b34 <timer_irq+0xe4>
			direction = -1;
 8002afc:	2b04      	cmp	r3, #4
 8002afe:	bf15      	itete	ne
 8002b00:	2301      	movne	r3, #1
 8002b02:	f04f 33ff 	moveq.w	r3, #4294967295
 8002b06:	2200      	movne	r2, #0
 8002b08:	f44f 7296 	moveq.w	r2, #300	; 0x12c
 8002b0c:	e7c1      	b.n	8002a92 <timer_irq+0x42>
		if (data->last_state == 6U) {
 8002b0e:	4b0e      	ldr	r3, [pc, #56]	; (8002b48 <timer_irq+0xf8>)
 8002b10:	789b      	ldrb	r3, [r3, #2]
 8002b12:	2b06      	cmp	r3, #6
 8002b14:	d011      	beq.n	8002b3a <timer_irq+0xea>
			direction = -1;
 8002b16:	2b05      	cmp	r3, #5
 8002b18:	bf14      	ite	ne
 8002b1a:	2301      	movne	r3, #1
 8002b1c:	f04f 33ff 	moveq.w	r3, #4294967295
 8002b20:	2200      	movs	r2, #0
 8002b22:	e7b6      	b.n	8002a92 <timer_irq+0x42>
	int8_t direction = 1;
 8002b24:	2301      	movs	r3, #1
			eangle = 60;
 8002b26:	223c      	movs	r2, #60	; 0x3c
 8002b28:	e7b3      	b.n	8002a92 <timer_irq+0x42>
			eangle = 120;
 8002b2a:	2278      	movs	r2, #120	; 0x78
 8002b2c:	e7b1      	b.n	8002a92 <timer_irq+0x42>
	int8_t direction = 1;
 8002b2e:	2301      	movs	r3, #1
			eangle = 180;
 8002b30:	22b4      	movs	r2, #180	; 0xb4
 8002b32:	e7ae      	b.n	8002a92 <timer_irq+0x42>
	int8_t direction = 1;
 8002b34:	2301      	movs	r3, #1
			eangle = 240;
 8002b36:	22f0      	movs	r2, #240	; 0xf0
 8002b38:	e7ab      	b.n	8002a92 <timer_irq+0x42>
	int8_t direction = 1;
 8002b3a:	2301      	movs	r3, #1
			eangle = 300;
 8002b3c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002b40:	e7a7      	b.n	8002a92 <timer_irq+0x42>
 8002b42:	bf00      	nop
 8002b44:	08005344 	.word	0x08005344
 8002b48:	200002fc 	.word	0x200002fc

08002b4c <halls_stm32_init>:
/*******************************************************************************
 * Init
 ******************************************************************************/

static int halls_stm32_init(const struct device *dev)
{
 8002b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct halls_stm32_config *config = dev->config;
 8002b4e:	6844      	ldr	r4, [r0, #4]
	struct halls_stm32_data *data = dev->data;
 8002b50:	6905      	ldr	r5, [r0, #16]
{
 8002b52:	b08f      	sub	sp, #60	; 0x3c
 8002b54:	4606      	mov	r6, r0
	ret = pinctrl_lookup_state(config, id, &state);
 8002b56:	aa05      	add	r2, sp, #20
 8002b58:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002b5a:	2100      	movs	r1, #0
 8002b5c:	f001 fcf7 	bl	800454e <pinctrl_lookup_state>
	if (ret < 0) {
 8002b60:	2800      	cmp	r0, #0
 8002b62:	db19      	blt.n	8002b98 <halls_stm32_init+0x4c>
	return pinctrl_apply_state_direct(config, state);
 8002b64:	9b05      	ldr	r3, [sp, #20]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 8002b66:	2200      	movs	r2, #0
 8002b68:	7919      	ldrb	r1, [r3, #4]
 8002b6a:	6818      	ldr	r0, [r3, #0]
 8002b6c:	f7ff fda2 	bl	80026b4 <pinctrl_configure_pins>
	LL_TIM_ENCODER_InitTypeDef enc_init;
	uint8_t curr_state;

	/* configure pinmux */
	ret = pinctrl_apply_state(config->pcfg, PINCTRL_STATE_DEFAULT);
	if (ret < 0) {
 8002b70:	2800      	cmp	r0, #0
 8002b72:	db11      	blt.n	8002b98 <halls_stm32_init+0x4c>
 8002b74:	483f      	ldr	r0, [pc, #252]	; (8002c74 <halls_stm32_init+0x128>)
 8002b76:	6883      	ldr	r3, [r0, #8]
	}

	/* enable timer clock */
	clk = DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE);

	ret = clock_control_on(clk, (clock_control_subsys_t *)&config->pclken);
 8002b78:	1d27      	adds	r7, r4, #4
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4639      	mov	r1, r7
 8002b7e:	4798      	blx	r3
	if (ret < 0) {
 8002b80:	2800      	cmp	r0, #0
 8002b82:	db09      	blt.n	8002b98 <halls_stm32_init+0x4c>
		LOG_ERR("Could not turn on timer clock (%d)", ret);
		return ret;
	}

	/* initialize timer */
	LL_TIM_StructInit(&init);
 8002b84:	4668      	mov	r0, sp
 8002b86:	f001 ff51 	bl	8004a2c <LL_TIM_StructInit>
	if (LL_TIM_Init(config->timer, &init) != SUCCESS) {
 8002b8a:	6820      	ldr	r0, [r4, #0]
 8002b8c:	4669      	mov	r1, sp
 8002b8e:	f000 fbf7 	bl	8003380 <LL_TIM_Init>
 8002b92:	b118      	cbz	r0, 8002b9c <halls_stm32_init+0x50>
		LOG_ERR("Could not initialize timer");
		return -EIO;
 8002b94:	f06f 0004 	mvn.w	r0, #4
			   DT_IRQ_BY_NAME(DT_INST_PARENT(0), global, priority),
			   timer_irq, 0);
	irq_enable(config->irq);

	return 0;
}
 8002b98:	b00f      	add	sp, #60	; 0x3c
 8002b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	LL_TIM_SetClockSource(config->timer, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002b9c:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8002b9e:	6893      	ldr	r3, [r2, #8]
 8002ba0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ba4:	f023 0307 	bic.w	r3, r3, #7
 8002ba8:	6093      	str	r3, [r2, #8]
	LL_TIM_IC_EnableXORCombination(config->timer);
 8002baa:	6822      	ldr	r2, [r4, #0]
  SET_BIT(TIMx->CR2, TIM_CR2_TI1S);
 8002bac:	6853      	ldr	r3, [r2, #4]
 8002bae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bb2:	6053      	str	r3, [r2, #4]
	LL_TIM_SetTriggerInput(config->timer, LL_TIM_TS_TI1F_ED);
 8002bb4:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_TS, TriggerInput);
 8002bb6:	6893      	ldr	r3, [r2, #8]
 8002bb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bc0:	6093      	str	r3, [r2, #8]
	LL_TIM_ENCODER_StructInit(&enc_init);
 8002bc2:	a805      	add	r0, sp, #20
 8002bc4:	f001 ff45 	bl	8004a52 <LL_TIM_ENCODER_StructInit>
	enc_init.IC1ActiveInput = LL_TIM_ACTIVEINPUT_TRC;
 8002bc8:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002bcc:	9307      	str	r3, [sp, #28]
	if (LL_TIM_ENCODER_Init(config->timer, &enc_init) != SUCCESS) {
 8002bce:	6820      	ldr	r0, [r4, #0]
 8002bd0:	a905      	add	r1, sp, #20
 8002bd2:	f001 ff4c 	bl	8004a6e <LL_TIM_ENCODER_Init>
 8002bd6:	2800      	cmp	r0, #0
 8002bd8:	d1dc      	bne.n	8002b94 <halls_stm32_init+0x48>
	LL_TIM_SetUpdateSource(config->timer, LL_TIM_UPDATESOURCE_COUNTER);
 8002bda:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(TIMx->CR1, TIM_CR1_URS, UpdateSource);
 8002bdc:	6813      	ldr	r3, [r2, #0]
 8002bde:	f043 0304 	orr.w	r3, r3, #4
 8002be2:	6013      	str	r3, [r2, #0]
	LL_TIM_CC_EnableChannel(config->timer, LL_TIM_CHANNEL_CH1);
 8002be4:	6822      	ldr	r2, [r4, #0]
  SET_BIT(TIMx->CCER, Channels);
 8002be6:	6a13      	ldr	r3, [r2, #32]
 8002be8:	f043 0301 	orr.w	r3, r3, #1
 8002bec:	6213      	str	r3, [r2, #32]
	LL_TIM_EnableIT_CC1(config->timer);
 8002bee:	6822      	ldr	r2, [r4, #0]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_CC1(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8002bf0:	68d3      	ldr	r3, [r2, #12]
 8002bf2:	f043 0302 	orr.w	r3, r3, #2
 8002bf6:	60d3      	str	r3, [r2, #12]
	ret = stm32_tim_clk_get(&config->pclken, &data->tfreq);
 8002bf8:	1d29      	adds	r1, r5, #4
 8002bfa:	4638      	mov	r0, r7
 8002bfc:	f000 faa8 	bl	8003150 <stm32_tim_clk_get>
	if (ret < 0) {
 8002c00:	2800      	cmp	r0, #0
 8002c02:	dbc9      	blt.n	8002b98 <halls_stm32_init+0x4c>
	if (!device_is_ready(config->h1.port) ||
 8002c04:	68e0      	ldr	r0, [r4, #12]
 8002c06:	f001 ff83 	bl	8004b10 <z_device_is_ready>
 8002c0a:	b910      	cbnz	r0, 8002c12 <halls_stm32_init+0xc6>
		return -ENODEV;
 8002c0c:	f06f 0012 	mvn.w	r0, #18
 8002c10:	e7c2      	b.n	8002b98 <halls_stm32_init+0x4c>
	    !device_is_ready(config->h2.port) ||
 8002c12:	6960      	ldr	r0, [r4, #20]
 8002c14:	f001 ff7c 	bl	8004b10 <z_device_is_ready>
	if (!device_is_ready(config->h1.port) ||
 8002c18:	2800      	cmp	r0, #0
 8002c1a:	d0f7      	beq.n	8002c0c <halls_stm32_init+0xc0>
	    !device_is_ready(config->h3.port)) {
 8002c1c:	69e0      	ldr	r0, [r4, #28]
 8002c1e:	f001 ff77 	bl	8004b10 <z_device_is_ready>
	    !device_is_ready(config->h2.port) ||
 8002c22:	2800      	cmp	r0, #0
 8002c24:	d0f2      	beq.n	8002c0c <halls_stm32_init+0xc0>
	curr_state = halls_stm32_get_state(dev);
 8002c26:	6870      	ldr	r0, [r6, #4]
 8002c28:	f001 fd88 	bl	800473c <halls_stm32_get_state.isra.0>
	switch (curr_state) {
 8002c2c:	1e43      	subs	r3, r0, #1
 8002c2e:	2b05      	cmp	r3, #5
 8002c30:	d806      	bhi.n	8002c40 <halls_stm32_init+0xf4>
 8002c32:	e8df f003 	tbb	[pc, r3]
 8002c36:	1814      	.short	0x1814
 8002c38:	1a031c16 	.word	0x1a031c16
		data->eangle = 0U;
 8002c3c:	2300      	movs	r3, #0
		data->eangle = 300U;
 8002c3e:	802b      	strh	r3, [r5, #0]
	data->eangle += config->phase_shift;
 8002c40:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002c42:	882a      	ldrh	r2, [r5, #0]
	data->last_state = curr_state;
 8002c44:	70a8      	strb	r0, [r5, #2]
	data->eangle += config->phase_shift;
 8002c46:	4413      	add	r3, r2
	IRQ_DIRECT_CONNECT(DT_IRQ_BY_NAME(DT_INST_PARENT(0), global, irq),
 8002c48:	2200      	movs	r2, #0
	data->eangle += config->phase_shift;
 8002c4a:	802b      	strh	r3, [r5, #0]
	IRQ_DIRECT_CONNECT(DT_IRQ_BY_NAME(DT_INST_PARENT(0), global, irq),
 8002c4c:	4611      	mov	r1, r2
 8002c4e:	201c      	movs	r0, #28
 8002c50:	f7ff f880 	bl	8001d54 <z_arm_irq_priority_set>
	irq_enable(config->irq);
 8002c54:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002c56:	f7ff f86f 	bl	8001d38 <arch_irq_enable>
	return 0;
 8002c5a:	2000      	movs	r0, #0
 8002c5c:	e79c      	b.n	8002b98 <halls_stm32_init+0x4c>
		data->eangle = 60U;
 8002c5e:	233c      	movs	r3, #60	; 0x3c
 8002c60:	e7ed      	b.n	8002c3e <halls_stm32_init+0xf2>
		data->eangle = 120U;
 8002c62:	2378      	movs	r3, #120	; 0x78
 8002c64:	e7eb      	b.n	8002c3e <halls_stm32_init+0xf2>
		data->eangle = 180U;
 8002c66:	23b4      	movs	r3, #180	; 0xb4
 8002c68:	e7e9      	b.n	8002c3e <halls_stm32_init+0xf2>
		data->eangle = 240U;
 8002c6a:	23f0      	movs	r3, #240	; 0xf0
 8002c6c:	e7e7      	b.n	8002c3e <halls_stm32_init+0xf2>
		data->eangle = 300U;
 8002c6e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002c72:	e7e4      	b.n	8002c3e <halls_stm32_init+0xf2>
 8002c74:	08004d44 	.word	0x08004d44

08002c78 <svpwm_stm32_init>:
/*******************************************************************************
 * Initialization
 ******************************************************************************/

static int svpwm_stm32_init(const struct device *dev)
{
 8002c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct svpwm_stm32_config *config = dev->config;
 8002c7c:	6844      	ldr	r4, [r0, #4]
	struct svpwm_stm32_data *data = dev->data;
 8002c7e:	6905      	ldr	r5, [r0, #16]
	const struct device *clk;
	LL_TIM_InitTypeDef tim_init;
	LL_TIM_OC_InitTypeDef tim_ocinit;
	LL_TIM_BDTR_InitTypeDef brk_dt_init;

	if (!device_is_ready(config->currsmp)) {
 8002c80:	69a0      	ldr	r0, [r4, #24]
{
 8002c82:	b094      	sub	sp, #80	; 0x50
 8002c84:	f001 ff44 	bl	8004b10 <z_device_is_ready>
	if (!device_is_ready(config->currsmp)) {
 8002c88:	b920      	cbnz	r0, 8002c94 <svpwm_stm32_init+0x1c>
		LOG_ERR("Current sampling device not ready");
		return -ENODEV;
 8002c8a:	f06f 0012 	mvn.w	r0, #18
			return ret;
		}
	}

	return 0;
}
 8002c8e:	b014      	add	sp, #80	; 0x50
 8002c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ret = pinctrl_lookup_state(config, id, &state);
 8002c94:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002c96:	aa0c      	add	r2, sp, #48	; 0x30
 8002c98:	2100      	movs	r1, #0
 8002c9a:	f001 fc58 	bl	800454e <pinctrl_lookup_state>
	if (ret < 0) {
 8002c9e:	2800      	cmp	r0, #0
 8002ca0:	dbf5      	blt.n	8002c8e <svpwm_stm32_init+0x16>
	return pinctrl_apply_state_direct(config, state);
 8002ca2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	7919      	ldrb	r1, [r3, #4]
 8002ca8:	6818      	ldr	r0, [r3, #0]
 8002caa:	f7ff fd03 	bl	80026b4 <pinctrl_configure_pins>
	if (ret < 0) {
 8002cae:	2800      	cmp	r0, #0
 8002cb0:	dbed      	blt.n	8002c8e <svpwm_stm32_init+0x16>
 8002cb2:	4869      	ldr	r0, [pc, #420]	; (8002e58 <svpwm_stm32_init+0x1e0>)
 8002cb4:	6883      	ldr	r3, [r0, #8]
	ret = clock_control_on(clk, (clock_control_subsys_t *)&config->pclken);
 8002cb6:	1d26      	adds	r6, r4, #4
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4631      	mov	r1, r6
 8002cbc:	4798      	blx	r3
	if (ret < 0) {
 8002cbe:	2800      	cmp	r0, #0
 8002cc0:	dbe5      	blt.n	8002c8e <svpwm_stm32_init+0x16>
	ret = stm32_tim_clk_get(&config->pclken, &freq);
 8002cc2:	4669      	mov	r1, sp
 8002cc4:	4630      	mov	r0, r6
 8002cc6:	f000 fa43 	bl	8003150 <stm32_tim_clk_get>
	if (ret < 0) {
 8002cca:	2800      	cmp	r0, #0
 8002ccc:	dbdf      	blt.n	8002c8e <svpwm_stm32_init+0x16>
 8002cce:	2100      	movs	r1, #0
		data->period = __LL_TIM_CALC_ARR(
 8002cd0:	f64e 265f 	movw	r6, #59999	; 0xea5f
 8002cd4:	f64e 2060 	movw	r0, #60000	; 0xea60
 8002cd8:	b28a      	uxth	r2, r1
 8002cda:	9b00      	ldr	r3, [sp, #0]
 8002cdc:	3201      	adds	r2, #1
 8002cde:	fbb3 f7f2 	udiv	r7, r3, r2
 8002ce2:	42b7      	cmp	r7, r6
 8002ce4:	d812      	bhi.n	8002d0c <svpwm_stm32_init+0x94>
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	602b      	str	r3, [r5, #0]
	LL_TIM_StructInit(&tim_init);
 8002cea:	a801      	add	r0, sp, #4
 8002cec:	f001 fe9e 	bl	8004a2c <LL_TIM_StructInit>
	tim_init.CounterMode = LL_TIM_COUNTERMODE_CENTER_UP;
 8002cf0:	2340      	movs	r3, #64	; 0x40
 8002cf2:	9302      	str	r3, [sp, #8]
	tim_init.Autoreload = data->period;
 8002cf4:	682b      	ldr	r3, [r5, #0]
 8002cf6:	9303      	str	r3, [sp, #12]
	tim_init.RepetitionCounter = 1U;
 8002cf8:	2601      	movs	r6, #1
 8002cfa:	9605      	str	r6, [sp, #20]
	if (LL_TIM_Init(config->timer, &tim_init) != SUCCESS) {
 8002cfc:	6820      	ldr	r0, [r4, #0]
 8002cfe:	a901      	add	r1, sp, #4
 8002d00:	f000 fb3e 	bl	8003380 <LL_TIM_Init>
 8002d04:	b168      	cbz	r0, 8002d22 <svpwm_stm32_init+0xaa>
		return -EIO;
 8002d06:	f06f 0004 	mvn.w	r0, #4
 8002d0a:	e7c0      	b.n	8002c8e <svpwm_stm32_init+0x16>
		data->period = __LL_TIM_CALC_ARR(
 8002d0c:	4342      	muls	r2, r0
 8002d0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d12:	3b01      	subs	r3, #1
	} while (data->period > UINT16_MAX);
 8002d14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
		data->period = __LL_TIM_CALC_ARR(
 8002d18:	602b      	str	r3, [r5, #0]
	} while (data->period > UINT16_MAX);
 8002d1a:	f101 0101 	add.w	r1, r1, #1
 8002d1e:	d2db      	bcs.n	8002cd8 <svpwm_stm32_init+0x60>
 8002d20:	e7e3      	b.n	8002cea <svpwm_stm32_init+0x72>
	LL_TIM_OC_StructInit(&tim_ocinit);
 8002d22:	a80c      	add	r0, sp, #48	; 0x30
 8002d24:	f001 fe8b 	bl	8004a3e <LL_TIM_OC_StructInit>
	tim_ocinit.OCMode = LL_TIM_OCMODE_PWM1;
 8002d28:	2360      	movs	r3, #96	; 0x60
 8002d2a:	930c      	str	r3, [sp, #48]	; 0x30
	tim_ocinit.CompareValue = data->period / 2U;
 8002d2c:	682b      	ldr	r3, [r5, #0]
 8002d2e:	085b      	lsrs	r3, r3, #1
 8002d30:	930f      	str	r3, [sp, #60]	; 0x3c
	if (LL_TIM_OC_Init(config->timer, LL_TIM_CHANNEL_CH1, &tim_ocinit) !=
 8002d32:	6820      	ldr	r0, [r4, #0]
 8002d34:	aa0c      	add	r2, sp, #48	; 0x30
 8002d36:	4631      	mov	r1, r6
 8002d38:	f000 fb64 	bl	8003404 <LL_TIM_OC_Init>
 8002d3c:	2800      	cmp	r0, #0
 8002d3e:	d1e2      	bne.n	8002d06 <svpwm_stm32_init+0x8e>
	if (LL_TIM_OC_Init(config->timer, LL_TIM_CHANNEL_CH2, &tim_ocinit) !=
 8002d40:	6820      	ldr	r0, [r4, #0]
 8002d42:	aa0c      	add	r2, sp, #48	; 0x30
 8002d44:	2110      	movs	r1, #16
 8002d46:	f000 fb5d 	bl	8003404 <LL_TIM_OC_Init>
 8002d4a:	2800      	cmp	r0, #0
 8002d4c:	d1db      	bne.n	8002d06 <svpwm_stm32_init+0x8e>
	if (LL_TIM_OC_Init(config->timer, LL_TIM_CHANNEL_CH3, &tim_ocinit) !=
 8002d4e:	6820      	ldr	r0, [r4, #0]
 8002d50:	aa0c      	add	r2, sp, #48	; 0x30
 8002d52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d56:	f000 fb55 	bl	8003404 <LL_TIM_OC_Init>
 8002d5a:	2800      	cmp	r0, #0
 8002d5c:	d1d3      	bne.n	8002d06 <svpwm_stm32_init+0x8e>
	tim_ocinit.OCMode = LL_TIM_OCMODE_PWM2;
 8002d5e:	2370      	movs	r3, #112	; 0x70
 8002d60:	930c      	str	r3, [sp, #48]	; 0x30
	tim_ocinit.CompareValue = data->period - 1U;
 8002d62:	682b      	ldr	r3, [r5, #0]
 8002d64:	3b01      	subs	r3, #1
 8002d66:	930f      	str	r3, [sp, #60]	; 0x3c
	if (LL_TIM_OC_Init(config->timer, LL_TIM_CHANNEL_CH4, &tim_ocinit) !=
 8002d68:	6820      	ldr	r0, [r4, #0]
 8002d6a:	aa0c      	add	r2, sp, #48	; 0x30
 8002d6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d70:	f000 fb48 	bl	8003404 <LL_TIM_OC_Init>
 8002d74:	4607      	mov	r7, r0
 8002d76:	2800      	cmp	r0, #0
 8002d78:	d1c5      	bne.n	8002d06 <svpwm_stm32_init+0x8e>
	LL_TIM_SetTriggerOutput(config->timer, LL_TIM_TRGO_OC4REF);
 8002d7a:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002d7c:	6853      	ldr	r3, [r2, #4]
 8002d7e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002d82:	6053      	str	r3, [r2, #4]
	LL_TIM_OC_EnablePreload(config->timer, LL_TIM_CHANNEL_CH1);
 8002d84:	6822      	ldr	r2, [r4, #0]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8002d86:	6993      	ldr	r3, [r2, #24]
 8002d88:	f043 0308 	orr.w	r3, r3, #8
 8002d8c:	6193      	str	r3, [r2, #24]
	LL_TIM_OC_EnablePreload(config->timer, LL_TIM_CHANNEL_CH2);
 8002d8e:	6822      	ldr	r2, [r4, #0]
 8002d90:	6993      	ldr	r3, [r2, #24]
 8002d92:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d96:	6193      	str	r3, [r2, #24]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002d98:	6822      	ldr	r2, [r4, #0]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8002d9a:	69d3      	ldr	r3, [r2, #28]
 8002d9c:	f043 0308 	orr.w	r3, r3, #8
 8002da0:	61d3      	str	r3, [r2, #28]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002da2:	6822      	ldr	r2, [r4, #0]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8002da4:	69d3      	ldr	r3, [r2, #28]
 8002da6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002daa:	61d3      	str	r3, [r2, #28]
	LL_TIM_OC_SetCompareCH4(config->timer, data->period - 1U);
 8002dac:	682b      	ldr	r3, [r5, #0]
 8002dae:	6822      	ldr	r2, [r4, #0]
 8002db0:	3b01      	subs	r3, #1
  WRITE_REG(TIMx->CCR4, CompareValue);
 8002db2:	6413      	str	r3, [r2, #64]	; 0x40
	LL_TIM_BDTR_StructInit(&brk_dt_init);
 8002db4:	a806      	add	r0, sp, #24
 8002db6:	f001 fe87 	bl	8004ac8 <LL_TIM_BDTR_StructInit>
	brk_dt_init.OSSIState = LL_TIM_OSSI_ENABLE;
 8002dba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002dbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002dc2:	e9cd 1306 	strd	r1, r3, [sp, #24]
	brk_dt_init.LockLevel = LL_TIM_LOCKLEVEL_1;
 8002dc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002dca:	9308      	str	r3, [sp, #32]
	brk_dt_init.BreakState = LL_TIM_BREAK_ENABLE;
 8002dcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dd0:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
	brk_dt_init.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8002dd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	brk_dt_init.DeadTime = 0U;
 8002dd8:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
	brk_dt_init.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8002ddc:	930a      	str	r3, [sp, #40]	; 0x28
	if (LL_TIM_BDTR_Init(config->timer, &brk_dt_init) != SUCCESS) {
 8002dde:	6820      	ldr	r0, [r4, #0]
 8002de0:	a906      	add	r1, sp, #24
 8002de2:	f001 fe7a 	bl	8004ada <LL_TIM_BDTR_Init>
 8002de6:	4605      	mov	r5, r0
 8002de8:	2800      	cmp	r0, #0
 8002dea:	d18c      	bne.n	8002d06 <svpwm_stm32_init+0x8e>
	for (size_t i = 0U; i < config->enable_len; i++) {
 8002dec:	6a23      	ldr	r3, [r4, #32]
 8002dee:	429d      	cmp	r5, r3
 8002df0:	d301      	bcc.n	8002df6 <svpwm_stm32_init+0x17e>
	return 0;
 8002df2:	2000      	movs	r0, #0
 8002df4:	e74b      	b.n	8002c8e <svpwm_stm32_init+0x16>
		const struct gpio_dt_spec *enable_gpio = &config->enable[i];
 8002df6:	69e7      	ldr	r7, [r4, #28]
		if (!device_is_ready(enable_gpio->port)) {
 8002df8:	f857 0035 	ldr.w	r0, [r7, r5, lsl #3]
		const struct gpio_dt_spec *enable_gpio = &config->enable[i];
 8002dfc:	eb07 08c5 	add.w	r8, r7, r5, lsl #3
 8002e00:	f001 fe86 	bl	8004b10 <z_device_is_ready>
		if (!device_is_ready(enable_gpio->port)) {
 8002e04:	2800      	cmp	r0, #0
 8002e06:	f43f af40 	beq.w	8002c8a <svpwm_stm32_init+0x12>
 * @return a value from gpio_pin_configure()
 */
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
					gpio_flags_t extra_flags)
{
	return gpio_pin_configure(spec->port,
 8002e0a:	f857 0035 	ldr.w	r0, [r7, r5, lsl #3]
				  spec->pin,
 8002e0e:	f898 1004 	ldrb.w	r1, [r8, #4]
				  spec->dt_flags | extra_flags);
 8002e12:	f8b8 3006 	ldrh.w	r3, [r8, #6]
	struct gpio_driver_data *data =
 8002e16:	f8d0 c010 	ldr.w	ip, [r0, #16]
	const struct gpio_driver_api *api =
 8002e1a:	f8d0 8008 	ldr.w	r8, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8002e1e:	f8dc 7000 	ldr.w	r7, [ip]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 8002e22:	07da      	lsls	r2, r3, #31
	return gpio_pin_configure(spec->port,
 8002e24:	bf54      	ite	pl
 8002e26:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 8002e2a:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 8002e2e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8002e32:	fa06 fe01 	lsl.w	lr, r6, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 8002e36:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8002e38:	bf4c      	ite	mi
 8002e3a:	ea4e 0707 	orrmi.w	r7, lr, r7
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 8002e3e:	ea27 070e 	bicpl.w	r7, r7, lr
 8002e42:	f8cc 7000 	str.w	r7, [ip]
	return api->pin_configure(port, pin, flags);
 8002e46:	f8d8 3000 	ldr.w	r3, [r8]
 8002e4a:	4798      	blx	r3
		if (ret < 0) {
 8002e4c:	2800      	cmp	r0, #0
 8002e4e:	f6ff af1e 	blt.w	8002c8e <svpwm_stm32_init+0x16>
	for (size_t i = 0U; i < config->enable_len; i++) {
 8002e52:	3501      	adds	r5, #1
 8002e54:	e7ca      	b.n	8002dec <svpwm_stm32_init+0x174>
 8002e56:	bf00      	nop
 8002e58:	08004d44 	.word	0x08004d44

08002e5c <regulate>:
 * This function is called after current sampling is completed.
 *
 * @warning It is called from the highest priority IRQ.
 */
static void regulate(void *ctx)
{
 8002e5c:	b510      	push	{r4, lr}
	float v_q, v_d;
	float v_alpha, v_beta;

	ARG_UNUSED(ctx);

	currsmp_get_currents(cloop.currsmp, &curr);
 8002e5e:	4c38      	ldr	r4, [pc, #224]	; (8002f40 <regulate+0xe4>)
 8002e60:	6820      	ldr	r0, [r4, #0]
static inline void currsmp_get_currents(const struct device *dev,
					struct currsmp_curr *curr)
{
	const struct currsmp_driver_api *api = dev->api;

	api->get_currents(dev, curr);
 8002e62:	6883      	ldr	r3, [r0, #8]
{
 8002e64:	b086      	sub	sp, #24
 8002e66:	a903      	add	r1, sp, #12
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	4798      	blx	r3
	eangle = feedback_get_eangle(cloop.feedback);
 8002e6c:	6860      	ldr	r0, [r4, #4]
 */
static inline float feedback_get_eangle(const struct device *dev)
{
	const struct feedback_driver_api *api = dev->api;

	return api->get_eangle(dev);
 8002e6e:	6883      	ldr	r3, [r0, #8]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4798      	blx	r3
	arm_sin_cos_f32(eangle, &sin_eangle, &cos_eangle);
 8002e74:	a902      	add	r1, sp, #8
 8002e76:	a801      	add	r0, sp, #4
 8002e78:	f000 f998 	bl	80031ac <arm_sin_cos_f32>

	/* i_a, i_b -> i_alpha, i_beta */
	arm_clarke_f32(curr.i_a, curr.i_b, &i_alpha, &i_beta);
 8002e7c:	eddd 5a03 	vldr	s11, [sp, #12]
  {
    /* Calculate pIalpha using the equation, pIalpha = Ia */
    *pIalpha = Ia;

    /* Calculate pIbeta using the equation, pIbeta = (1/sqrt(3)) * Ia + (2/sqrt(3)) * Ib */
    *pIbeta = (0.57735026919f * Ia + 1.15470053838f * Ib);
 8002e80:	eddf 7a30 	vldr	s15, [pc, #192]	; 8002f44 <regulate+0xe8>
 8002e84:	eddd 6a04 	vldr	s13, [sp, #16]
 8002e88:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002f48 <regulate+0xec>
	/* i_alpha, i_beta -> i_q, i_d */
	arm_park_f32(i_alpha, i_beta, &i_d, &i_q, sin_eangle, cos_eangle);

	/* PI (i_q, i_d -> v_q, v_d) */
	v_q = arm_pid_f32(&cloop.pid_i_q, cloop.i_q_ref - i_q);
 8002e8c:	ed94 6a15 	vldr	s12, [r4, #84]	; 0x54
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002e90:	ed94 0a04 	vldr	s0, [r4, #16]
    out = (S->A0 * in) +
 8002e94:	edd4 4a03 	vldr	s9, [r4, #12]
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002e98:	ed94 4a05 	vldr	s8, [r4, #20]
	v_d = arm_pid_f32(&cloop.pid_i_d, cloop.i_d_ref - i_d);

	/* v_q, v_d -> v_alpha, v_beta */
	arm_inv_park_f32(v_d, v_q, &v_alpha, &v_beta, sin_eangle, cos_eangle);
	svpwm_set_phase_voltages(cloop.svpwm, v_alpha, v_beta);
 8002e9c:	68a0      	ldr	r0, [r4, #8]
    *pIbeta = (0.57735026919f * Ia + 1.15470053838f * Ib);
 8002e9e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002ea2:	ee46 7a87 	vmla.f32	s15, s13, s14
	arm_park_f32(i_alpha, i_beta, &i_d, &i_q, sin_eangle, cos_eangle);
 8002ea6:	ed9d 7a02 	vldr	s14, [sp, #8]
 8002eaa:	eddd 6a01 	vldr	s13, [sp, #4]
    *pIq = -Ialpha * sinVal + Ibeta * cosVal;
 8002eae:	ee27 5a27 	vmul.f32	s10, s14, s15
 8002eb2:	ee05 5ae6 	vmls.f32	s10, s11, s13
    *pId = Ialpha * cosVal + Ibeta * sinVal;
 8002eb6:	ee66 7aa7 	vmul.f32	s15, s13, s15
	v_q = arm_pid_f32(&cloop.pid_i_q, cloop.i_q_ref - i_q);
 8002eba:	ee36 6a45 	vsub.f32	s12, s12, s10
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002ebe:	ed94 5a06 	vldr	s10, [r4, #24]
    S->state[0] = in;
 8002ec2:	ed84 6a06 	vstr	s12, [r4, #24]
    *pId = Ialpha * cosVal + Ibeta * sinVal;
 8002ec6:	ee45 7a87 	vmla.f32	s15, s11, s14
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002eca:	ee25 0a00 	vmul.f32	s0, s10, s0
    out = (S->A0 * in) +
 8002ece:	ee06 0a24 	vmla.f32	s0, s12, s9
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002ed2:	edd4 4a07 	vldr	s9, [r4, #28]
	v_d = arm_pid_f32(&cloop.pid_i_d, cloop.i_d_ref - i_d);
 8002ed6:	ed94 6a16 	vldr	s12, [r4, #88]	; 0x58
 8002eda:	edd4 5a0f 	vldr	s11, [r4, #60]	; 0x3c
    S->state[1] = S->state[0];
 8002ede:	ed84 5a07 	vstr	s10, [r4, #28]
 8002ee2:	ee36 6a67 	vsub.f32	s12, s12, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002ee6:	ee04 0a24 	vmla.f32	s0, s8, s9
 8002eea:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
    out = (S->A0 * in) +
 8002eee:	ed94 5a0c 	vldr	s10, [r4, #48]	; 0x30
 8002ef2:	edd4 4a08 	vldr	s9, [r4, #32]
    S->state[0] = in;
 8002ef6:	ed84 6a0f 	vstr	s12, [r4, #60]	; 0x3c
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002efa:	ee65 7aa7 	vmul.f32	s15, s11, s15
    out = (S->A0 * in) +
 8002efe:	ee46 7a05 	vmla.f32	s15, s12, s10
 8002f02:	ee30 0a24 	vadd.f32	s0, s0, s9
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002f06:	ed94 5a10 	vldr	s10, [r4, #64]	; 0x40
 8002f0a:	edd4 4a0e 	vldr	s9, [r4, #56]	; 0x38
    S->state[2] = out;
 8002f0e:	ed84 0a08 	vstr	s0, [r4, #32]
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002f12:	ee44 7a85 	vmla.f32	s15, s9, s10
    out = (S->A0 * in) +
 8002f16:	ed94 5a11 	vldr	s10, [r4, #68]	; 0x44
    S->state[1] = S->state[0];
 8002f1a:	edc4 5a10 	vstr	s11, [r4, #64]	; 0x40
    out = (S->A0 * in) +
 8002f1e:	ee77 7a85 	vadd.f32	s15, s15, s10
    *pIbeta = Id * sinVal + Iq * cosVal;
 8002f22:	ee67 0a00 	vmul.f32	s1, s14, s0
    S->state[2] = out;
 8002f26:	edc4 7a11 	vstr	s15, [r4, #68]	; 0x44
static inline void svpwm_set_phase_voltages(const struct device *dev,
					    float v_alpha, float v_beta)
{
	const struct svpwm_driver_api *api = dev->api;

	api->set_phase_voltages(dev, v_alpha, v_beta);
 8002f2a:	6883      	ldr	r3, [r0, #8]
    *pIalpha = Id * cosVal - Iq * sinVal;
 8002f2c:	ee26 0a80 	vmul.f32	s0, s13, s0
 8002f30:	ee46 0aa7 	vmla.f32	s1, s13, s15
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	ee17 0a27 	vnmls.f32	s0, s14, s15
 8002f3a:	4798      	blx	r3
}
 8002f3c:	b006      	add	sp, #24
 8002f3e:	bd10      	pop	{r4, pc}
 8002f40:	20000324 	.word	0x20000324
 8002f44:	3f13cd3a 	.word	0x3f13cd3a
 8002f48:	3f93cd3a 	.word	0x3f93cd3a

08002f4c <cloop_init>:

static int cloop_init(const struct device *dev)
{
 8002f4c:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(dev);

	cloop.currsmp = DEVICE_DT_GET(DT_NODELABEL(currsmp));
 8002f4e:	4c12      	ldr	r4, [pc, #72]	; (8002f98 <cloop_init+0x4c>)
 8002f50:	4b12      	ldr	r3, [pc, #72]	; (8002f9c <cloop_init+0x50>)
 8002f52:	6023      	str	r3, [r4, #0]
	cloop.svpwm = DEVICE_DT_GET(DT_NODELABEL(svpwm));
 8002f54:	4b12      	ldr	r3, [pc, #72]	; (8002fa0 <cloop_init+0x54>)
 8002f56:	60a3      	str	r3, [r4, #8]
	cloop.feedback = DEVICE_DT_GET(DT_NODELABEL(feedback));

	cloop.i_q_ref = 0.0f;
 8002f58:	2500      	movs	r5, #0
	cloop.feedback = DEVICE_DT_GET(DT_NODELABEL(feedback));
 8002f5a:	4b12      	ldr	r3, [pc, #72]	; (8002fa4 <cloop_init+0x58>)
 8002f5c:	6063      	str	r3, [r4, #4]
	cloop.i_d_ref = 0.0f;

	cloop.pid_i_q.Kp = CONFIG_SPINNER_CLOOP_T_KP / 1000.0f;
 8002f5e:	f04f 567f 	mov.w	r6, #1069547520	; 0x3fc00000
	cloop.pid_i_q.Ki = CONFIG_SPINNER_CLOOP_T_KI / 1000.0f;
	cloop.pid_i_q.Kd = 0.0f;
	arm_pid_init_f32(&cloop.pid_i_q, 1);
 8002f62:	f104 000c 	add.w	r0, r4, #12
 8002f66:	2101      	movs	r1, #1
	cloop.i_q_ref = 0.0f;
 8002f68:	6565      	str	r5, [r4, #84]	; 0x54
	cloop.i_d_ref = 0.0f;
 8002f6a:	65a5      	str	r5, [r4, #88]	; 0x58
	cloop.pid_i_q.Kp = CONFIG_SPINNER_CLOOP_T_KP / 1000.0f;
 8002f6c:	6266      	str	r6, [r4, #36]	; 0x24
	cloop.pid_i_q.Ki = CONFIG_SPINNER_CLOOP_T_KI / 1000.0f;
 8002f6e:	62a5      	str	r5, [r4, #40]	; 0x28
	cloop.pid_i_q.Kd = 0.0f;
 8002f70:	62e5      	str	r5, [r4, #44]	; 0x2c
	arm_pid_init_f32(&cloop.pid_i_q, 1);
 8002f72:	f001 fcec 	bl	800494e <arm_pid_init_f32>

	cloop.pid_i_d.Kp = CONFIG_SPINNER_CLOOP_F_KP / 1000.0f;
	cloop.pid_i_d.Ki = CONFIG_SPINNER_CLOOP_F_KI / 1000.0f;
	cloop.pid_i_d.Kd = 0.0f;
	arm_pid_init_f32(&cloop.pid_i_d, 1);
 8002f76:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8002f7a:	2101      	movs	r1, #1
	cloop.pid_i_d.Kp = CONFIG_SPINNER_CLOOP_F_KP / 1000.0f;
 8002f7c:	64a6      	str	r6, [r4, #72]	; 0x48
	cloop.pid_i_d.Ki = CONFIG_SPINNER_CLOOP_F_KI / 1000.0f;
 8002f7e:	64e5      	str	r5, [r4, #76]	; 0x4c
	cloop.pid_i_d.Kd = 0.0f;
 8002f80:	6525      	str	r5, [r4, #80]	; 0x50
	arm_pid_init_f32(&cloop.pid_i_d, 1);
 8002f82:	f001 fce4 	bl	800494e <arm_pid_init_f32>

	currsmp_configure(cloop.currsmp, regulate, NULL);
 8002f86:	6820      	ldr	r0, [r4, #0]
	api->configure(dev, regulation_cb, ctx);
 8002f88:	4907      	ldr	r1, [pc, #28]	; (8002fa8 <cloop_init+0x5c>)
 8002f8a:	6883      	ldr	r3, [r0, #8]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4798      	blx	r3

	return 0;
}
 8002f92:	2000      	movs	r0, #0
 8002f94:	bd70      	pop	{r4, r5, r6, pc}
 8002f96:	bf00      	nop
 8002f98:	20000324 	.word	0x20000324
 8002f9c:	08004e4c 	.word	0x08004e4c
 8002fa0:	08004e64 	.word	0x08004e64
 8002fa4:	08004e34 	.word	0x08004e34
 8002fa8:	08002e5d 	.word	0x08002e5d

08002fac <svm_set>:
	svm->d_min = 0.0f;
	svm->d_max = 1.0f;
}

void svm_set(svm_t *svm, float va, float vb)
{
 8002fac:	b510      	push	{r4, lr}
 8002fae:	ed2d 8b02 	vpush	{d8}
 8002fb2:	eef0 8a40 	vmov.f32	s17, s0
	float a, b, c, mod;
	float x, y, z;

	/* limit maximum amplitude to avoid distortions */
	(void)arm_sqrt_f32(va * va + vb * vb, &mod);
 8002fb6:	ee20 0aa0 	vmul.f32	s0, s1, s1
 8002fba:	ee08 0aa8 	vmla.f32	s0, s17, s17
{
 8002fbe:	4604      	mov	r4, r0
 8002fc0:	eeb0 8a60 	vmov.f32	s16, s1
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8002fc4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fcc:	db10      	blt.n	8002ff0 <svm_set+0x44>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 8002fce:	f000 fff5 	bl	8003fbc <sqrtf>
	if (mod > SQRT_3 / 2.0f) {
 8002fd2:	eddf 7a5c 	vldr	s15, [pc, #368]	; 8003144 <svm_set+0x198>
 8002fd6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		va = va / mod * (SQRT_3 / 2.0f);
 8002fde:	bfc1      	itttt	gt
 8002fe0:	ee88 7a80 	vdivgt.f32	s14, s17, s0
 8002fe4:	ee67 8a27 	vmulgt.f32	s17, s14, s15
		vb = vb / mod * (SQRT_3 / 2.0f);
 8002fe8:	ee88 7a00 	vdivgt.f32	s14, s16, s0
 8002fec:	ee27 8a27 	vmulgt.f32	s16, s14, s15
	}

	a = va - 1.0f / SQRT_3 * vb;
 8002ff0:	eddf 7a55 	vldr	s15, [pc, #340]	; 8003148 <svm_set+0x19c>
 8002ff4:	eeb0 0a68 	vmov.f32	s0, s17
 8002ff8:	ee08 0a67 	vmls.f32	s0, s16, s15
	b = 2.0f / SQRT_3 * vb;
 8002ffc:	eddf 7a53 	vldr	s15, [pc, #332]	; 800314c <svm_set+0x1a0>
 8003000:	ee68 0a27 	vmul.f32	s1, s16, s15
	c = -(a + b);
 8003004:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003008:	ee70 6a20 	vadd.f32	s13, s0, s1
	if (c < 0.0f) {
 800300c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8003010:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8003014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		if (a < 0.0f) {
 8003018:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
	if (c < 0.0f) {
 800301c:	dd54      	ble.n	80030c8 <svm_set+0x11c>
		if (a < 0.0f) {
 800301e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003022:	d540      	bpl.n	80030a6 <svm_set+0xfa>

		break;
	case 2U:
		x = -c;
		y = -a;
		z = 1.0f - (x + y);
 8003024:	ee36 0ac0 	vsub.f32	s0, s13, s0

		svm->duties.a = x + z * 0.5f;
		svm->duties.b = x + y + z * 0.5f;
		svm->duties.c = z * 0.5f;

		break;
 8003028:	2302      	movs	r3, #2
		z = 1.0f - (x + y);
 800302a:	ee77 7ac0 	vsub.f32	s15, s15, s0
		svm->duties.a = x + z * 0.5f;
 800302e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003032:	ee36 6aa7 	vadd.f32	s12, s13, s15
		svm->duties.b = x + y + z * 0.5f;
 8003036:	ee37 7a80 	vadd.f32	s14, s15, s0
		break;
	default:
		break;
	}

	svm->duties.a = CLAMP(svm->duties.a, svm->d_min, svm->d_max);
 800303a:	edd4 6a04 	vldr	s13, [r4, #16]
	svm->sector = get_sector(a, b, c);
 800303e:	7023      	strb	r3, [r4, #0]
	svm->duties.a = CLAMP(svm->duties.a, svm->d_min, svm->d_max);
 8003040:	eef4 6ac6 	vcmpe.f32	s13, s12
 8003044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003048:	da76      	bge.n	8003138 <svm_set+0x18c>
 800304a:	edd4 5a05 	vldr	s11, [r4, #20]
 800304e:	eef4 5a46 	vcmp.f32	s11, s12
 8003052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003056:	bfc8      	it	gt
 8003058:	eef0 5a46 	vmovgt.f32	s11, s12
	svm->duties.b = CLAMP(svm->duties.b, svm->d_min, svm->d_max);
 800305c:	eef4 6ac7 	vcmpe.f32	s13, s14
 8003060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	svm->duties.a = CLAMP(svm->duties.a, svm->d_min, svm->d_max);
 8003064:	edc4 5a01 	vstr	s11, [r4, #4]
	svm->duties.b = CLAMP(svm->duties.b, svm->d_min, svm->d_max);
 8003068:	da69      	bge.n	800313e <svm_set+0x192>
 800306a:	ed94 6a05 	vldr	s12, [r4, #20]
 800306e:	eeb4 6a47 	vcmp.f32	s12, s14
 8003072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003076:	bfc8      	it	gt
 8003078:	eeb0 6a47 	vmovgt.f32	s12, s14
	svm->duties.c = CLAMP(svm->duties.c, svm->d_min, svm->d_max);
 800307c:	eef4 6ae7 	vcmpe.f32	s13, s15
 8003080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	svm->duties.b = CLAMP(svm->duties.b, svm->d_min, svm->d_max);
 8003084:	ed84 6a02 	vstr	s12, [r4, #8]
	svm->duties.c = CLAMP(svm->duties.c, svm->d_min, svm->d_max);
 8003088:	da08      	bge.n	800309c <svm_set+0xf0>
 800308a:	edd4 6a05 	vldr	s13, [r4, #20]
 800308e:	eef4 6a67 	vcmp.f32	s13, s15
 8003092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003096:	bfc8      	it	gt
 8003098:	eef0 6a67 	vmovgt.f32	s13, s15
 800309c:	edc4 6a03 	vstr	s13, [r4, #12]
}
 80030a0:	ecbd 8b02 	vpop	{d8}
 80030a4:	bd10      	pop	{r4, pc}
			if (b < 0.0f) {
 80030a6:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 80030aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030ae:	d539      	bpl.n	8003124 <svm_set+0x178>
		z = 1.0f - (x + y);
 80030b0:	ee76 6ae0 	vsub.f32	s13, s13, s1
		break;
 80030b4:	2306      	movs	r3, #6
		z = 1.0f - (x + y);
 80030b6:	ee77 7ae6 	vsub.f32	s15, s15, s13
		svm->duties.a = x + y + z * 0.5f;
 80030ba:	ee27 7a87 	vmul.f32	s14, s15, s14
 80030be:	ee37 6a26 	vadd.f32	s12, s14, s13
		svm->duties.c = x + z * 0.5f;
 80030c2:	ee77 7a60 	vsub.f32	s15, s14, s1
		break;
 80030c6:	e7b8      	b.n	800303a <svm_set+0x8e>
		if (a < 0.0f) {
 80030c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030cc:	d51e      	bpl.n	800310c <svm_set+0x160>
			if (b <= 0.0f) {
 80030ce:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 80030d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030d6:	d90b      	bls.n	80030f0 <svm_set+0x144>
		z = 1.0f - (x + y);
 80030d8:	ee70 0ae6 	vsub.f32	s1, s1, s13
		break;
 80030dc:	2303      	movs	r3, #3
		z = 1.0f - (x + y);
 80030de:	ee77 7ae0 	vsub.f32	s15, s15, s1
		svm->duties.a = z * 0.5f;
 80030e2:	ee27 6a87 	vmul.f32	s12, s15, s14
		svm->duties.b = x + y + z * 0.5f;
 80030e6:	ee36 7a20 	vadd.f32	s14, s12, s1
		svm->duties.c = y + z * 0.5f;
 80030ea:	ee76 7a66 	vsub.f32	s15, s12, s13
		break;
 80030ee:	e7a4      	b.n	800303a <svm_set+0x8e>
		x = -a;
 80030f0:	eef1 6a40 	vneg.f32	s13, s0
 80030f4:	ee76 6ae0 	vsub.f32	s13, s13, s1
		break;
 80030f8:	2304      	movs	r3, #4
		z = 1.0f - (x + y);
 80030fa:	ee77 7ae6 	vsub.f32	s15, s15, s13
		svm->duties.a = z * 0.5f;
 80030fe:	ee27 6a87 	vmul.f32	s12, s15, s14
		svm->duties.b = x + z * 0.5f;
 8003102:	ee36 7a40 	vsub.f32	s14, s12, s0
		svm->duties.c = x + y + z * 0.5f;
 8003106:	ee76 7a26 	vadd.f32	s15, s12, s13
		break;
 800310a:	e796      	b.n	800303a <svm_set+0x8e>
		z = 1.0f - (x + y);
 800310c:	ee70 6a66 	vsub.f32	s13, s0, s13
		break;
 8003110:	2305      	movs	r3, #5
		z = 1.0f - (x + y);
 8003112:	ee77 7ae6 	vsub.f32	s15, s15, s13
		svm->duties.a = y + z * 0.5f;
 8003116:	ee27 7a87 	vmul.f32	s14, s15, s14
 800311a:	ee37 6a00 	vadd.f32	s12, s14, s0
		svm->duties.c = x + y + z * 0.5f;
 800311e:	ee76 7a87 	vadd.f32	s15, s13, s14
		break;
 8003122:	e78a      	b.n	800303a <svm_set+0x8e>
		z = 1.0f - (x + y);
 8003124:	ee77 7ae6 	vsub.f32	s15, s15, s13
		break;
 8003128:	2301      	movs	r3, #1
		svm->duties.a = x + y + z * 0.5f;
 800312a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800312e:	ee36 6aa7 	vadd.f32	s12, s13, s15
		svm->duties.b = y + z * 0.5f;
 8003132:	ee37 7aa0 	vadd.f32	s14, s15, s1
		break;
 8003136:	e780      	b.n	800303a <svm_set+0x8e>
	svm->duties.a = CLAMP(svm->duties.a, svm->d_min, svm->d_max);
 8003138:	eef0 5a66 	vmov.f32	s11, s13
 800313c:	e78e      	b.n	800305c <svm_set+0xb0>
	svm->duties.b = CLAMP(svm->duties.b, svm->d_min, svm->d_max);
 800313e:	eeb0 6a66 	vmov.f32	s12, s13
 8003142:	e79b      	b.n	800307c <svm_set+0xd0>
 8003144:	3f5db3d7 	.word	0x3f5db3d7
 8003148:	3f13cd3a 	.word	0x3f13cd3a
 800314c:	3f93cd3a 	.word	0x3f93cd3a

08003150 <stm32_tim_clk_get>:
#include <zephyr/device.h>

#include <spinner/utils/stm32_tim.h>

int stm32_tim_clk_get(const struct stm32_pclken *pclken, uint32_t *tim_clk)
{
 8003150:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003152:	4604      	mov	r4, r0
 */
static inline int clock_control_get_rate(const struct device *dev,
					 clock_control_subsys_t sys,
					 uint32_t *rate)
{
	const struct clock_control_driver_api *api =
 8003154:	480a      	ldr	r0, [pc, #40]	; (8003180 <stm32_tim_clk_get+0x30>)
		(const struct clock_control_driver_api *)dev->api;

	if (api->get_rate == NULL) {
 8003156:	6883      	ldr	r3, [r0, #8]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	460d      	mov	r5, r1
 800315c:	b16b      	cbz	r3, 800317a <stm32_tim_clk_get+0x2a>
		return -ENOSYS;
	}

	return api->get_rate(dev, sys, rate);
 800315e:	aa01      	add	r2, sp, #4
 8003160:	4621      	mov	r1, r4
 8003162:	4798      	blx	r3

	clk = DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE);

	ret = clock_control_get_rate(clk, (clock_control_subsys_t *)pclken,
				     &bus_clk);
	if (ret < 0) {
 8003164:	2800      	cmp	r0, #0
 8003166:	db06      	blt.n	8003176 <stm32_tim_clk_get+0x26>
		return ret;
	}

	if (pclken->bus == STM32_CLOCK_BUS_APB1) {
 8003168:	6822      	ldr	r2, [r4, #0]
	 * APB domain.
	 */
	if (apb_psc == 1U) {
		*tim_clk = bus_clk;
	} else {
		*tim_clk = bus_clk * 2U;
 800316a:	9b01      	ldr	r3, [sp, #4]
	if (pclken->bus == STM32_CLOCK_BUS_APB1) {
 800316c:	2a40      	cmp	r2, #64	; 0x40
		*tim_clk = bus_clk * 2U;
 800316e:	bf08      	it	eq
 8003170:	005b      	lsleq	r3, r3, #1
		*tim_clk = bus_clk;
 8003172:	602b      	str	r3, [r5, #0]
	}

	return 0;
 8003174:	2000      	movs	r0, #0
}
 8003176:	b003      	add	sp, #12
 8003178:	bd30      	pop	{r4, r5, pc}
		return -ENOSYS;
 800317a:	f06f 0057 	mvn.w	r0, #87	; 0x57
 800317e:	e7fa      	b.n	8003176 <stm32_tim_clk_get+0x26>
 8003180:	08004d44 	.word	0x08004d44

08003184 <stm32_adc_clk_get>:
	return 0;
}

int stm32_adc_clk_get(ADC_TypeDef *adc, const struct stm32_pclken *pclken,
		      uint32_t *clk)
{
 8003184:	b508      	push	{r3, lr}
	const struct clock_control_driver_api *api =
 8003186:	4807      	ldr	r0, [pc, #28]	; (80031a4 <stm32_adc_clk_get+0x20>)
	if (api->get_rate == NULL) {
 8003188:	6883      	ldr	r3, [r0, #8]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	b13b      	cbz	r3, 800319e <stm32_adc_clk_get+0x1a>
	return api->get_rate(dev, sys, rate);
 800318e:	4798      	blx	r3

	/* obtain ADC clock rate */
	clk_dev = DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE);
	ret = clock_control_get_rate(clk_dev, (clock_control_subsys_t *)pclken,
				     clk);
	if (ret < 0) {
 8003190:	2800      	cmp	r0, #0
 8003192:	db03      	blt.n	800319c <stm32_adc_clk_get+0x18>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_ADCPRE));
 8003194:	4b04      	ldr	r3, [pc, #16]	; (80031a8 <stm32_adc_clk_get+0x24>)
 8003196:	685b      	ldr	r3, [r3, #4]
		break;
	case LL_ADC_CLOCK_SYNC_PCLK_DIV4:
		*clk = *clk >> 2U;
		break;*/
	default:
		return -ENOTSUP;
 8003198:	f06f 0085 	mvn.w	r0, #133	; 0x85
	}

	return 0;
}
 800319c:	bd08      	pop	{r3, pc}
		return -ENOSYS;
 800319e:	f06f 0057 	mvn.w	r0, #87	; 0x57
 80031a2:	e7fb      	b.n	800319c <stm32_adc_clk_get+0x18>
 80031a4:	08004d44 	.word	0x08004d44
 80031a8:	40012300 	.word	0x40012300

080031ac <arm_sin_cos_f32>:
  float32_t Dn, Df;
  float32_t temp, findex;

  /* input x is in degrees */
  /* Scale input, divide input by 360, for cosine add 0.25 (pi/2) to read sine table */
  in = theta * 0.00277777777778f;
 80031ac:	eddf 7a3c 	vldr	s15, [pc, #240]	; 80032a0 <arm_sin_cos_f32+0xf4>

  /* Calculation of fractional value */
  fract = findex - (float32_t) indexS;

  /* Read two nearest values of input value from the cos & sin tables */
  f1 =  sinTable_f32[indexC  ];
 80031b0:	4b3c      	ldr	r3, [pc, #240]	; (80032a4 <arm_sin_cos_f32+0xf8>)
  temp = (1.0f - fract) * f1 + fract * f2;

  Dn = 0.0122718463030f; /* delta between the two points (fixed), in this case 2*pi/FAST_MATH_TABLE_SIZE */
  Df = f2 - f1;          /* delta between the values of the functions */

  temp = Dn * (d1 + d2) - 2 * Df;
 80031b2:	eddf 4a3d 	vldr	s9, [pc, #244]	; 80032a8 <arm_sin_cos_f32+0xfc>
  in = theta * 0.00277777777778f;
 80031b6:	ee60 7a27 	vmul.f32	s15, s0, s15
{
 80031ba:	b530      	push	{r4, r5, lr}
  if (in < 0.0f)
 80031bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80031c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    in = -in;
 80031c4:	bf48      	it	mi
 80031c6:	eef1 7a67 	vnegmi.f32	s15, s15
  in = in - (int32_t)in;
 80031ca:	eebd 7ae7 	vcvt.s32.f32	s14, s15
  temp = fract * temp + (3 * Df - (d2 + 2 * d1) * Dn);
 80031ce:	eef0 2a08 	vmov.f32	s5, #8	; 0x40400000  3.0
  in = in - (int32_t)in;
 80031d2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  temp = fract * temp + d1 * Dn;

  /* Calculation of sine value */
  *pSinVal = fract * temp + f1;

  if (theta < 0.0f)
 80031d6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
  in = in - (int32_t)in;
 80031da:	ee77 7ac7 	vsub.f32	s15, s15, s14
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
 80031de:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80032ac <arm_sin_cos_f32+0x100>
 80031e2:	ee67 7a87 	vmul.f32	s15, s15, s14
  if (theta < 0.0f)
 80031e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  indexS = ((uint16_t)findex) & 0x1ff;
 80031ea:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 80031ee:	ee17 2a10 	vmov	r2, s14
 80031f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
  fract = findex - (float32_t) indexS;
 80031f6:	ee07 2a10 	vmov	s14, r2
  indexC = (indexS + (FAST_MATH_TABLE_SIZE / 4)) & 0x1ff;
 80031fa:	f102 0480 	add.w	r4, r2, #128	; 0x80
  fract = findex - (float32_t) indexS;
 80031fe:	eeb8 7a47 	vcvt.f32.u32	s14, s14
  f1 =  sinTable_f32[indexC  ];
 8003202:	f3c4 0408 	ubfx	r4, r4, #0, #9
 8003206:	eb03 0584 	add.w	r5, r3, r4, lsl #2
  d1 = -sinTable_f32[indexS  ];
 800320a:	eb03 0482 	add.w	r4, r3, r2, lsl #2
  fract = findex - (float32_t) indexS;
 800320e:	ee77 7ac7 	vsub.f32	s15, s15, s14
  f2 =  sinTable_f32[indexC+1];
 8003212:	ed95 4a01 	vldr	s8, [r5, #4]
  f1 =  sinTable_f32[indexC  ];
 8003216:	ed95 7a00 	vldr	s14, [r5]
  d1 = -sinTable_f32[indexS  ];
 800321a:	edd4 5a00 	vldr	s11, [r4]
  d2 = -sinTable_f32[indexS+1];
 800321e:	ed94 5a01 	vldr	s10, [r4, #4]
  Df = f2 - f1;          /* delta between the values of the functions */
 8003222:	ee34 3a47 	vsub.f32	s6, s8, s14
  d1 = -sinTable_f32[indexS  ];
 8003226:	eeb1 6a65 	vneg.f32	s12, s11
  temp = Dn * (d1 + d2) - 2 * Df;
 800322a:	ee76 6a45 	vsub.f32	s13, s12, s10
 800322e:	ee73 3a03 	vadd.f32	s7, s6, s6
 8003232:	ee56 3aa4 	vnmls.f32	s7, s13, s9
  temp = fract * temp + (3 * Df - (d2 + 2 * d1) * Dn);
 8003236:	ee76 6a06 	vadd.f32	s13, s12, s12
  temp = fract * temp + d1 * Dn;
 800323a:	ee26 6a24 	vmul.f32	s12, s12, s9
  temp = fract * temp + (3 * Df - (d2 + 2 * d1) * Dn);
 800323e:	ee76 6ac5 	vsub.f32	s13, s13, s10
 8003242:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8003246:	ee53 6a22 	vnmls.f32	s13, s6, s5
 800324a:	ee43 6aa7 	vmla.f32	s13, s7, s15
  *pCosVal = fract * temp + f1;
 800324e:	eef0 3a47 	vmov.f32	s7, s14
  temp = fract * temp + d1 * Dn;
 8003252:	ee06 6aa7 	vmla.f32	s12, s13, s15
  temp = Dn * (d1 + d2) - 2 * Df;
 8003256:	ee77 6a04 	vadd.f32	s13, s14, s8
  *pCosVal = fract * temp + f1;
 800325a:	ee46 3a27 	vmla.f32	s7, s12, s15
  Df = f2 - f1; // delta between the values of the functions
 800325e:	ee35 6a65 	vsub.f32	s12, s10, s11
  *pCosVal = fract * temp + f1;
 8003262:	edc1 3a00 	vstr	s7, [r1]
  temp = Dn * (d1 + d2) - 2 * Df;
 8003266:	ee36 5a06 	vadd.f32	s10, s12, s12
 800326a:	ee16 5aa4 	vnmls.f32	s10, s13, s9
  temp = fract * temp + (3 * Df - (d2 + 2 * d1) * Dn);
 800326e:	ee77 6a07 	vadd.f32	s13, s14, s14
  temp = fract * temp + d1 * Dn;
 8003272:	ee27 7a24 	vmul.f32	s14, s14, s9
  temp = fract * temp + (3 * Df - (d2 + 2 * d1) * Dn);
 8003276:	ee76 6a84 	vadd.f32	s13, s13, s8
 800327a:	ee66 6aa4 	vmul.f32	s13, s13, s9
 800327e:	ee56 6a22 	vnmls.f32	s13, s12, s5
 8003282:	ee45 6a27 	vmla.f32	s13, s10, s15
  temp = fract * temp + d1 * Dn;
 8003286:	ee06 7aa7 	vmla.f32	s14, s13, s15
  *pSinVal = fract * temp + f1;
 800328a:	eef0 6a65 	vmov.f32	s13, s11
 800328e:	ee47 6a27 	vmla.f32	s13, s14, s15
  {
    *pSinVal = -*pSinVal;
 8003292:	bf48      	it	mi
 8003294:	eef1 6a66 	vnegmi.f32	s13, s13
  *pSinVal = fract * temp + f1;
 8003298:	edc0 6a00 	vstr	s13, [r0]
  }
}
 800329c:	bd30      	pop	{r4, r5, pc}
 800329e:	bf00      	nop
 80032a0:	3b360b61 	.word	0x3b360b61
 80032a4:	08005420 	.word	0x08005420
 80032a8:	3c490fdb 	.word	0x3c490fdb
 80032ac:	44000000 	.word	0x44000000

080032b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032b0:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032b2:	4913      	ldr	r1, [pc, #76]	; (8003300 <HAL_RCC_GetSysClockFreq+0x50>)
 80032b4:	688b      	ldr	r3, [r1, #8]
 80032b6:	f003 030c 	and.w	r3, r3, #12
 80032ba:	2b04      	cmp	r3, #4
 80032bc:	d01c      	beq.n	80032f8 <HAL_RCC_GetSysClockFreq+0x48>
 80032be:	2b08      	cmp	r3, #8
 80032c0:	d11c      	bne.n	80032fc <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032c2:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032c4:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032c6:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032c8:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032cc:	bf14      	ite	ne
 80032ce:	480d      	ldrne	r0, [pc, #52]	; (8003304 <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032d0:	480d      	ldreq	r0, [pc, #52]	; (8003308 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032d2:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80032d6:	bf18      	it	ne
 80032d8:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032da:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032de:	fba1 0100 	umull	r0, r1, r1, r0
 80032e2:	f7fd fbc9 	bl	8000a78 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80032e6:	4b06      	ldr	r3, [pc, #24]	; (8003300 <HAL_RCC_GetSysClockFreq+0x50>)
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80032ee:	3301      	adds	r3, #1
 80032f0:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80032f2:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80032f6:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032f8:	4802      	ldr	r0, [pc, #8]	; (8003304 <HAL_RCC_GetSysClockFreq+0x54>)
 80032fa:	e7fc      	b.n	80032f6 <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 80032fc:	4802      	ldr	r0, [pc, #8]	; (8003308 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 80032fe:	e7fa      	b.n	80032f6 <HAL_RCC_GetSysClockFreq+0x46>
 8003300:	40023800 	.word	0x40023800
 8003304:	007a1200 	.word	0x007a1200
 8003308:	00f42400 	.word	0x00f42400

0800330c <LL_ADC_CommonInit>:
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 800330c:	4b07      	ldr	r3, [pc, #28]	; (800332c <LL_ADC_CommonInit+0x20>)
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 800330e:	4602      	mov	r2, r0
 8003310:	6898      	ldr	r0, [r3, #8]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 8003312:	f010 0001 	ands.w	r0, r0, #1
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_ADCPRE, CommonClock);
 8003316:	bf01      	itttt	eq
 8003318:	6853      	ldreq	r3, [r2, #4]
 800331a:	6809      	ldreq	r1, [r1, #0]
 800331c:	f423 3340 	biceq.w	r3, r3, #196608	; 0x30000
 8003320:	430b      	orreq	r3, r1
 8003322:	bf0c      	ite	eq
 8003324:	6053      	streq	r3, [r2, #4]
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8003326:	2001      	movne	r0, #1
  }

  return status;
}
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	40012000 	.word	0x40012000

08003330 <LL_ADC_REG_Init>:
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8003330:	6883      	ldr	r3, [r0, #8]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0UL)
 8003332:	07db      	lsls	r3, r3, #31
 8003334:	d41f      	bmi.n	8003376 <LL_ADC_REG_Init+0x46>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting      */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8003336:	684b      	ldr	r3, [r1, #4]
 8003338:	b1cb      	cbz	r3, 800336e <LL_ADC_REG_Init+0x3e>
    {
      MODIFY_REG(ADCx->CR1,
 800333a:	6843      	ldr	r3, [r0, #4]
 800333c:	688a      	ldr	r2, [r1, #8]
 800333e:	f423 4368 	bic.w	r3, r3, #59392	; 0xe800
 8003342:	4313      	orrs	r3, r2
                   ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8003344:	6043      	str	r3, [r0, #4]
                ,
                   LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }

    MODIFY_REG(ADCx->CR2,
 8003346:	6882      	ldr	r2, [r0, #8]
 8003348:	4b0c      	ldr	r3, [pc, #48]	; (800337c <LL_ADC_REG_Init+0x4c>)
 800334a:	4013      	ands	r3, r2
 800334c:	68ca      	ldr	r2, [r1, #12]
 800334e:	4313      	orrs	r3, r2
 8003350:	690a      	ldr	r2, [r1, #16]
 8003352:	4313      	orrs	r3, r2
 8003354:	680a      	ldr	r2, [r1, #0]
 8003356:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 800335a:	4313      	orrs	r3, r2
 800335c:	6083      	str	r3, [r0, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800335e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003360:	684a      	ldr	r2, [r1, #4]
 8003362:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003366:	4313      	orrs	r3, r2
 8003368:	62c3      	str	r3, [r0, #44]	; 0x2c
  ErrorStatus status = SUCCESS;
 800336a:	2000      	movs	r0, #0
}
 800336c:	4770      	bx	lr
      MODIFY_REG(ADCx->CR1,
 800336e:	6843      	ldr	r3, [r0, #4]
 8003370:	f423 4368 	bic.w	r3, r3, #59392	; 0xe800
 8003374:	e7e6      	b.n	8003344 <LL_ADC_REG_Init+0x14>
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8003376:	2001      	movs	r0, #1
  }
  return status;
}
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	c0fffcfd 	.word	0xc0fffcfd

08003380 <LL_TIM_Init>:
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003380:	4a1d      	ldr	r2, [pc, #116]	; (80033f8 <LL_TIM_Init+0x78>)
  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8003382:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003384:	4290      	cmp	r0, r2
 8003386:	d00e      	beq.n	80033a6 <LL_TIM_Init+0x26>
 8003388:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800338c:	d00b      	beq.n	80033a6 <LL_TIM_Init+0x26>
 800338e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003392:	4290      	cmp	r0, r2
 8003394:	d007      	beq.n	80033a6 <LL_TIM_Init+0x26>
 8003396:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800339a:	4290      	cmp	r0, r2
 800339c:	d003      	beq.n	80033a6 <LL_TIM_Init+0x26>
 800339e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80033a2:	4290      	cmp	r0, r2
 80033a4:	d112      	bne.n	80033cc <LL_TIM_Init+0x4c>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80033a6:	684a      	ldr	r2, [r1, #4]
 80033a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ac:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80033ae:	68ca      	ldr	r2, [r1, #12]
 80033b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033b4:	4313      	orrs	r3, r2
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80033b6:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80033b8:	688b      	ldr	r3, [r1, #8]
  WRITE_REG(TIMx->ARR, AutoReload);
 80033ba:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80033bc:	880b      	ldrh	r3, [r1, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80033be:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033c0:	4b0d      	ldr	r3, [pc, #52]	; (80033f8 <LL_TIM_Init+0x78>)
 80033c2:	4298      	cmp	r0, r3
 80033c4:	d111      	bne.n	80033ea <LL_TIM_Init+0x6a>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80033c6:	690b      	ldr	r3, [r1, #16]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80033c8:	6303      	str	r3, [r0, #48]	; 0x30
}
 80033ca:	e00e      	b.n	80033ea <LL_TIM_Init+0x6a>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033cc:	4a0b      	ldr	r2, [pc, #44]	; (80033fc <LL_TIM_Init+0x7c>)
 80033ce:	4290      	cmp	r0, r2
 80033d0:	d0ed      	beq.n	80033ae <LL_TIM_Init+0x2e>
 80033d2:	4a0b      	ldr	r2, [pc, #44]	; (8003400 <LL_TIM_Init+0x80>)
 80033d4:	4290      	cmp	r0, r2
 80033d6:	d0ea      	beq.n	80033ae <LL_TIM_Init+0x2e>
 80033d8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80033dc:	4290      	cmp	r0, r2
 80033de:	d0e6      	beq.n	80033ae <LL_TIM_Init+0x2e>
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80033e0:	6003      	str	r3, [r0, #0]
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80033e2:	688b      	ldr	r3, [r1, #8]
  WRITE_REG(TIMx->ARR, AutoReload);
 80033e4:	62c3      	str	r3, [r0, #44]	; 0x2c
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80033e6:	880b      	ldrh	r3, [r1, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80033e8:	6283      	str	r3, [r0, #40]	; 0x28
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80033ea:	6943      	ldr	r3, [r0, #20]
 80033ec:	f043 0301 	orr.w	r3, r3, #1
 80033f0:	6143      	str	r3, [r0, #20]
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);

  return SUCCESS;
}
 80033f2:	2000      	movs	r0, #0
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	40010000 	.word	0x40010000
 80033fc:	40014000 	.word	0x40014000
 8003400:	40014400 	.word	0x40014400

08003404 <LL_TIM_OC_Init>:
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
  ErrorStatus result = ERROR;

  switch (Channel)
 8003404:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
{
 8003408:	b530      	push	{r4, r5, lr}
  switch (Channel)
 800340a:	f000 808f 	beq.w	800352c <LL_TIM_OC_Init+0x128>
 800340e:	d805      	bhi.n	800341c <LL_TIM_OC_Init+0x18>
 8003410:	2901      	cmp	r1, #1
 8003412:	d029      	beq.n	8003468 <LL_TIM_OC_Init+0x64>
 8003414:	2910      	cmp	r1, #16
 8003416:	d057      	beq.n	80034c8 <LL_TIM_OC_Init+0xc4>
 8003418:	2001      	movs	r0, #1
    default:
      break;
  }

  return result;
}
 800341a:	bd30      	pop	{r4, r5, pc}
  switch (Channel)
 800341c:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8003420:	d1fa      	bne.n	8003418 <LL_TIM_OC_Init+0x14>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8003422:	6a03      	ldr	r3, [r0, #32]
 8003424:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003428:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800342a:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 800342c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800342e:	69c1      	ldr	r1, [r0, #28]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8003430:	6815      	ldr	r5, [r2, #0]
 8003432:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 8003436:	ea41 2105 	orr.w	r1, r1, r5, lsl #8

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 800343a:	6915      	ldr	r5, [r2, #16]
 800343c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003440:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8003444:	6855      	ldr	r5, [r2, #4]
 8003446:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800344a:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800344e:	4d50      	ldr	r5, [pc, #320]	; (8003590 <LL_TIM_OC_Init+0x18c>)
 8003450:	42a8      	cmp	r0, r5
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8003452:	bf02      	ittt	eq
 8003454:	6995      	ldreq	r5, [r2, #24]
 8003456:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
 800345a:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800345e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003460:	61c1      	str	r1, [r0, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8003462:	68d2      	ldr	r2, [r2, #12]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8003464:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003466:	e02c      	b.n	80034c2 <LL_TIM_OC_Init+0xbe>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8003468:	6a03      	ldr	r3, [r0, #32]
 800346a:	f023 0301 	bic.w	r3, r3, #1
 800346e:	6203      	str	r3, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003470:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003472:	6841      	ldr	r1, [r0, #4]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003474:	6984      	ldr	r4, [r0, #24]
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8003476:	6815      	ldr	r5, [r2, #0]
 8003478:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 800347c:	432c      	orrs	r4, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800347e:	6915      	ldr	r5, [r2, #16]
 8003480:	f023 0302 	bic.w	r3, r3, #2
 8003484:	432b      	orrs	r3, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8003486:	6855      	ldr	r5, [r2, #4]
 8003488:	f023 0301 	bic.w	r3, r3, #1
 800348c:	432b      	orrs	r3, r5
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800348e:	4d40      	ldr	r5, [pc, #256]	; (8003590 <LL_TIM_OC_Init+0x18c>)
 8003490:	42a8      	cmp	r0, r5
 8003492:	d112      	bne.n	80034ba <LL_TIM_OC_Init+0xb6>
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8003494:	6955      	ldr	r5, [r2, #20]
 8003496:	f023 0308 	bic.w	r3, r3, #8
 800349a:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800349e:	6895      	ldr	r5, [r2, #8]
 80034a0:	f023 0304 	bic.w	r3, r3, #4
 80034a4:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80034a8:	6995      	ldr	r5, [r2, #24]
 80034aa:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80034ae:	4329      	orrs	r1, r5
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80034b0:	69d5      	ldr	r5, [r2, #28]
 80034b2:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 80034b6:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80034ba:	6041      	str	r1, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80034bc:	6184      	str	r4, [r0, #24]
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80034be:	68d2      	ldr	r2, [r2, #12]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80034c0:	6342      	str	r2, [r0, #52]	; 0x34
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80034c2:	6203      	str	r3, [r0, #32]
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80034c4:	2000      	movs	r0, #0
 80034c6:	e7a8      	b.n	800341a <LL_TIM_OC_Init+0x16>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80034c8:	6a03      	ldr	r3, [r0, #32]
 80034ca:	f023 0310 	bic.w	r3, r3, #16
 80034ce:	6203      	str	r3, [r0, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80034d0:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80034d2:	6841      	ldr	r1, [r0, #4]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80034d4:	6984      	ldr	r4, [r0, #24]
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80034d6:	6815      	ldr	r5, [r2, #0]
 80034d8:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
 80034dc:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80034e0:	6915      	ldr	r5, [r2, #16]
 80034e2:	f023 0320 	bic.w	r3, r3, #32
 80034e6:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80034ea:	6855      	ldr	r5, [r2, #4]
 80034ec:	f023 0310 	bic.w	r3, r3, #16
 80034f0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034f4:	4d26      	ldr	r5, [pc, #152]	; (8003590 <LL_TIM_OC_Init+0x18c>)
 80034f6:	42a8      	cmp	r0, r5
 80034f8:	d113      	bne.n	8003522 <LL_TIM_OC_Init+0x11e>
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80034fa:	6955      	ldr	r5, [r2, #20]
 80034fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003500:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8003504:	6895      	ldr	r5, [r2, #8]
 8003506:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800350a:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 800350e:	6995      	ldr	r5, [r2, #24]
 8003510:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003514:	ea41 0185 	orr.w	r1, r1, r5, lsl #2
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8003518:	69d5      	ldr	r5, [r2, #28]
 800351a:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 800351e:	ea41 01c5 	orr.w	r1, r1, r5, lsl #3
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003522:	6041      	str	r1, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003524:	6184      	str	r4, [r0, #24]
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8003526:	68d2      	ldr	r2, [r2, #12]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8003528:	6382      	str	r2, [r0, #56]	; 0x38
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800352a:	e7ca      	b.n	80034c2 <LL_TIM_OC_Init+0xbe>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800352c:	6a03      	ldr	r3, [r0, #32]
 800352e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003532:	6203      	str	r3, [r0, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8003534:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003536:	6841      	ldr	r1, [r0, #4]
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8003538:	69c4      	ldr	r4, [r0, #28]
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 800353a:	6815      	ldr	r5, [r2, #0]
 800353c:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 8003540:	432c      	orrs	r4, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8003542:	6915      	ldr	r5, [r2, #16]
 8003544:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003548:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800354c:	6855      	ldr	r5, [r2, #4]
 800354e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003552:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003556:	4d0e      	ldr	r5, [pc, #56]	; (8003590 <LL_TIM_OC_Init+0x18c>)
 8003558:	42a8      	cmp	r0, r5
 800355a:	d113      	bne.n	8003584 <LL_TIM_OC_Init+0x180>
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800355c:	6955      	ldr	r5, [r2, #20]
 800355e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003562:	ea43 2385 	orr.w	r3, r3, r5, lsl #10
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8003566:	6895      	ldr	r5, [r2, #8]
 8003568:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800356c:	ea43 2385 	orr.w	r3, r3, r5, lsl #10
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8003570:	6995      	ldr	r5, [r2, #24]
 8003572:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8003576:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800357a:	69d5      	ldr	r5, [r2, #28]
 800357c:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8003580:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003584:	6041      	str	r1, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003586:	61c4      	str	r4, [r0, #28]
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8003588:	68d2      	ldr	r2, [r2, #12]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800358a:	63c2      	str	r2, [r0, #60]	; 0x3c
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800358c:	e799      	b.n	80034c2 <LL_TIM_OC_Init+0xbe>
 800358e:	bf00      	nop
 8003590:	40010000 	.word	0x40010000

08003594 <LL_SetFlashLatency>:
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
  ErrorStatus status = SUCCESS;


  /* Frequency cannot be equal to 0 */
  if(HCLK_Frequency == 0U)
 8003594:	2800      	cmp	r0, #0
 8003596:	d076      	beq.n	8003686 <LL_SetFlashLatency+0xf2>
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  */
__STATIC_INLINE uint32_t LL_PWR_GetRegulVoltageScaling(void)
{
  return (uint32_t)(READ_BIT(PWR->CR, PWR_CR_VOS));
 8003598:	4b3c      	ldr	r3, [pc, #240]	; (800368c <LL_SetFlashLatency+0xf8>)
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
  {
    status = ERROR;
  }
  else
  {
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
 80035a0:	f5b2 4f40 	cmp.w	r2, #49152	; 0xc000
 80035a4:	d120      	bne.n	80035e8 <LL_SetFlashLatency+0x54>
      {
        latency = LL_FLASH_LATENCY_4;
      }
#endif /* UTILS_SCALE1_LATENCY4_FREQ */
#if defined (UTILS_SCALE1_LATENCY3_FREQ)
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY3_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 80035a6:	4a3a      	ldr	r2, [pc, #232]	; (8003690 <LL_SetFlashLatency+0xfc>)
 80035a8:	4290      	cmp	r0, r2
 80035aa:	d815      	bhi.n	80035d8 <LL_SetFlashLatency+0x44>
      {
        latency = LL_FLASH_LATENCY_3;
      }
#endif /* UTILS_SCALE1_LATENCY3_FREQ */
#if defined (UTILS_SCALE1_LATENCY2_FREQ)
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 80035ac:	4a39      	ldr	r2, [pc, #228]	; (8003694 <LL_SetFlashLatency+0x100>)
 80035ae:	4290      	cmp	r0, r2
 80035b0:	d907      	bls.n	80035c2 <LL_SetFlashLatency+0x2e>
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
          latency = LL_FLASH_LATENCY_1;
        }
      }
#endif /* UTILS_SCALE1_LATENCY2_FREQ */
    }
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE2)
 80035b8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80035bc:	d15c      	bne.n	8003678 <LL_SetFlashLatency+0xe4>
 80035be:	2002      	movs	r0, #2
 80035c0:	e01f      	b.n	8003602 <LL_SetFlashLatency+0x6e>
        if((HCLK_Frequency > UTILS_SCALE1_LATENCY1_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 80035c2:	4a35      	ldr	r2, [pc, #212]	; (8003698 <LL_SetFlashLatency+0x104>)
 80035c4:	4290      	cmp	r0, r2
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 80035cc:	d947      	bls.n	800365e <LL_SetFlashLatency+0xca>
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE2)
 80035ce:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80035d2:	d14c      	bne.n	800366e <LL_SetFlashLatency+0xda>
          latency = LL_FLASH_LATENCY_1;
 80035d4:	2001      	movs	r0, #1
 80035d6:	e014      	b.n	8003602 <LL_SetFlashLatency+0x6e>
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE2)
 80035de:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80035e2:	d13f      	bne.n	8003664 <LL_SetFlashLatency+0xd0>
 80035e4:	2003      	movs	r0, #3
 80035e6:	e00c      	b.n	8003602 <LL_SetFlashLatency+0x6e>
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 80035ee:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80035f2:	d122      	bne.n	800363a <LL_SetFlashLatency+0xa6>
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY3_FREQ)&&(latency == LL_FLASH_LATENCY_0))
      {
        latency = LL_FLASH_LATENCY_3;
      }
#endif /*UTILS_SCALE1_LATENCY3_FREQ */
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 80035f4:	4a27      	ldr	r2, [pc, #156]	; (8003694 <LL_SetFlashLatency+0x100>)
 80035f6:	4290      	cmp	r0, r2
 80035f8:	d83e      	bhi.n	8003678 <LL_SetFlashLatency+0xe4>
      {
        latency = LL_FLASH_LATENCY_2;
      }
      else
      {
        if((HCLK_Frequency > UTILS_SCALE2_LATENCY1_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 80035fa:	4a27      	ldr	r2, [pc, #156]	; (8003698 <LL_SetFlashLatency+0x104>)
 80035fc:	4290      	cmp	r0, r2
 80035fe:	d92e      	bls.n	800365e <LL_SetFlashLatency+0xca>
 8003600:	2000      	movs	r0, #0
 8003602:	4b22      	ldr	r3, [pc, #136]	; (800368c <LL_SetFlashLatency+0xf8>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2801      	cmp	r0, #1
 8003608:	bf38      	it	cc
 800360a:	2001      	movcc	r0, #1
 800360c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
          latency = LL_FLASH_LATENCY_1;
        }
      }
    }
#if defined (LL_PWR_REGU_VOLTAGE_SCALE3)
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE3)
 8003610:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003614:	d01f      	beq.n	8003656 <LL_SetFlashLatency+0xc2>
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8003616:	4a21      	ldr	r2, [pc, #132]	; (800369c <LL_SetFlashLatency+0x108>)
 8003618:	6813      	ldr	r3, [r2, #0]
 800361a:	f023 0307 	bic.w	r3, r3, #7
 800361e:	4303      	orrs	r3, r0
 8003620:	6013      	str	r3, [r2, #0]
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8003622:	6813      	ldr	r3, [r2, #0]
 8003624:	f003 0307 	and.w	r3, r3, #7
    do
    {
    /* Wait for Flash latency to be updated */
    getlatency = LL_FLASH_GetLatency();
    timeout--;
    } while ((getlatency != latency) && (timeout > 0));
 8003628:	4298      	cmp	r0, r3
 800362a:	bf1c      	itt	ne
 800362c:	6813      	ldrne	r3, [r2, #0]
 800362e:	f003 0307 	andne.w	r3, r3, #7

    if(getlatency != latency)
 8003632:	1ac0      	subs	r0, r0, r3
 8003634:	bf18      	it	ne
 8003636:	2001      	movne	r0, #1
 8003638:	4770      	bx	lr
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE3)
 8003640:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003644:	d10c      	bne.n	8003660 <LL_SetFlashLatency+0xcc>
      if((HCLK_Frequency > UTILS_SCALE3_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8003646:	4b13      	ldr	r3, [pc, #76]	; (8003694 <LL_SetFlashLatency+0x100>)
 8003648:	4298      	cmp	r0, r3
 800364a:	d81a      	bhi.n	8003682 <LL_SetFlashLatency+0xee>
        if((HCLK_Frequency > UTILS_SCALE3_LATENCY1_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 800364c:	4b12      	ldr	r3, [pc, #72]	; (8003698 <LL_SetFlashLatency+0x104>)
 800364e:	4298      	cmp	r0, r3
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 8003650:	f04f 0000 	mov.w	r0, #0
        if((HCLK_Frequency > UTILS_SCALE3_LATENCY1_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8003654:	d9df      	bls.n	8003616 <LL_SetFlashLatency+0x82>
 8003656:	2801      	cmp	r0, #1
 8003658:	bf38      	it	cc
 800365a:	2001      	movcc	r0, #1
 800365c:	e7db      	b.n	8003616 <LL_SetFlashLatency+0x82>
 800365e:	681b      	ldr	r3, [r3, #0]
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 8003660:	2000      	movs	r0, #0
 8003662:	e7d8      	b.n	8003616 <LL_SetFlashLatency+0x82>
 8003664:	681b      	ldr	r3, [r3, #0]
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE3)
 8003666:	2003      	movs	r0, #3
 8003668:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800366c:	e7d0      	b.n	8003610 <LL_SetFlashLatency+0x7c>
 800366e:	681b      	ldr	r3, [r3, #0]
          latency = LL_FLASH_LATENCY_1;
 8003670:	2001      	movs	r0, #1
 8003672:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003676:	e7cb      	b.n	8003610 <LL_SetFlashLatency+0x7c>
 8003678:	681b      	ldr	r3, [r3, #0]
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE3)
 800367a:	2002      	movs	r0, #2
 800367c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003680:	e7c6      	b.n	8003610 <LL_SetFlashLatency+0x7c>
      if((HCLK_Frequency > UTILS_SCALE3_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8003682:	2002      	movs	r0, #2
 8003684:	e7c7      	b.n	8003616 <LL_SetFlashLatency+0x82>
    status = ERROR;
 8003686:	2001      	movs	r0, #1
    {
      status = SUCCESS;
    }
  }
  return status;
}
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop
 800368c:	40007000 	.word	0x40007000
 8003690:	055d4a80 	.word	0x055d4a80
 8003694:	03d09000 	.word	0x03d09000
 8003698:	01c9c380 	.word	0x01c9c380
 800369c:	40023c00 	.word	0x40023c00

080036a0 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
 80036a0:	4b01      	ldr	r3, [pc, #4]	; (80036a8 <z_impl_z_errno+0x8>)
 80036a2:	6898      	ldr	r0, [r3, #8]
}
 80036a4:	3060      	adds	r0, #96	; 0x60
 80036a6:	4770      	bx	lr
 80036a8:	20000380 	.word	0x20000380

080036ac <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 80036ac:	4b0f      	ldr	r3, [pc, #60]	; (80036ec <z_sys_init_run_level+0x40>)
{
 80036ae:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 80036b0:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 80036b4:	3001      	adds	r0, #1
 80036b6:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 80036ba:	42a6      	cmp	r6, r4
 80036bc:	d800      	bhi.n	80036c0 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
 80036be:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
 80036c0:	e9d4 3500 	ldrd	r3, r5, [r4]
 80036c4:	4628      	mov	r0, r5
 80036c6:	4798      	blx	r3
		if (dev != NULL) {
 80036c8:	b16d      	cbz	r5, 80036e6 <z_sys_init_run_level+0x3a>
			if (rc != 0) {
 80036ca:	b138      	cbz	r0, 80036dc <z_sys_init_run_level+0x30>
				if (rc < 0) {
 80036cc:	2800      	cmp	r0, #0
 80036ce:	bfb8      	it	lt
 80036d0:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
 80036d2:	68eb      	ldr	r3, [r5, #12]
				if (rc > UINT8_MAX) {
 80036d4:	28ff      	cmp	r0, #255	; 0xff
 80036d6:	bfa8      	it	ge
 80036d8:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
 80036da:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
 80036dc:	68ea      	ldr	r2, [r5, #12]
 80036de:	7853      	ldrb	r3, [r2, #1]
 80036e0:	f043 0301 	orr.w	r3, r3, #1
 80036e4:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 80036e6:	3408      	adds	r4, #8
 80036e8:	e7e7      	b.n	80036ba <z_sys_init_run_level+0xe>
 80036ea:	bf00      	nop
 80036ec:	08005c28 	.word	0x08005c28

080036f0 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
 80036f0:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
 80036f2:	4b0a      	ldr	r3, [pc, #40]	; (800371c <bg_thread_main+0x2c>)
 80036f4:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
 80036f6:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
 80036f8:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
 80036fa:	f7ff ffd7 	bl	80036ac <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
 80036fe:	f000 fc57 	bl	8003fb0 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
 8003702:	2004      	movs	r0, #4
 8003704:	f7ff ffd2 	bl	80036ac <z_sys_init_run_level>

	z_init_static_threads();
 8003708:	f000 f8dc 	bl	80038c4 <z_init_static_threads>
	extern int main(void);
#else
	extern void main(void);
#endif

	(void)main();
 800370c:	f7fe fa64 	bl	8001bd8 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
 8003710:	4a03      	ldr	r2, [pc, #12]	; (8003720 <bg_thread_main+0x30>)
 8003712:	7b13      	ldrb	r3, [r2, #12]
 8003714:	f023 0301 	bic.w	r3, r3, #1
 8003718:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 800371a:	bd08      	pop	{r3, pc}
 800371c:	200003bc 	.word	0x200003bc
 8003720:	20000110 	.word	0x20000110

08003724 <z_bss_zero>:
{
 8003724:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
 8003726:	4803      	ldr	r0, [pc, #12]	; (8003734 <z_bss_zero+0x10>)
 8003728:	4a03      	ldr	r2, [pc, #12]	; (8003738 <z_bss_zero+0x14>)
 800372a:	2100      	movs	r1, #0
 800372c:	1a12      	subs	r2, r2, r0
 800372e:	f001 fa21 	bl	8004b74 <z_early_memset>
}
 8003732:	bd08      	pop	{r3, pc}
 8003734:	20000058 	.word	0x20000058
 8003738:	200003c0 	.word	0x200003c0

0800373c <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
 800373c:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
 800373e:	4e14      	ldr	r6, [pc, #80]	; (8003790 <z_init_cpu+0x54>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 8003740:	4d14      	ldr	r5, [pc, #80]	; (8003794 <z_init_cpu+0x58>)
	z_setup_new_thread(thread, stack,
 8003742:	4915      	ldr	r1, [pc, #84]	; (8003798 <z_init_cpu+0x5c>)
	struct k_thread *thread = &z_idle_threads[i];
 8003744:	23b8      	movs	r3, #184	; 0xb8
{
 8003746:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
 8003748:	fb03 6600 	mla	r6, r3, r0, r6
	z_setup_new_thread(thread, stack,
 800374c:	2201      	movs	r2, #1
 800374e:	2300      	movs	r3, #0
 8003750:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003754:	220f      	movs	r2, #15
 8003756:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800375a:	9301      	str	r3, [sp, #4]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 800375c:	231c      	movs	r3, #28
 800375e:	fb03 5500 	mla	r5, r3, r0, r5
	z_setup_new_thread(thread, stack,
 8003762:	f44f 72a0 	mov.w	r2, #320	; 0x140
{
 8003766:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
 8003768:	fb02 1100 	mla	r1, r2, r0, r1
 800376c:	4b0b      	ldr	r3, [pc, #44]	; (800379c <z_init_cpu+0x60>)
 800376e:	9500      	str	r5, [sp, #0]
 8003770:	4630      	mov	r0, r6
 8003772:	f000 f87d 	bl	8003870 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8003776:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
 8003778:	752c      	strb	r4, [r5, #20]
 800377a:	f023 0304 	bic.w	r3, r3, #4
 800377e:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
 8003780:	4b07      	ldr	r3, [pc, #28]	; (80037a0 <z_init_cpu+0x64>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
 8003782:	60ee      	str	r6, [r5, #12]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
 8003784:	3401      	adds	r4, #1
 8003786:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
	_kernel.cpus[id].irq_stack =
 800378a:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
 800378c:	b006      	add	sp, #24
 800378e:	bd70      	pop	{r4, r5, r6, pc}
 8003790:	20000058 	.word	0x20000058
 8003794:	20000380 	.word	0x20000380
 8003798:	20000bc0 	.word	0x20000bc0
 800379c:	08004b7d 	.word	0x08004b7d
 80037a0:	200003c0 	.word	0x200003c0

080037a4 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
 80037a4:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
 80037a6:	2000      	movs	r0, #0
{
 80037a8:	b0b4      	sub	sp, #208	; 0xd0
	z_sys_init_run_level(INIT_LEVEL_EARLY);
 80037aa:	f7ff ff7f 	bl	80036ac <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
 80037ae:	4b29      	ldr	r3, [pc, #164]	; (8003854 <z_cstart+0xb0>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80037b0:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
 80037b4:	4c28      	ldr	r4, [pc, #160]	; (8003858 <z_cstart+0xb4>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
 80037b6:	4e29      	ldr	r6, [pc, #164]	; (800385c <z_cstart+0xb8>)
 80037b8:	6963      	ldr	r3, [r4, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 80037ba:	4f29      	ldr	r7, [pc, #164]	; (8003860 <z_cstart+0xbc>)
 80037bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037c0:	6163      	str	r3, [r4, #20]
 80037c2:	23f0      	movs	r3, #240	; 0xf0
 80037c4:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 80037c8:	2500      	movs	r5, #0
 80037ca:	2310      	movs	r3, #16
 80037cc:	77e3      	strb	r3, [r4, #31]
 80037ce:	7625      	strb	r5, [r4, #24]
 80037d0:	7665      	strb	r5, [r4, #25]
 80037d2:	76a5      	strb	r5, [r4, #26]
 80037d4:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 80037d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80037da:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80037de:	6263      	str	r3, [r4, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
 80037e0:	f7fe fcf8 	bl	80021d4 <z_arm_fault_init>
	z_arm_cpu_idle_init();
 80037e4:	f7fe fa94 	bl	8001d10 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 80037e8:	f04f 33ff 	mov.w	r3, #4294967295
 80037ec:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 80037ee:	62e3      	str	r3, [r4, #44]	; 0x2c
	dummy_thread->base.user_options = K_ESSENTIAL;
 80037f0:	f240 1301 	movw	r3, #257	; 0x101
 80037f4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
 80037f8:	ab06      	add	r3, sp, #24
 80037fa:	60b3      	str	r3, [r6, #8]
	dummy_thread->resource_pool = NULL;
 80037fc:	951f      	str	r5, [sp, #124]	; 0x7c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
 80037fe:	f001 f986 	bl	8004b0e <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
 8003802:	2001      	movs	r0, #1
 8003804:	f7ff ff52 	bl	80036ac <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
 8003808:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
 800380a:	4c16      	ldr	r4, [pc, #88]	; (8003864 <z_cstart+0xc0>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
 800380c:	f7ff ff4e 	bl	80036ac <z_sys_init_run_level>
	z_sched_init();
 8003810:	f000 fa0c 	bl	8003c2c <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8003814:	4b14      	ldr	r3, [pc, #80]	; (8003868 <z_cstart+0xc4>)
	_kernel.ready_q.cache = &z_main_thread;
 8003816:	61f4      	str	r4, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8003818:	9305      	str	r3, [sp, #20]
 800381a:	2301      	movs	r3, #1
 800381c:	4913      	ldr	r1, [pc, #76]	; (800386c <z_cstart+0xc8>)
 800381e:	9500      	str	r5, [sp, #0]
 8003820:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8003824:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003828:	463b      	mov	r3, r7
 800382a:	e9cd 5501 	strd	r5, r5, [sp, #4]
 800382e:	4620      	mov	r0, r4
 8003830:	f000 f81e 	bl	8003870 <z_setup_new_thread>
 8003834:	7b62      	ldrb	r2, [r4, #13]
 8003836:	4606      	mov	r6, r0
 8003838:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
 800383c:	4620      	mov	r0, r4
 800383e:	7362      	strb	r2, [r4, #13]
 8003840:	f001 f9dc 	bl	8004bfc <z_ready_thread>
	z_init_cpu(0);
 8003844:	4628      	mov	r0, r5
 8003846:	f7ff ff79 	bl	800373c <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 800384a:	463a      	mov	r2, r7
 800384c:	4631      	mov	r1, r6
 800384e:	4620      	mov	r0, r4
 8003850:	f7fe fb58 	bl	8001f04 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 8003854:	20000bc0 	.word	0x20000bc0
 8003858:	e000ed00 	.word	0xe000ed00
 800385c:	20000380 	.word	0x20000380
 8003860:	080036f1 	.word	0x080036f1
 8003864:	20000110 	.word	0x20000110
 8003868:	08005d49 	.word	0x08005d49
 800386c:	20000d00 	.word	0x20000d00

08003870 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
 8003870:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
 8003872:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8003874:	7306      	strb	r6, [r0, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 8003876:	3207      	adds	r2, #7
	thread_base->thread_state = (uint8_t)initial_state;
 8003878:	2604      	movs	r6, #4
 800387a:	7346      	strb	r6, [r0, #13]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
 800387c:	f100 0558 	add.w	r5, r0, #88	; 0x58

	thread_base->prio = priority;
 8003880:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8003882:	7386      	strb	r6, [r0, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 8003884:	f022 0207 	bic.w	r2, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
 8003888:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	stack_ptr = (char *)stack + stack_obj_size;
 800388c:	188e      	adds	r6, r1, r2
	thread_base->pended_on = NULL;
 800388e:	2500      	movs	r5, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8003890:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	thread_base->pended_on = NULL;
 8003892:	6085      	str	r5, [r0, #8]
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
 8003894:	e9c0 5506 	strd	r5, r5, [r0, #24]

	thread_base->sched_locked = 0U;
 8003898:	73c5      	strb	r5, [r0, #15]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 800389a:	9202      	str	r2, [sp, #8]
 800389c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800389e:	9201      	str	r2, [sp, #4]
 80038a0:	9a08      	ldr	r2, [sp, #32]
 80038a2:	9200      	str	r2, [sp, #0]
 80038a4:	4632      	mov	r2, r6
{
 80038a6:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 80038a8:	f7fe fb0c 	bl	8001ec4 <arch_new_thread>
	if (!_current) {
 80038ac:	4b04      	ldr	r3, [pc, #16]	; (80038c0 <z_setup_new_thread+0x50>)
	new_thread->init_data = NULL;
 80038ae:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	b103      	cbz	r3, 80038b6 <z_setup_new_thread+0x46>
	new_thread->resource_pool = _current->resource_pool;
 80038b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
	return stack_ptr;
 80038b6:	6663      	str	r3, [r4, #100]	; 0x64
}
 80038b8:	4630      	mov	r0, r6
 80038ba:	b004      	add	sp, #16
 80038bc:	bd70      	pop	{r4, r5, r6, pc}
 80038be:	bf00      	nop
 80038c0:	20000380 	.word	0x20000380

080038c4 <z_init_static_threads>:
{
 80038c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038c6:	4c22      	ldr	r4, [pc, #136]	; (8003950 <z_init_static_threads+0x8c>)
	_FOREACH_STATIC_THREAD(thread_data) {
 80038c8:	4d22      	ldr	r5, [pc, #136]	; (8003954 <z_init_static_threads+0x90>)
{
 80038ca:	b087      	sub	sp, #28
 80038cc:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
 80038ce:	42ae      	cmp	r6, r5
 80038d0:	f104 042c 	add.w	r4, r4, #44	; 0x2c
 80038d4:	d30b      	bcc.n	80038ee <z_init_static_threads+0x2a>
	k_sched_lock();
 80038d6:	f000 f979 	bl	8003bcc <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
 80038da:	4c1d      	ldr	r4, [pc, #116]	; (8003950 <z_init_static_threads+0x8c>)

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 80038dc:	4f1e      	ldr	r7, [pc, #120]	; (8003958 <z_init_static_threads+0x94>)
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * ((uint64_t)to_hz / from_hz);
 80038de:	260a      	movs	r6, #10
 80038e0:	42ac      	cmp	r4, r5
 80038e2:	d320      	bcc.n	8003926 <z_init_static_threads+0x62>
}
 80038e4:	b007      	add	sp, #28
 80038e6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
 80038ea:	f000 b983 	b.w	8003bf4 <k_sched_unlock>
		z_setup_new_thread(
 80038ee:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80038f2:	9305      	str	r3, [sp, #20]
 80038f4:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 80038f8:	9304      	str	r3, [sp, #16]
 80038fa:	f854 3c10 	ldr.w	r3, [r4, #-16]
 80038fe:	9303      	str	r3, [sp, #12]
 8003900:	f854 3c14 	ldr.w	r3, [r4, #-20]
 8003904:	9302      	str	r3, [sp, #8]
 8003906:	f854 3c18 	ldr.w	r3, [r4, #-24]
 800390a:	9301      	str	r3, [sp, #4]
 800390c:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 8003910:	9300      	str	r3, [sp, #0]
 8003912:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
 8003916:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
 800391a:	f7ff ffa9 	bl	8003870 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
 800391e:	f854 3c2c 	ldr.w	r3, [r4, #-44]
 8003922:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
 8003924:	e7d2      	b.n	80038cc <z_init_static_threads+0x8>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
 8003926:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003928:	1c53      	adds	r3, r2, #1
 800392a:	d009      	beq.n	8003940 <z_init_static_threads+0x7c>
					    K_MSEC(thread_data->init_delay));
 800392c:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8003930:	fb82 2306 	smull	r2, r3, r2, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 8003934:	ea52 0103 	orrs.w	r1, r2, r3
			schedule_new_thread(thread_data->init_thread,
 8003938:	6820      	ldr	r0, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 800393a:	d103      	bne.n	8003944 <z_init_static_threads+0x80>
	z_sched_start(thread);
 800393c:	f000 f928 	bl	8003b90 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
 8003940:	342c      	adds	r4, #44	; 0x2c
 8003942:	e7cd      	b.n	80038e0 <z_init_static_threads+0x1c>
 8003944:	4639      	mov	r1, r7
 8003946:	3018      	adds	r0, #24
 8003948:	f000 fa4a 	bl	8003de0 <z_add_timeout>
 800394c:	e7f8      	b.n	8003940 <z_init_static_threads+0x7c>
 800394e:	bf00      	nop
 8003950:	0800512c 	.word	0x0800512c
 8003954:	0800512c 	.word	0x0800512c
 8003958:	08004bb9 	.word	0x08004bb9

0800395c <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
 800395c:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
 800395e:	4d07      	ldr	r5, [pc, #28]	; (800397c <z_reset_time_slice+0x20>)
 8003960:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
 8003962:	b154      	cbz	r4, 800397a <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
 8003964:	f7fe ffb2 	bl	80028cc <sys_clock_elapsed>
 8003968:	4b05      	ldr	r3, [pc, #20]	; (8003980 <z_reset_time_slice+0x24>)
 800396a:	4404      	add	r4, r0
 800396c:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
 800396e:	6828      	ldr	r0, [r5, #0]
 8003970:	2100      	movs	r1, #0
	}
}
 8003972:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
 8003976:	f001 b97d 	b.w	8004c74 <z_set_timeout_expiry>
}
 800397a:	bd38      	pop	{r3, r4, r5, pc}
 800397c:	200003b4 	.word	0x200003b4
 8003980:	20000380 	.word	0x20000380

08003984 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
 8003984:	b538      	push	{r3, r4, r5, lr}
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
 8003986:	4d0d      	ldr	r5, [pc, #52]	; (80039bc <update_cache+0x38>)
 8003988:	462b      	mov	r3, r5
 800398a:	f853 4f20 	ldr.w	r4, [r3, #32]!
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800398e:	429c      	cmp	r4, r3
 8003990:	d000      	beq.n	8003994 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 8003992:	b904      	cbnz	r4, 8003996 <update_cache+0x12>
 8003994:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
 8003996:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
 8003998:	b938      	cbnz	r0, 80039aa <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
 800399a:	7b5a      	ldrb	r2, [r3, #13]
 800399c:	06d2      	lsls	r2, r2, #27
 800399e:	d104      	bne.n	80039aa <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 80039a0:	69a2      	ldr	r2, [r4, #24]
 80039a2:	b912      	cbnz	r2, 80039aa <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
 80039a4:	89da      	ldrh	r2, [r3, #14]
 80039a6:	2a7f      	cmp	r2, #127	; 0x7f
 80039a8:	d805      	bhi.n	80039b6 <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
 80039aa:	429c      	cmp	r4, r3
 80039ac:	d002      	beq.n	80039b4 <update_cache+0x30>
			z_reset_time_slice(thread);
 80039ae:	4620      	mov	r0, r4
 80039b0:	f7ff ffd4 	bl	800395c <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
 80039b4:	4623      	mov	r3, r4
 80039b6:	61eb      	str	r3, [r5, #28]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
 80039b8:	bd38      	pop	{r3, r4, r5, pc}
 80039ba:	bf00      	nop
 80039bc:	20000380 	.word	0x20000380

080039c0 <move_thread_to_end_of_prio_q>:
{
 80039c0:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
 80039c2:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
 80039c6:	7b43      	ldrb	r3, [r0, #13]
 80039c8:	2a00      	cmp	r2, #0
{
 80039ca:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
 80039cc:	da04      	bge.n	80039d8 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 80039ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039d2:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
 80039d4:	f001 f8de 	bl	8004b94 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
 80039d8:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
 80039da:	4a15      	ldr	r2, [pc, #84]	; (8003a30 <move_thread_to_end_of_prio_q+0x70>)
 80039dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80039e0:	4610      	mov	r0, r2
 80039e2:	734b      	strb	r3, [r1, #13]
 80039e4:	f850 3f20 	ldr.w	r3, [r0, #32]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
 80039e8:	6a54      	ldr	r4, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80039ea:	4283      	cmp	r3, r0
 80039ec:	bf08      	it	eq
 80039ee:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80039f0:	b923      	cbnz	r3, 80039fc <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
 80039f2:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
 80039f6:	6021      	str	r1, [r4, #0]
	list->tail = node;
 80039f8:	6251      	str	r1, [r2, #36]	; 0x24
}
 80039fa:	e00c      	b.n	8003a16 <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
 80039fc:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
 8003a00:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
 8003a04:	42b5      	cmp	r5, r6
 8003a06:	d00e      	beq.n	8003a26 <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
 8003a08:	42ae      	cmp	r6, r5
 8003a0a:	dd0c      	ble.n	8003a26 <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
 8003a0c:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
 8003a0e:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
 8003a12:	6001      	str	r1, [r0, #0]
	successor->prev = node;
 8003a14:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
 8003a16:	6890      	ldr	r0, [r2, #8]
 8003a18:	1a43      	subs	r3, r0, r1
 8003a1a:	4258      	negs	r0, r3
}
 8003a1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
 8003a20:	4158      	adcs	r0, r3
 8003a22:	f7ff bfaf 	b.w	8003984 <update_cache>
	return (node == list->tail) ? NULL : node->next;
 8003a26:	429c      	cmp	r4, r3
 8003a28:	d0e3      	beq.n	80039f2 <move_thread_to_end_of_prio_q+0x32>
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	e7e0      	b.n	80039f0 <move_thread_to_end_of_prio_q+0x30>
 8003a2e:	bf00      	nop
 8003a30:	20000380 	.word	0x20000380

08003a34 <ready_thread>:
{
 8003a34:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
 8003a36:	f990 300d 	ldrsb.w	r3, [r0, #13]
 8003a3a:	7b42      	ldrb	r2, [r0, #13]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	db29      	blt.n	8003a94 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 8003a40:	06d3      	lsls	r3, r2, #27
 8003a42:	d127      	bne.n	8003a94 <ready_thread+0x60>
	return node->next != NULL;
 8003a44:	6983      	ldr	r3, [r0, #24]
 8003a46:	bb2b      	cbnz	r3, 8003a94 <ready_thread+0x60>
	return list->head == list;
 8003a48:	4913      	ldr	r1, [pc, #76]	; (8003a98 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
 8003a4a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003a4e:	7342      	strb	r2, [r0, #13]
 8003a50:	460a      	mov	r2, r1
 8003a52:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8003a56:	4294      	cmp	r4, r2
 8003a58:	bf18      	it	ne
 8003a5a:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
 8003a5c:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8003a5e:	b923      	cbnz	r3, 8003a6a <ready_thread+0x36>
	node->prev = tail;
 8003a60:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
 8003a64:	6020      	str	r0, [r4, #0]
	list->tail = node;
 8003a66:	6248      	str	r0, [r1, #36]	; 0x24
}
 8003a68:	e00c      	b.n	8003a84 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
 8003a6a:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
 8003a6e:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
 8003a72:	42b5      	cmp	r5, r6
 8003a74:	d00a      	beq.n	8003a8c <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
 8003a76:	42ae      	cmp	r6, r5
 8003a78:	dd08      	ble.n	8003a8c <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
 8003a7a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 8003a7c:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
 8003a80:	6010      	str	r0, [r2, #0]
	successor->prev = node;
 8003a82:	6058      	str	r0, [r3, #4]
}
 8003a84:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
 8003a86:	2000      	movs	r0, #0
 8003a88:	f7ff bf7c 	b.w	8003984 <update_cache>
	return (node == list->tail) ? NULL : node->next;
 8003a8c:	42a3      	cmp	r3, r4
 8003a8e:	d0e7      	beq.n	8003a60 <ready_thread+0x2c>
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	e7e4      	b.n	8003a5e <ready_thread+0x2a>
}
 8003a94:	bc70      	pop	{r4, r5, r6}
 8003a96:	4770      	bx	lr
 8003a98:	20000380 	.word	0x20000380

08003a9c <k_sched_time_slice_set>:
{
 8003a9c:	b510      	push	{r4, lr}
	__asm__ volatile(
 8003a9e:	f04f 0320 	mov.w	r3, #32
 8003aa2:	f3ef 8411 	mrs	r4, BASEPRI
 8003aa6:	f383 8812 	msr	BASEPRI_MAX, r3
 8003aaa:	f3bf 8f6f 	isb	sy
			return ((uint32_t)t) * (to_hz / from_hz);
 8003aae:	230a      	movs	r3, #10
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
 8003ab0:	2800      	cmp	r0, #0
 8003ab2:	fb00 f303 	mul.w	r3, r0, r3
 8003ab6:	dd02      	ble.n	8003abe <k_sched_time_slice_set+0x22>
			slice_ticks = MAX(2, slice_ticks);
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	bfb8      	it	lt
 8003abc:	2302      	movlt	r3, #2
		_current_cpu->slice_ticks = 0;
 8003abe:	4a07      	ldr	r2, [pc, #28]	; (8003adc <k_sched_time_slice_set+0x40>)
 8003ac0:	2000      	movs	r0, #0
 8003ac2:	6110      	str	r0, [r2, #16]
		slice_ticks = k_ms_to_ticks_ceil32(slice);
 8003ac4:	4806      	ldr	r0, [pc, #24]	; (8003ae0 <k_sched_time_slice_set+0x44>)
 8003ac6:	6003      	str	r3, [r0, #0]
		slice_max_prio = prio;
 8003ac8:	4b06      	ldr	r3, [pc, #24]	; (8003ae4 <k_sched_time_slice_set+0x48>)
		z_reset_time_slice(_current);
 8003aca:	6890      	ldr	r0, [r2, #8]
		slice_max_prio = prio;
 8003acc:	6019      	str	r1, [r3, #0]
		z_reset_time_slice(_current);
 8003ace:	f7ff ff45 	bl	800395c <z_reset_time_slice>
	__asm__ volatile(
 8003ad2:	f384 8811 	msr	BASEPRI, r4
 8003ad6:	f3bf 8f6f 	isb	sy
}
 8003ada:	bd10      	pop	{r4, pc}
 8003adc:	20000380 	.word	0x20000380
 8003ae0:	200003b4 	.word	0x200003b4
 8003ae4:	200003b0 	.word	0x200003b0

08003ae8 <z_time_slice>:
{
 8003ae8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 8003aea:	f04f 0320 	mov.w	r3, #32
 8003aee:	f3ef 8511 	mrs	r5, BASEPRI
 8003af2:	f383 8812 	msr	BASEPRI_MAX, r3
 8003af6:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
 8003afa:	4b17      	ldr	r3, [pc, #92]	; (8003b58 <z_time_slice+0x70>)
 8003afc:	4a17      	ldr	r2, [pc, #92]	; (8003b5c <z_time_slice+0x74>)
 8003afe:	689c      	ldr	r4, [r3, #8]
 8003b00:	6811      	ldr	r1, [r2, #0]
 8003b02:	428c      	cmp	r4, r1
 8003b04:	d107      	bne.n	8003b16 <z_time_slice+0x2e>
	z_reset_time_slice(curr);
 8003b06:	4620      	mov	r0, r4
 8003b08:	f7ff ff28 	bl	800395c <z_reset_time_slice>
	__asm__ volatile(
 8003b0c:	f385 8811 	msr	BASEPRI, r5
 8003b10:	f3bf 8f6f 	isb	sy
}
 8003b14:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
 8003b16:	2100      	movs	r1, #0
 8003b18:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
 8003b1a:	4a11      	ldr	r2, [pc, #68]	; (8003b60 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
 8003b1c:	6812      	ldr	r2, [r2, #0]
 8003b1e:	b1c2      	cbz	r2, 8003b52 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
 8003b20:	89e2      	ldrh	r2, [r4, #14]
 8003b22:	2a7f      	cmp	r2, #127	; 0x7f
 8003b24:	d815      	bhi.n	8003b52 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
 8003b26:	7b62      	ldrb	r2, [r4, #13]
 8003b28:	06d2      	lsls	r2, r2, #27
 8003b2a:	d112      	bne.n	8003b52 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
 8003b2c:	4a0d      	ldr	r2, [pc, #52]	; (8003b64 <z_time_slice+0x7c>)
 8003b2e:	f994 100e 	ldrsb.w	r1, [r4, #14]
 8003b32:	6812      	ldr	r2, [r2, #0]
 8003b34:	4291      	cmp	r1, r2
 8003b36:	db0c      	blt.n	8003b52 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
 8003b38:	4a0b      	ldr	r2, [pc, #44]	; (8003b68 <z_time_slice+0x80>)
 8003b3a:	4294      	cmp	r4, r2
 8003b3c:	d009      	beq.n	8003b52 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
 8003b3e:	691a      	ldr	r2, [r3, #16]
 8003b40:	4282      	cmp	r2, r0
 8003b42:	dc03      	bgt.n	8003b4c <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
 8003b44:	4620      	mov	r0, r4
 8003b46:	f7ff ff3b 	bl	80039c0 <move_thread_to_end_of_prio_q>
 8003b4a:	e7dc      	b.n	8003b06 <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
 8003b4c:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
 8003b4e:	611a      	str	r2, [r3, #16]
 8003b50:	e7dc      	b.n	8003b0c <z_time_slice+0x24>
 8003b52:	2200      	movs	r2, #0
 8003b54:	e7fb      	b.n	8003b4e <z_time_slice+0x66>
 8003b56:	bf00      	nop
 8003b58:	20000380 	.word	0x20000380
 8003b5c:	200003ac 	.word	0x200003ac
 8003b60:	200003b4 	.word	0x200003b4
 8003b64:	200003b0 	.word	0x200003b0
 8003b68:	20000058 	.word	0x20000058

08003b6c <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 8003b6c:	b949      	cbnz	r1, 8003b82 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b6e:	f3ef 8005 	mrs	r0, IPSR
 8003b72:	b930      	cbnz	r0, 8003b82 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
 8003b74:	4b05      	ldr	r3, [pc, #20]	; (8003b8c <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
 8003b76:	69da      	ldr	r2, [r3, #28]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d001      	beq.n	8003b82 <z_reschedule+0x16>
	ret = arch_swap(key);
 8003b7e:	f7fe b935 	b.w	8001dec <arch_swap>
 8003b82:	f381 8811 	msr	BASEPRI, r1
 8003b86:	f3bf 8f6f 	isb	sy
}
 8003b8a:	4770      	bx	lr
 8003b8c:	20000380 	.word	0x20000380

08003b90 <z_sched_start>:
{
 8003b90:	b510      	push	{r4, lr}
	__asm__ volatile(
 8003b92:	f04f 0220 	mov.w	r2, #32
 8003b96:	f3ef 8411 	mrs	r4, BASEPRI
 8003b9a:	f382 8812 	msr	BASEPRI_MAX, r2
 8003b9e:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
 8003ba2:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
 8003ba4:	0751      	lsls	r1, r2, #29
 8003ba6:	d404      	bmi.n	8003bb2 <z_sched_start+0x22>
	__asm__ volatile(
 8003ba8:	f384 8811 	msr	BASEPRI, r4
 8003bac:	f3bf 8f6f 	isb	sy
}
 8003bb0:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8003bb2:	f022 0204 	bic.w	r2, r2, #4
 8003bb6:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
 8003bb8:	f7ff ff3c 	bl	8003a34 <ready_thread>
	z_reschedule(&sched_spinlock, key);
 8003bbc:	4621      	mov	r1, r4
 8003bbe:	4802      	ldr	r0, [pc, #8]	; (8003bc8 <z_sched_start+0x38>)
}
 8003bc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
 8003bc4:	f7ff bfd2 	b.w	8003b6c <z_reschedule>
 8003bc8:	200003bd 	.word	0x200003bd

08003bcc <k_sched_lock>:
	__asm__ volatile(
 8003bcc:	f04f 0320 	mov.w	r3, #32
 8003bd0:	f3ef 8111 	mrs	r1, BASEPRI
 8003bd4:	f383 8812 	msr	BASEPRI_MAX, r3
 8003bd8:	f3bf 8f6f 	isb	sy
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
 8003bdc:	4b04      	ldr	r3, [pc, #16]	; (8003bf0 <k_sched_lock+0x24>)
 8003bde:	689a      	ldr	r2, [r3, #8]
 8003be0:	7bd3      	ldrb	r3, [r2, #15]
 8003be2:	3b01      	subs	r3, #1
 8003be4:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
 8003be6:	f381 8811 	msr	BASEPRI, r1
 8003bea:	f3bf 8f6f 	isb	sy
}
 8003bee:	4770      	bx	lr
 8003bf0:	20000380 	.word	0x20000380

08003bf4 <k_sched_unlock>:
{
 8003bf4:	b510      	push	{r4, lr}
	__asm__ volatile(
 8003bf6:	f04f 0320 	mov.w	r3, #32
 8003bfa:	f3ef 8411 	mrs	r4, BASEPRI
 8003bfe:	f383 8812 	msr	BASEPRI_MAX, r3
 8003c02:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
 8003c06:	4b08      	ldr	r3, [pc, #32]	; (8003c28 <k_sched_unlock+0x34>)
 8003c08:	689a      	ldr	r2, [r3, #8]
 8003c0a:	7bd3      	ldrb	r3, [r2, #15]
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
 8003c10:	2000      	movs	r0, #0
 8003c12:	f7ff feb7 	bl	8003984 <update_cache>
	__asm__ volatile(
 8003c16:	f384 8811 	msr	BASEPRI, r4
 8003c1a:	f3bf 8f6f 	isb	sy
}
 8003c1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
 8003c22:	f001 b807 	b.w	8004c34 <z_reschedule_unlocked>
 8003c26:	bf00      	nop
 8003c28:	20000380 	.word	0x20000380

08003c2c <z_sched_init>:
	list->head = (sys_dnode_t *)list;
 8003c2c:	4b04      	ldr	r3, [pc, #16]	; (8003c40 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
 8003c2e:	2100      	movs	r1, #0
 8003c30:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
 8003c34:	e9c3 2208 	strd	r2, r2, [r3, #32]
 8003c38:	4608      	mov	r0, r1
 8003c3a:	f7ff bf2f 	b.w	8003a9c <k_sched_time_slice_set>
 8003c3e:	bf00      	nop
 8003c40:	20000380 	.word	0x20000380

08003c44 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
 8003c44:	4b01      	ldr	r3, [pc, #4]	; (8003c4c <z_impl_z_current_get+0x8>)
 8003c46:	6898      	ldr	r0, [r3, #8]
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	20000380 	.word	0x20000380

08003c50 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
 8003c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c54:	4604      	mov	r4, r0
	__asm__ volatile(
 8003c56:	f04f 0320 	mov.w	r3, #32
 8003c5a:	f3ef 8611 	mrs	r6, BASEPRI
 8003c5e:	f383 8812 	msr	BASEPRI_MAX, r3
 8003c62:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
 8003c66:	7b03      	ldrb	r3, [r0, #12]
 8003c68:	07d9      	lsls	r1, r3, #31
 8003c6a:	d50b      	bpl.n	8003c84 <z_thread_abort+0x34>
	__asm__ volatile(
 8003c6c:	f386 8811 	msr	BASEPRI, r6
 8003c70:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
 8003c74:	4040      	eors	r0, r0
 8003c76:	f380 8811 	msr	BASEPRI, r0
 8003c7a:	f04f 0004 	mov.w	r0, #4
 8003c7e:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
 8003c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
 8003c84:	7b43      	ldrb	r3, [r0, #13]
 8003c86:	071a      	lsls	r2, r3, #28
 8003c88:	d504      	bpl.n	8003c94 <z_thread_abort+0x44>
 8003c8a:	f386 8811 	msr	BASEPRI, r6
 8003c8e:	f3bf 8f6f 	isb	sy
 8003c92:	e7f5      	b.n	8003c80 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
 8003c94:	f023 0220 	bic.w	r2, r3, #32
 8003c98:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
 8003c9c:	09d2      	lsrs	r2, r2, #7
 8003c9e:	d120      	bne.n	8003ce2 <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
 8003ca0:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
 8003ca2:	68a3      	ldr	r3, [r4, #8]
 8003ca4:	b113      	cbz	r3, 8003cac <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
 8003ca6:	4620      	mov	r0, r4
 8003ca8:	f000 ff7c 	bl	8004ba4 <unpend_thread_no_timeout>
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 8003cac:	f104 0018 	add.w	r0, r4, #24
 8003cb0:	f000 ffca 	bl	8004c48 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
 8003cb4:	f104 0758 	add.w	r7, r4, #88	; 0x58
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 8003cb8:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
 8003cbc:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8003cbe:	42bd      	cmp	r5, r7
 8003cc0:	d000      	beq.n	8003cc4 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 8003cc2:	b9b5      	cbnz	r5, 8003cf2 <z_thread_abort+0xa2>
		update_cache(1);
 8003cc4:	2001      	movs	r0, #1
 8003cc6:	f7ff fe5d 	bl	8003984 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
 8003cca:	4b10      	ldr	r3, [pc, #64]	; (8003d0c <z_thread_abort+0xbc>)
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	42a3      	cmp	r3, r4
 8003cd0:	d1db      	bne.n	8003c8a <z_thread_abort+0x3a>
 8003cd2:	f3ef 8305 	mrs	r3, IPSR
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d1d7      	bne.n	8003c8a <z_thread_abort+0x3a>
 8003cda:	4630      	mov	r0, r6
 8003cdc:	f7fe f886 	bl	8001dec <arch_swap>
	return ret;
 8003ce0:	e7d3      	b.n	8003c8a <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8003ce2:	f003 035f 	and.w	r3, r3, #95	; 0x5f
 8003ce6:	f043 0308 	orr.w	r3, r3, #8
 8003cea:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 8003cec:	f000 ff52 	bl	8004b94 <sys_dlist_remove>
}
 8003cf0:	e7d7      	b.n	8003ca2 <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
 8003cf2:	4628      	mov	r0, r5
 8003cf4:	f000 ff56 	bl	8004ba4 <unpend_thread_no_timeout>
 8003cf8:	f105 0018 	add.w	r0, r5, #24
 8003cfc:	f000 ffa4 	bl	8004c48 <z_abort_timeout>
 8003d00:	f8c5 806c 	str.w	r8, [r5, #108]	; 0x6c
		ready_thread(thread);
 8003d04:	4628      	mov	r0, r5
 8003d06:	f7ff fe95 	bl	8003a34 <ready_thread>
 8003d0a:	e7d7      	b.n	8003cbc <z_thread_abort+0x6c>
 8003d0c:	20000380 	.word	0x20000380

08003d10 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
 8003d10:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
 8003d12:	4806      	ldr	r0, [pc, #24]	; (8003d2c <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
 8003d14:	4a06      	ldr	r2, [pc, #24]	; (8003d30 <z_data_copy+0x20>)
 8003d16:	4907      	ldr	r1, [pc, #28]	; (8003d34 <z_data_copy+0x24>)
 8003d18:	1a12      	subs	r2, r2, r0
 8003d1a:	f000 ff2d 	bl	8004b78 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 8003d1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
 8003d22:	4a05      	ldr	r2, [pc, #20]	; (8003d38 <z_data_copy+0x28>)
 8003d24:	4905      	ldr	r1, [pc, #20]	; (8003d3c <z_data_copy+0x2c>)
 8003d26:	4806      	ldr	r0, [pc, #24]	; (8003d40 <z_data_copy+0x30>)
 8003d28:	f000 bf26 	b.w	8004b78 <z_early_memcpy>
 8003d2c:	20000000 	.word	0x20000000
 8003d30:	20000057 	.word	0x20000057
 8003d34:	08005ea8 	.word	0x08005ea8
 8003d38:	00000000 	.word	0x00000000
 8003d3c:	08005ea8 	.word	0x08005ea8
 8003d40:	20000000 	.word	0x20000000

08003d44 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 8003d44:	4b03      	ldr	r3, [pc, #12]	; (8003d54 <elapsed+0x10>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	b90b      	cbnz	r3, 8003d4e <elapsed+0xa>
 8003d4a:	f7fe bdbf 	b.w	80028cc <sys_clock_elapsed>
}
 8003d4e:	2000      	movs	r0, #0
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	200003b8 	.word	0x200003b8

08003d58 <next_timeout>:

static int32_t next_timeout(void)
{
 8003d58:	b510      	push	{r4, lr}
	return list->head == list;
 8003d5a:	4b11      	ldr	r3, [pc, #68]	; (8003da0 <next_timeout+0x48>)
 8003d5c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8003d5e:	429c      	cmp	r4, r3
 8003d60:	d10a      	bne.n	8003d78 <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
 8003d62:	f7ff ffef 	bl	8003d44 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
 8003d66:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
 8003d6a:	4b0e      	ldr	r3, [pc, #56]	; (8003da4 <next_timeout+0x4c>)
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	b113      	cbz	r3, 8003d76 <next_timeout+0x1e>
 8003d70:	4298      	cmp	r0, r3
 8003d72:	bfa8      	it	ge
 8003d74:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
 8003d76:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
 8003d78:	f7ff ffe4 	bl	8003d44 <elapsed>
	if ((to == NULL) ||
 8003d7c:	2c00      	cmp	r4, #0
 8003d7e:	d0f2      	beq.n	8003d66 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
 8003d80:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8003d84:	1a1b      	subs	r3, r3, r0
 8003d86:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
 8003d8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d8e:	f172 0100 	sbcs.w	r1, r2, #0
 8003d92:	dae8      	bge.n	8003d66 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
 8003d94:	2a00      	cmp	r2, #0
 8003d96:	bfac      	ite	ge
 8003d98:	4618      	movge	r0, r3
 8003d9a:	2000      	movlt	r0, #0
 8003d9c:	e7e5      	b.n	8003d6a <next_timeout+0x12>
 8003d9e:	bf00      	nop
 8003da0:	20000024 	.word	0x20000024
 8003da4:	20000380 	.word	0x20000380

08003da8 <remove_timeout>:
{
 8003da8:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8003daa:	b170      	cbz	r0, 8003dca <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
 8003dac:	4b0b      	ldr	r3, [pc, #44]	; (8003ddc <remove_timeout+0x34>)
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	4298      	cmp	r0, r3
 8003db2:	d00a      	beq.n	8003dca <remove_timeout+0x22>
 8003db4:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
 8003db6:	b143      	cbz	r3, 8003dca <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
 8003db8:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
 8003dbc:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
 8003dc0:	1912      	adds	r2, r2, r4
 8003dc2:	eb41 0105 	adc.w	r1, r1, r5
 8003dc6:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
 8003dca:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
 8003dce:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 8003dd0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8003dd2:	2300      	movs	r3, #0
	node->prev = NULL;
 8003dd4:	e9c0 3300 	strd	r3, r3, [r0]
}
 8003dd8:	bd30      	pop	{r4, r5, pc}
 8003dda:	bf00      	nop
 8003ddc:	20000024 	.word	0x20000024

08003de0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8003de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de4:	bf08      	it	eq
 8003de6:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
 8003dea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dec:	4604      	mov	r4, r0
 8003dee:	461d      	mov	r5, r3
 8003df0:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8003df2:	d061      	beq.n	8003eb8 <z_add_timeout+0xd8>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
 8003df4:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
 8003df6:	f04f 0320 	mov.w	r3, #32
 8003dfa:	f3ef 8711 	mrs	r7, BASEPRI
 8003dfe:	f383 8812 	msr	BASEPRI_MAX, r3
 8003e02:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
 8003e06:	3201      	adds	r2, #1
 8003e08:	f175 33ff 	sbcs.w	r3, r5, #4294967295
 8003e0c:	da24      	bge.n	8003e58 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
 8003e0e:	4930      	ldr	r1, [pc, #192]	; (8003ed0 <z_add_timeout+0xf0>)
 8003e10:	e9d1 2000 	ldrd	r2, r0, [r1]
 8003e14:	f06f 0301 	mvn.w	r3, #1
 8003e18:	1a9b      	subs	r3, r3, r2
 8003e1a:	f04f 32ff 	mov.w	r2, #4294967295
 8003e1e:	eb62 0000 	sbc.w	r0, r2, r0
 8003e22:	1b9e      	subs	r6, r3, r6
 8003e24:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
 8003e28:	2e01      	cmp	r6, #1
 8003e2a:	f170 0300 	sbcs.w	r3, r0, #0
 8003e2e:	da01      	bge.n	8003e34 <z_add_timeout+0x54>
 8003e30:	2601      	movs	r6, #1
 8003e32:	2000      	movs	r0, #0
 8003e34:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
 8003e38:	4e26      	ldr	r6, [pc, #152]	; (8003ed4 <z_add_timeout+0xf4>)
 8003e3a:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
 8003e3e:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8003e40:	45b4      	cmp	ip, r6
 8003e42:	bf08      	it	eq
 8003e44:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
 8003e48:	f1bc 0f00 	cmp.w	ip, #0
 8003e4c:	d10d      	bne.n	8003e6a <z_add_timeout+0x8a>
	node->prev = tail;
 8003e4e:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
 8003e52:	602c      	str	r4, [r5, #0]
	list->tail = node;
 8003e54:	6074      	str	r4, [r6, #4]
}
 8003e56:	e01c      	b.n	8003e92 <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
 8003e58:	f7ff ff74 	bl	8003d44 <elapsed>
 8003e5c:	3601      	adds	r6, #1
 8003e5e:	f145 0500 	adc.w	r5, r5, #0
 8003e62:	1836      	adds	r6, r6, r0
 8003e64:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
 8003e68:	e7e4      	b.n	8003e34 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
 8003e6a:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
 8003e6e:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
 8003e72:	4293      	cmp	r3, r2
 8003e74:	eb71 0e00 	sbcs.w	lr, r1, r0
 8003e78:	da1f      	bge.n	8003eba <z_add_timeout+0xda>
				t->dticks -= to->dticks;
 8003e7a:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
 8003e7c:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8003e80:	eb60 0001 	sbc.w	r0, r0, r1
 8003e84:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
 8003e88:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
 8003e8c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 8003e8e:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
 8003e92:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8003e94:	42b3      	cmp	r3, r6
 8003e96:	d00b      	beq.n	8003eb0 <z_add_timeout+0xd0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
 8003e98:	429c      	cmp	r4, r3
 8003e9a:	d109      	bne.n	8003eb0 <z_add_timeout+0xd0>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
 8003e9c:	f7ff ff5c 	bl	8003d58 <next_timeout>

			if (next_time == 0 ||
 8003ea0:	b118      	cbz	r0, 8003eaa <z_add_timeout+0xca>
			    _current_cpu->slice_ticks != next_time) {
 8003ea2:	4b0d      	ldr	r3, [pc, #52]	; (8003ed8 <z_add_timeout+0xf8>)
			if (next_time == 0 ||
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	4283      	cmp	r3, r0
 8003ea8:	d002      	beq.n	8003eb0 <z_add_timeout+0xd0>
				sys_clock_set_timeout(next_time, false);
 8003eaa:	2100      	movs	r1, #0
 8003eac:	f7fe fc9e 	bl	80027ec <sys_clock_set_timeout>
	__asm__ volatile(
 8003eb0:	f387 8811 	msr	BASEPRI, r7
 8003eb4:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
 8003eb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
 8003eba:	1a9b      	subs	r3, r3, r2
 8003ebc:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
 8003ec0:	45ac      	cmp	ip, r5
 8003ec2:	e9c4 3104 	strd	r3, r1, [r4, #16]
 8003ec6:	d0c2      	beq.n	8003e4e <z_add_timeout+0x6e>
 8003ec8:	f8dc c000 	ldr.w	ip, [ip]
 8003ecc:	e7bc      	b.n	8003e48 <z_add_timeout+0x68>
 8003ece:	bf00      	nop
 8003ed0:	200001c8 	.word	0x200001c8
 8003ed4:	20000024 	.word	0x20000024
 8003ed8:	20000380 	.word	0x20000380

08003edc <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
 8003edc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ee0:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
 8003ee2:	f7ff fe01 	bl	8003ae8 <z_time_slice>
	__asm__ volatile(
 8003ee6:	f04f 0320 	mov.w	r3, #32
 8003eea:	f3ef 8711 	mrs	r7, BASEPRI
 8003eee:	f383 8812 	msr	BASEPRI_MAX, r3
 8003ef2:	f3bf 8f6f 	isb	sy
	return list->head == list;
 8003ef6:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 8003fac <sys_clock_announce+0xd0>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
 8003efa:	4e2a      	ldr	r6, [pc, #168]	; (8003fa4 <sys_clock_announce+0xc8>)
 8003efc:	f8d9 0000 	ldr.w	r0, [r9]
 8003f00:	6034      	str	r4, [r6, #0]
	for (t = first();
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
 8003f02:	4c29      	ldr	r4, [pc, #164]	; (8003fa8 <sys_clock_announce+0xcc>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8003f04:	4548      	cmp	r0, r9
 8003f06:	bf08      	it	eq
 8003f08:	2000      	moveq	r0, #0
		t->dticks = 0;
 8003f0a:	f04f 0a00 	mov.w	sl, #0
 8003f0e:	f04f 0b00 	mov.w	fp, #0
		curr_tick += dt;
 8003f12:	e9d4 1e00 	ldrd	r1, lr, [r4]
	     (t != NULL) && (t->dticks <= announce_remaining);
 8003f16:	6833      	ldr	r3, [r6, #0]
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
 8003f18:	463d      	mov	r5, r7
 8003f1a:	b388      	cbz	r0, 8003f80 <sys_clock_announce+0xa4>
 8003f1c:	e9d0 8704 	ldrd	r8, r7, [r0, #16]
 8003f20:	ea4f 7ce3 	mov.w	ip, r3, asr #31
 8003f24:	4543      	cmp	r3, r8
 8003f26:	eb7c 0207 	sbcs.w	r2, ip, r7
 8003f2a:	da06      	bge.n	8003f3a <sys_clock_announce+0x5e>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
 8003f2c:	ebb8 0203 	subs.w	r2, r8, r3
 8003f30:	eb67 070c 	sbc.w	r7, r7, ip
 8003f34:	e9c0 2704 	strd	r2, r7, [r0, #16]
 8003f38:	e022      	b.n	8003f80 <sys_clock_announce+0xa4>
		curr_tick += dt;
 8003f3a:	eb18 0101 	adds.w	r1, r8, r1
 8003f3e:	eb4e 73e8 	adc.w	r3, lr, r8, asr #31
		t->dticks = 0;
 8003f42:	e9c0 ab04 	strd	sl, fp, [r0, #16]
		curr_tick += dt;
 8003f46:	e9c4 1300 	strd	r1, r3, [r4]
		remove_timeout(t);
 8003f4a:	f7ff ff2d 	bl	8003da8 <remove_timeout>
	__asm__ volatile(
 8003f4e:	f385 8811 	msr	BASEPRI, r5
 8003f52:	f3bf 8f6f 	isb	sy
		t->fn(t);
 8003f56:	6883      	ldr	r3, [r0, #8]
 8003f58:	4798      	blx	r3
	__asm__ volatile(
 8003f5a:	f04f 0320 	mov.w	r3, #32
 8003f5e:	f3ef 8511 	mrs	r5, BASEPRI
 8003f62:	f383 8812 	msr	BASEPRI_MAX, r3
 8003f66:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
 8003f6a:	6833      	ldr	r3, [r6, #0]
	return list->head == list;
 8003f6c:	f8d9 0000 	ldr.w	r0, [r9]
 8003f70:	eba3 0308 	sub.w	r3, r3, r8
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8003f74:	4548      	cmp	r0, r9
	k.key = arch_irq_lock();
 8003f76:	462f      	mov	r7, r5
 8003f78:	6033      	str	r3, [r6, #0]
 8003f7a:	d1ca      	bne.n	8003f12 <sys_clock_announce+0x36>
		curr_tick += dt;
 8003f7c:	e9d4 1e00 	ldrd	r1, lr, [r4]
	}

	curr_tick += announce_remaining;
 8003f80:	1859      	adds	r1, r3, r1
 8003f82:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 8003f86:	e9c4 1300 	strd	r1, r3, [r4]
	announce_remaining = 0;
 8003f8a:	2400      	movs	r4, #0
 8003f8c:	6034      	str	r4, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
 8003f8e:	f7ff fee3 	bl	8003d58 <next_timeout>
 8003f92:	4621      	mov	r1, r4
 8003f94:	f7fe fc2a 	bl	80027ec <sys_clock_set_timeout>
	__asm__ volatile(
 8003f98:	f385 8811 	msr	BASEPRI, r5
 8003f9c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
 8003fa0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fa4:	200003b8 	.word	0x200003b8
 8003fa8:	200001c8 	.word	0x200001c8
 8003fac:	20000024 	.word	0x20000024

08003fb0 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
 8003fb0:	4801      	ldr	r0, [pc, #4]	; (8003fb8 <boot_banner+0x8>)
 8003fb2:	f000 b896 	b.w	80040e2 <printk>
 8003fb6:	bf00      	nop
 8003fb8:	08005e64 	.word	0x08005e64

08003fbc <sqrtf>:
 8003fbc:	b508      	push	{r3, lr}
 8003fbe:	ed2d 8b02 	vpush	{d8}
 8003fc2:	eeb0 8a40 	vmov.f32	s16, s0
 8003fc6:	f000 f821 	bl	800400c <__ieee754_sqrtf>
 8003fca:	4b0e      	ldr	r3, [pc, #56]	; (8004004 <sqrtf+0x48>)
 8003fcc:	f993 3000 	ldrsb.w	r3, [r3]
 8003fd0:	3301      	adds	r3, #1
 8003fd2:	d00b      	beq.n	8003fec <sqrtf+0x30>
 8003fd4:	eeb4 8a48 	vcmp.f32	s16, s16
 8003fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fdc:	d606      	bvs.n	8003fec <sqrtf+0x30>
 8003fde:	eddf 8a0a 	vldr	s17, [pc, #40]	; 8004008 <sqrtf+0x4c>
 8003fe2:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8003fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fea:	d402      	bmi.n	8003ff2 <sqrtf+0x36>
 8003fec:	ecbd 8b02 	vpop	{d8}
 8003ff0:	bd08      	pop	{r3, pc}
 8003ff2:	f000 f8e9 	bl	80041c8 <__errno>
 8003ff6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8003ffa:	ecbd 8b02 	vpop	{d8}
 8003ffe:	2321      	movs	r3, #33	; 0x21
 8004000:	6003      	str	r3, [r0, #0]
 8004002:	bd08      	pop	{r3, pc}
 8004004:	2000003c 	.word	0x2000003c
 8004008:	00000000 	.word	0x00000000

0800400c <__ieee754_sqrtf>:
 800400c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop

08004014 <memset>:
 8004014:	0783      	lsls	r3, r0, #30
 8004016:	b530      	push	{r4, r5, lr}
 8004018:	d047      	beq.n	80040aa <memset+0x96>
 800401a:	1e54      	subs	r4, r2, #1
 800401c:	2a00      	cmp	r2, #0
 800401e:	d03e      	beq.n	800409e <memset+0x8a>
 8004020:	b2ca      	uxtb	r2, r1
 8004022:	4603      	mov	r3, r0
 8004024:	e001      	b.n	800402a <memset+0x16>
 8004026:	3c01      	subs	r4, #1
 8004028:	d339      	bcc.n	800409e <memset+0x8a>
 800402a:	f803 2b01 	strb.w	r2, [r3], #1
 800402e:	079d      	lsls	r5, r3, #30
 8004030:	d1f9      	bne.n	8004026 <memset+0x12>
 8004032:	2c03      	cmp	r4, #3
 8004034:	d92c      	bls.n	8004090 <memset+0x7c>
 8004036:	b2cd      	uxtb	r5, r1
 8004038:	eb05 2505 	add.w	r5, r5, r5, lsl #8
 800403c:	2c0f      	cmp	r4, #15
 800403e:	eb05 4505 	add.w	r5, r5, r5, lsl #16
 8004042:	d935      	bls.n	80040b0 <memset+0x9c>
 8004044:	f1a4 0210 	sub.w	r2, r4, #16
 8004048:	f022 0c0f 	bic.w	ip, r2, #15
 800404c:	f103 0e10 	add.w	lr, r3, #16
 8004050:	44e6      	add	lr, ip
 8004052:	ea4f 1c12 	mov.w	ip, r2, lsr #4
 8004056:	461a      	mov	r2, r3
 8004058:	6015      	str	r5, [r2, #0]
 800405a:	6055      	str	r5, [r2, #4]
 800405c:	6095      	str	r5, [r2, #8]
 800405e:	60d5      	str	r5, [r2, #12]
 8004060:	3210      	adds	r2, #16
 8004062:	4572      	cmp	r2, lr
 8004064:	d1f8      	bne.n	8004058 <memset+0x44>
 8004066:	f10c 0201 	add.w	r2, ip, #1
 800406a:	f014 0f0c 	tst.w	r4, #12
 800406e:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8004072:	f004 0c0f 	and.w	ip, r4, #15
 8004076:	d013      	beq.n	80040a0 <memset+0x8c>
 8004078:	f1ac 0304 	sub.w	r3, ip, #4
 800407c:	f023 0303 	bic.w	r3, r3, #3
 8004080:	3304      	adds	r3, #4
 8004082:	4413      	add	r3, r2
 8004084:	f842 5b04 	str.w	r5, [r2], #4
 8004088:	429a      	cmp	r2, r3
 800408a:	d1fb      	bne.n	8004084 <memset+0x70>
 800408c:	f00c 0403 	and.w	r4, ip, #3
 8004090:	b12c      	cbz	r4, 800409e <memset+0x8a>
 8004092:	b2c9      	uxtb	r1, r1
 8004094:	441c      	add	r4, r3
 8004096:	f803 1b01 	strb.w	r1, [r3], #1
 800409a:	429c      	cmp	r4, r3
 800409c:	d1fb      	bne.n	8004096 <memset+0x82>
 800409e:	bd30      	pop	{r4, r5, pc}
 80040a0:	4664      	mov	r4, ip
 80040a2:	4613      	mov	r3, r2
 80040a4:	2c00      	cmp	r4, #0
 80040a6:	d1f4      	bne.n	8004092 <memset+0x7e>
 80040a8:	e7f9      	b.n	800409e <memset+0x8a>
 80040aa:	4603      	mov	r3, r0
 80040ac:	4614      	mov	r4, r2
 80040ae:	e7c0      	b.n	8004032 <memset+0x1e>
 80040b0:	461a      	mov	r2, r3
 80040b2:	46a4      	mov	ip, r4
 80040b4:	e7e0      	b.n	8004078 <memset+0x64>
 80040b6:	bf00      	nop

080040b8 <strnlen>:
 80040b8:	b171      	cbz	r1, 80040d8 <strnlen+0x20>
 80040ba:	4603      	mov	r3, r0
 80040bc:	eb00 0c01 	add.w	ip, r0, r1
 80040c0:	e001      	b.n	80040c6 <strnlen+0xe>
 80040c2:	4563      	cmp	r3, ip
 80040c4:	d006      	beq.n	80040d4 <strnlen+0x1c>
 80040c6:	461a      	mov	r2, r3
 80040c8:	3301      	adds	r3, #1
 80040ca:	7811      	ldrb	r1, [r2, #0]
 80040cc:	2900      	cmp	r1, #0
 80040ce:	d1f8      	bne.n	80040c2 <strnlen+0xa>
 80040d0:	1a10      	subs	r0, r2, r0
 80040d2:	4770      	bx	lr
 80040d4:	1a18      	subs	r0, r3, r0
 80040d6:	4770      	bx	lr
 80040d8:	4608      	mov	r0, r1
 80040da:	4770      	bx	lr

080040dc <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
 80040dc:	4770      	bx	lr

080040de <arch_printk_char_out>:
}
 80040de:	2000      	movs	r0, #0
 80040e0:	4770      	bx	lr

080040e2 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
 80040e2:	b40f      	push	{r0, r1, r2, r3}
 80040e4:	b507      	push	{r0, r1, r2, lr}
 80040e6:	a904      	add	r1, sp, #16
 80040e8:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
 80040ec:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
 80040ee:	f7fd fd7f 	bl	8001bf0 <vprintk>

	va_end(ap);
}
 80040f2:	b003      	add	sp, #12
 80040f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80040f8:	b004      	add	sp, #16
 80040fa:	4770      	bx	lr

080040fc <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 80040fc:	4604      	mov	r4, r0
 80040fe:	b508      	push	{r3, lr}
 8004100:	4608      	mov	r0, r1
 8004102:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
 8004104:	461a      	mov	r2, r3
 8004106:	47a0      	blx	r4
	if (z_syscall_trap()) {
		return (k_tid_t) arch_syscall_invoke0(K_SYSCALL_Z_CURRENT_GET);
	}
#endif
	compiler_barrier();
	return z_impl_z_current_get();
 8004108:	f7ff fd9c 	bl	8003c44 <z_impl_z_current_get>
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_THREAD_ABORT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_thread_abort(thread);
 800410c:	f7fe f896 	bl	800223c <z_impl_k_thread_abort>

08004110 <_ldiv5>:
	uint32_t v_lo = *v;
 8004110:	e9d0 2100 	ldrd	r2, r1, [r0]
{
 8004114:	b530      	push	{r4, r5, lr}
	__asm__ ("" : "+r" (m));
 8004116:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
 800411a:	fba2 2403 	umull	r2, r4, r2, r3
 800411e:	18d5      	adds	r5, r2, r3
 8004120:	eb43 0504 	adc.w	r5, r3, r4
	result += (uint64_t)v_hi * m;
 8004124:	fba1 1303 	umull	r1, r3, r1, r3
 8004128:	1852      	adds	r2, r2, r1
 800412a:	eb44 0403 	adc.w	r4, r4, r3
 800412e:	1952      	adds	r2, r2, r5
 8004130:	f144 0200 	adc.w	r2, r4, #0
	result += (uint64_t)v_hi * m;
 8004134:	1889      	adds	r1, r1, r2
 8004136:	f143 0300 	adc.w	r3, r3, #0
	*v = result;
 800413a:	e9c0 1300 	strd	r1, r3, [r0]
}
 800413e:	bd30      	pop	{r4, r5, pc}

08004140 <_get_digit>:
{
 8004140:	b510      	push	{r4, lr}
	if (*digit_count > 0) {
 8004142:	680a      	ldr	r2, [r1, #0]
 8004144:	2a00      	cmp	r2, #0
{
 8004146:	4603      	mov	r3, r0
	if (*digit_count > 0) {
 8004148:	dd0f      	ble.n	800416a <_get_digit+0x2a>
		--*digit_count;
 800414a:	3a01      	subs	r2, #1
 800414c:	600a      	str	r2, [r1, #0]
		*fr *= 10U;
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	6844      	ldr	r4, [r0, #4]
 8004152:	200a      	movs	r0, #10
 8004154:	fba2 1200 	umull	r1, r2, r2, r0
 8004158:	fb00 2204 	mla	r2, r0, r4, r2
		rval = ((*fr >> 60) & 0xF) + '0';
 800415c:	0f10      	lsrs	r0, r2, #28
		*fr &= (BIT64(60) - 1U);
 800415e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004162:	e9c3 1200 	strd	r1, r2, [r3]
		rval = ((*fr >> 60) & 0xF) + '0';
 8004166:	3030      	adds	r0, #48	; 0x30
}
 8004168:	bd10      	pop	{r4, pc}
		rval = '0';
 800416a:	2030      	movs	r0, #48	; 0x30
 800416c:	e7fc      	b.n	8004168 <_get_digit+0x28>

0800416e <outs>:
{
 800416e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004172:	4607      	mov	r7, r0
 8004174:	4688      	mov	r8, r1
 8004176:	4615      	mov	r5, r2
 8004178:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 800417a:	4614      	mov	r4, r2
 800417c:	42b4      	cmp	r4, r6
 800417e:	d305      	bcc.n	800418c <outs+0x1e>
 8004180:	b10e      	cbz	r6, 8004186 <outs+0x18>
	return (int)count;
 8004182:	1b60      	subs	r0, r4, r5
 8004184:	e008      	b.n	8004198 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 8004186:	7823      	ldrb	r3, [r4, #0]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d0fa      	beq.n	8004182 <outs+0x14>
		int rc = out((int)*sp++, ctx);
 800418c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8004190:	4641      	mov	r1, r8
 8004192:	47b8      	blx	r7
		if (rc < 0) {
 8004194:	2800      	cmp	r0, #0
 8004196:	daf1      	bge.n	800417c <outs+0xe>
}
 8004198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800419c <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
 800419c:	4770      	bx	lr

0800419e <st_stm32_common_config>:
#endif /* CONFIG_SOC_SERIES_STM32H7X || CONFIG_SOC_SERIES_STM32MP1X */

#endif /* CONFIG_USE_SEGGER_RTT */

	return 0;
}
 800419e:	2000      	movs	r0, #0
 80041a0:	4770      	bx	lr

080041a2 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
 80041a2:	f000 bccc 	b.w	8004b3e <z_fatal_error>

080041a6 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
 80041a6:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
 80041a8:	6800      	ldr	r0, [r0, #0]
 80041aa:	f000 bcc8 	b.w	8004b3e <z_fatal_error>

080041ae <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
 80041ae:	2100      	movs	r1, #0
 80041b0:	2001      	movs	r0, #1
 80041b2:	f7ff bff6 	b.w	80041a2 <z_arm_fatal_error>

080041b6 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
 80041b6:	b508      	push	{r3, lr}
	handler();
 80041b8:	f7fd fde6 	bl	8001d88 <z_SysNmiOnReset>
	z_arm_int_exit();
}
 80041bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 80041c0:	f7fd bed2 	b.w	8001f68 <z_arm_exc_exit>

080041c4 <malloc_prepare>:
		 "memory space available for newlib heap is less than the "
		 "minimum required size specified by "
		 "CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE");

	return 0;
}
 80041c4:	2000      	movs	r0, #0
 80041c6:	4770      	bx	lr

080041c8 <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
 80041c8:	f7ff ba6a 	b.w	80036a0 <z_impl_z_errno>

080041cc <stm32_exti_init>:
{
 80041cc:	b508      	push	{r3, lr}
	DT_FOREACH_PROP_ELEM(DT_NODELABEL(exti),
 80041ce:	2206      	movs	r2, #6
 80041d0:	2101      	movs	r1, #1
 80041d2:	2000      	movs	r0, #0
 80041d4:	f7fe f86c 	bl	80022b0 <stm32_fill_irq_table>
 80041d8:	2200      	movs	r2, #0
 80041da:	4611      	mov	r1, r2
 80041dc:	2006      	movs	r0, #6
 80041de:	f7fd fdb9 	bl	8001d54 <z_arm_irq_priority_set>
 80041e2:	2101      	movs	r1, #1
 80041e4:	4608      	mov	r0, r1
 80041e6:	2207      	movs	r2, #7
 80041e8:	f7fe f862 	bl	80022b0 <stm32_fill_irq_table>
 80041ec:	2200      	movs	r2, #0
 80041ee:	4611      	mov	r1, r2
 80041f0:	2007      	movs	r0, #7
 80041f2:	f7fd fdaf 	bl	8001d54 <z_arm_irq_priority_set>
 80041f6:	2208      	movs	r2, #8
 80041f8:	2101      	movs	r1, #1
 80041fa:	2002      	movs	r0, #2
 80041fc:	f7fe f858 	bl	80022b0 <stm32_fill_irq_table>
 8004200:	2200      	movs	r2, #0
 8004202:	4611      	mov	r1, r2
 8004204:	2008      	movs	r0, #8
 8004206:	f7fd fda5 	bl	8001d54 <z_arm_irq_priority_set>
 800420a:	2209      	movs	r2, #9
 800420c:	2101      	movs	r1, #1
 800420e:	2003      	movs	r0, #3
 8004210:	f7fe f84e 	bl	80022b0 <stm32_fill_irq_table>
 8004214:	2200      	movs	r2, #0
 8004216:	4611      	mov	r1, r2
 8004218:	2009      	movs	r0, #9
 800421a:	f7fd fd9b 	bl	8001d54 <z_arm_irq_priority_set>
 800421e:	220a      	movs	r2, #10
 8004220:	2101      	movs	r1, #1
 8004222:	2004      	movs	r0, #4
 8004224:	f7fe f844 	bl	80022b0 <stm32_fill_irq_table>
 8004228:	2200      	movs	r2, #0
 800422a:	4611      	mov	r1, r2
 800422c:	200a      	movs	r0, #10
 800422e:	f7fd fd91 	bl	8001d54 <z_arm_irq_priority_set>
 8004232:	2105      	movs	r1, #5
 8004234:	4608      	mov	r0, r1
 8004236:	2217      	movs	r2, #23
 8004238:	f7fe f83a 	bl	80022b0 <stm32_fill_irq_table>
 800423c:	2200      	movs	r2, #0
 800423e:	4611      	mov	r1, r2
 8004240:	2017      	movs	r0, #23
 8004242:	f7fd fd87 	bl	8001d54 <z_arm_irq_priority_set>
 8004246:	2228      	movs	r2, #40	; 0x28
 8004248:	2106      	movs	r1, #6
 800424a:	200a      	movs	r0, #10
 800424c:	f7fe f830 	bl	80022b0 <stm32_fill_irq_table>
 8004250:	2200      	movs	r2, #0
 8004252:	4611      	mov	r1, r2
 8004254:	2028      	movs	r0, #40	; 0x28
 8004256:	f7fd fd7d 	bl	8001d54 <z_arm_irq_priority_set>
}
 800425a:	2000      	movs	r0, #0
 800425c:	bd08      	pop	{r3, pc}

0800425e <stm32_clock_control_on>:
	if (IN_RANGE(pclken->bus, STM32_PERIPH_BUS_MIN, STM32_PERIPH_BUS_MAX) == 0) {
 800425e:	680b      	ldr	r3, [r1, #0]
 8004260:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8004264:	2a78      	cmp	r2, #120	; 0x78
	sys_set_bits(DT_REG_ADDR(DT_NODELABEL(rcc)) + pclken->bus,
 8004266:	bf9f      	itttt	ls
 8004268:	f103 4380 	addls.w	r3, r3, #1073741824	; 0x40000000
 800426c:	f503 330e 	addls.w	r3, r3, #145408	; 0x23800

static ALWAYS_INLINE void sys_set_bits(mem_addr_t addr, unsigned int mask)
{
	uint32_t temp = *(volatile uint32_t *)addr;

	*(volatile uint32_t *)addr = temp | mask;
 8004270:	6849      	ldrls	r1, [r1, #4]
	uint32_t temp = *(volatile uint32_t *)addr;
 8004272:	681a      	ldrls	r2, [r3, #0]
	*(volatile uint32_t *)addr = temp | mask;
 8004274:	bf9d      	ittte	ls
 8004276:	430a      	orrls	r2, r1
	return 0;
 8004278:	2000      	movls	r0, #0
 800427a:	601a      	strls	r2, [r3, #0]
		return -ENOTSUP;
 800427c:	f06f 0085 	mvnhi.w	r0, #133	; 0x85
}
 8004280:	4770      	bx	lr

08004282 <stm32_clock_control_off>:
	if (IN_RANGE(pclken->bus, STM32_PERIPH_BUS_MIN, STM32_PERIPH_BUS_MAX) == 0) {
 8004282:	680b      	ldr	r3, [r1, #0]
 8004284:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8004288:	2a78      	cmp	r2, #120	; 0x78
	sys_clear_bits(DT_REG_ADDR(DT_NODELABEL(rcc)) + pclken->bus,
 800428a:	bf9f      	itttt	ls
 800428c:	f103 4380 	addls.w	r3, r3, #1073741824	; 0x40000000
 8004290:	f503 330e 	addls.w	r3, r3, #145408	; 0x23800

static ALWAYS_INLINE void sys_clear_bits(mem_addr_t addr, unsigned int mask)
{
	uint32_t temp = *(volatile uint32_t *)addr;

	*(volatile uint32_t *)addr = temp & ~mask;
 8004294:	6849      	ldrls	r1, [r1, #4]
	uint32_t temp = *(volatile uint32_t *)addr;
 8004296:	681a      	ldrls	r2, [r3, #0]
	*(volatile uint32_t *)addr = temp & ~mask;
 8004298:	bf9d      	ittte	ls
 800429a:	438a      	bicls	r2, r1
	return 0;
 800429c:	2000      	movls	r0, #0
 800429e:	601a      	strls	r2, [r3, #0]
		return -ENOTSUP;
 80042a0:	f06f 0085 	mvnhi.w	r0, #133	; 0x85
}
 80042a4:	4770      	bx	lr

080042a6 <stm32_clock_control_configure>:
	err = enabled_clock(pclken->bus);
 80042a6:	680b      	ldr	r3, [r1, #0]
	switch (src_clk) {
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d803      	bhi.n	80042b4 <stm32_clock_control_configure+0xe>
 80042ac:	b923      	cbnz	r3, 80042b8 <stm32_clock_control_configure+0x12>
 80042ae:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 80042b2:	4770      	bx	lr
	switch (src_clk) {
 80042b4:	2b06      	cmp	r3, #6
 80042b6:	d1fa      	bne.n	80042ae <stm32_clock_control_configure+0x8>
	if (pclken->enr == NO_SEL) {
 80042b8:	684a      	ldr	r2, [r1, #4]
 80042ba:	2aff      	cmp	r2, #255	; 0xff
 80042bc:	d00d      	beq.n	80042da <stm32_clock_control_configure+0x34>
	sys_set_bits(DT_REG_ADDR(DT_NODELABEL(rcc)) + STM32_CLOCK_REG_GET(pclken->enr),
 80042be:	b2d3      	uxtb	r3, r2
 80042c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80042c4:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
		     STM32_CLOCK_VAL_GET(pclken->enr) << STM32_CLOCK_SHIFT_GET(pclken->enr));
 80042c8:	f3c2 4102 	ubfx	r1, r2, #16, #3
	uint32_t temp = *(volatile uint32_t *)addr;
 80042cc:	6818      	ldr	r0, [r3, #0]
 80042ce:	f3c2 2204 	ubfx	r2, r2, #8, #5
	sys_set_bits(DT_REG_ADDR(DT_NODELABEL(rcc)) + STM32_CLOCK_REG_GET(pclken->enr),
 80042d2:	fa01 f202 	lsl.w	r2, r1, r2
	*(volatile uint32_t *)addr = temp | mask;
 80042d6:	4302      	orrs	r2, r0
 80042d8:	601a      	str	r2, [r3, #0]
		return 0;
 80042da:	2000      	movs	r0, #0
 80042dc:	4770      	bx	lr

080042de <gpio_stm32_port_get_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 80042de:	6843      	ldr	r3, [r0, #4]
 80042e0:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Input data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->IDR));
 80042e2:	691b      	ldr	r3, [r3, #16]
	*value = LL_GPIO_ReadInputPort(gpio);
 80042e4:	600b      	str	r3, [r1, #0]
}
 80042e6:	2000      	movs	r0, #0
 80042e8:	4770      	bx	lr

080042ea <gpio_stm32_port_set_masked_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 80042ea:	6843      	ldr	r3, [r0, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Output data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadOutputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->ODR));
 80042ee:	6958      	ldr	r0, [r3, #20]
	LL_GPIO_WriteOutputPort(gpio, (port_value & ~mask) | (mask & value));
 80042f0:	4042      	eors	r2, r0
 80042f2:	400a      	ands	r2, r1
 80042f4:	4042      	eors	r2, r0
  WRITE_REG(GPIOx->ODR, PortValue);
 80042f6:	615a      	str	r2, [r3, #20]
}
 80042f8:	2000      	movs	r0, #0
 80042fa:	4770      	bx	lr

080042fc <gpio_stm32_port_set_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 80042fc:	6843      	ldr	r3, [r0, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
}
 8004300:	2000      	movs	r0, #0
	WRITE_REG(gpio->BSRR, pins);
 8004302:	6199      	str	r1, [r3, #24]
}
 8004304:	4770      	bx	lr

08004306 <gpio_stm32_port_clear_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8004306:	6843      	ldr	r3, [r0, #4]
 8004308:	685b      	ldr	r3, [r3, #4]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800430a:	0409      	lsls	r1, r1, #16
 800430c:	6199      	str	r1, [r3, #24]
}
 800430e:	2000      	movs	r0, #0
 8004310:	4770      	bx	lr

08004312 <gpio_stm32_port_toggle_bits>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8004312:	6843      	ldr	r3, [r0, #4]
 8004314:	685a      	ldr	r2, [r3, #4]
	WRITE_REG(gpio->ODR, READ_REG(gpio->ODR) ^ pins);
 8004316:	6953      	ldr	r3, [r2, #20]
 8004318:	404b      	eors	r3, r1
 800431a:	6153      	str	r3, [r2, #20]
}
 800431c:	2000      	movs	r0, #0
 800431e:	4770      	bx	lr

08004320 <gpio_stm32_manage_callback>:
{
 8004320:	b510      	push	{r4, lr}
	struct gpio_stm32_data *data = dev->data;
 8004322:	6903      	ldr	r3, [r0, #16]
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
 8004324:	6898      	ldr	r0, [r3, #8]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
 8004326:	b1f8      	cbz	r0, 8004368 <gpio_stm32_manage_callback+0x48>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8004328:	4288      	cmp	r0, r1
 800432a:	d119      	bne.n	8004360 <gpio_stm32_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
 800432c:	68dc      	ldr	r4, [r3, #12]
	return node->next;
 800432e:	6808      	ldr	r0, [r1, #0]
	list->head = node;
 8004330:	6098      	str	r0, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
 8004332:	42a1      	cmp	r1, r4
 8004334:	d100      	bne.n	8004338 <gpio_stm32_manage_callback+0x18>
	list->tail = node;
 8004336:	60d8      	str	r0, [r3, #12]
	parent->next = child;
 8004338:	2000      	movs	r0, #0
 800433a:	6008      	str	r0, [r1, #0]
		}
	} else if (!set) {
		return -EINVAL;
	}

	if (set) {
 800433c:	b12a      	cbz	r2, 800434a <gpio_stm32_manage_callback+0x2a>
	return list->head;
 800433e:	689a      	ldr	r2, [r3, #8]
	parent->next = child;
 8004340:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
 8004342:	68da      	ldr	r2, [r3, #12]
	list->head = node;
 8004344:	6099      	str	r1, [r3, #8]
Z_GENLIST_PREPEND(slist, snode)
 8004346:	b902      	cbnz	r2, 800434a <gpio_stm32_manage_callback+0x2a>
	list->tail = node;
 8004348:	60d9      	str	r1, [r3, #12]
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
 800434a:	2000      	movs	r0, #0
	return gpio_manage_callback(&data->cb, callback, set);
 800434c:	e010      	b.n	8004370 <gpio_stm32_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 800434e:	4281      	cmp	r1, r0
 8004350:	d106      	bne.n	8004360 <gpio_stm32_manage_callback+0x40>
	return node->next;
 8004352:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
 8004354:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
 8004356:	68d8      	ldr	r0, [r3, #12]
 8004358:	4281      	cmp	r1, r0
 800435a:	d1ed      	bne.n	8004338 <gpio_stm32_manage_callback+0x18>
	list->tail = node;
 800435c:	60dc      	str	r4, [r3, #12]
}
 800435e:	e7eb      	b.n	8004338 <gpio_stm32_manage_callback+0x18>
	return node->next;
 8004360:	4604      	mov	r4, r0
 8004362:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8004364:	2800      	cmp	r0, #0
 8004366:	d1f2      	bne.n	800434e <gpio_stm32_manage_callback+0x2e>
			if (!set) {
 8004368:	2a00      	cmp	r2, #0
 800436a:	d1e8      	bne.n	800433e <gpio_stm32_manage_callback+0x1e>
				return -EINVAL;
 800436c:	f06f 0015 	mvn.w	r0, #21
}
 8004370:	bd10      	pop	{r4, pc}

08004372 <gpio_stm32_configure_raw.isra.0>:
static void gpio_stm32_configure_raw(const struct device *dev, int pin,
 8004372:	b5f0      	push	{r4, r5, r6, r7, lr}
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8004374:	6844      	ldr	r4, [r0, #4]
	pinval = 1 << pin;
 8004376:	2001      	movs	r0, #1
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8004378:	6867      	ldr	r7, [r4, #4]
 800437a:	4088      	lsls	r0, r1
static void gpio_stm32_configure_raw(const struct device *dev, int pin,
 800437c:	461e      	mov	r6, r3
	LL_GPIO_SetPinOutputType(gpio, pin_ll, otype >> STM32_OTYPER_SHIFT);
 800437e:	f3c2 1380 	ubfx	r3, r2, #6, #1
 8004382:	ea27 0700 	bic.w	r7, r7, r0
 8004386:	408b      	lsls	r3, r1
 8004388:	433b      	orrs	r3, r7
 800438a:	6063      	str	r3, [r4, #4]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800438c:	fa90 f7a0 	rbit	r7, r0
  return __builtin_clz(value);
 8004390:	fab7 f787 	clz	r7, r7
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8004394:	f8d4 c008 	ldr.w	ip, [r4, #8]
 8004398:	f04f 0e03 	mov.w	lr, #3
 800439c:	007f      	lsls	r7, r7, #1
 800439e:	fa0e f707 	lsl.w	r7, lr, r7
 80043a2:	ea2c 0c07 	bic.w	ip, ip, r7
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043a6:	fa90 f7a0 	rbit	r7, r0
  return __builtin_clz(value);
 80043aa:	fab7 f787 	clz	r7, r7
	LL_GPIO_SetPinSpeed(gpio, pin_ll, ospeed >> STM32_OSPEEDR_SHIFT);
 80043ae:	f3c2 13c1 	ubfx	r3, r2, #7, #2
 80043b2:	007f      	lsls	r7, r7, #1
 80043b4:	40bb      	lsls	r3, r7
 80043b6:	ea43 030c 	orr.w	r3, r3, ip
 80043ba:	60a3      	str	r3, [r4, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043bc:	fa90 f3a0 	rbit	r3, r0
  return __builtin_clz(value);
 80043c0:	fab3 f383 	clz	r3, r3
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80043c4:	68e7      	ldr	r7, [r4, #12]
 80043c6:	005b      	lsls	r3, r3, #1
 80043c8:	fa0e f303 	lsl.w	r3, lr, r3
 80043cc:	ea27 0703 	bic.w	r7, r7, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043d0:	fa90 f3a0 	rbit	r3, r0
  return __builtin_clz(value);
 80043d4:	fab3 f383 	clz	r3, r3
 80043d8:	f002 0530 	and.w	r5, r2, #48	; 0x30
 80043dc:	005b      	lsls	r3, r3, #1
	LL_GPIO_SetPinPull(gpio, pin_ll, pupd >> STM32_PUPDR_SHIFT);
 80043de:	f3c2 2241 	ubfx	r2, r2, #9, #2
 80043e2:	409a      	lsls	r2, r3
 80043e4:	433a      	orrs	r2, r7
	if (mode == STM32_MODER_ALT_MODE) {
 80043e6:	2d20      	cmp	r5, #32
 80043e8:	60e2      	str	r2, [r4, #12]
 80043ea:	d116      	bne.n	800441a <gpio_stm32_configure_raw.isra.0+0xa8>
		if (pin < 8) {
 80043ec:	2907      	cmp	r1, #7
 80043ee:	dc2b      	bgt.n	8004448 <gpio_stm32_configure_raw.isra.0+0xd6>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f0:	fa90 f3a0 	rbit	r3, r0
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80043f4:	6a22      	ldr	r2, [r4, #32]
  if (value == 0U)
 80043f6:	b32b      	cbz	r3, 8004444 <gpio_stm32_configure_raw.isra.0+0xd2>
  return __builtin_clz(value);
 80043f8:	fab3 f383 	clz	r3, r3
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	210f      	movs	r1, #15
 8004400:	fa01 f303 	lsl.w	r3, r1, r3
 8004404:	ea22 0203 	bic.w	r2, r2, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004408:	fa90 f3a0 	rbit	r3, r0
  return __builtin_clz(value);
 800440c:	fab3 f383 	clz	r3, r3
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	fa06 f303 	lsl.w	r3, r6, r3
 8004416:	4313      	orrs	r3, r2
 8004418:	6223      	str	r3, [r4, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800441a:	fa90 f3a0 	rbit	r3, r0
  return __builtin_clz(value);
 800441e:	fab3 f383 	clz	r3, r3
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8004422:	6822      	ldr	r2, [r4, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004424:	fa90 f0a0 	rbit	r0, r0
 8004428:	005b      	lsls	r3, r3, #1
 800442a:	2103      	movs	r1, #3
  return __builtin_clz(value);
 800442c:	fab0 f080 	clz	r0, r0
	LL_GPIO_SetPinMode(gpio, pin_ll, mode >> STM32_MODER_SHIFT);
 8004430:	092d      	lsrs	r5, r5, #4
 8004432:	fa01 f303 	lsl.w	r3, r1, r3
 8004436:	0040      	lsls	r0, r0, #1
 8004438:	ea22 0303 	bic.w	r3, r2, r3
 800443c:	4085      	lsls	r5, r0
 800443e:	431d      	orrs	r5, r3
 8004440:	6025      	str	r5, [r4, #0]
}
 8004442:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 32U;
 8004444:	462b      	mov	r3, r5
 8004446:	e7d9      	b.n	80043fc <gpio_stm32_configure_raw.isra.0+0x8a>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8004448:	0a03      	lsrs	r3, r0, #8
 800444a:	6a61      	ldr	r1, [r4, #36]	; 0x24
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800444c:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 8004450:	b182      	cbz	r2, 8004474 <gpio_stm32_configure_raw.isra.0+0x102>
  return __builtin_clz(value);
 8004452:	fab2 f282 	clz	r2, r2
 8004456:	0092      	lsls	r2, r2, #2
 8004458:	270f      	movs	r7, #15
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800445a:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 800445e:	fab3 f383 	clz	r3, r3
 8004462:	fa07 f202 	lsl.w	r2, r7, r2
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	ea21 0202 	bic.w	r2, r1, r2
 800446c:	409e      	lsls	r6, r3
 800446e:	4316      	orrs	r6, r2
 8004470:	6266      	str	r6, [r4, #36]	; 0x24
}
 8004472:	e7d2      	b.n	800441a <gpio_stm32_configure_raw.isra.0+0xa8>
    return 32U;
 8004474:	462a      	mov	r2, r5
 8004476:	e7ee      	b.n	8004456 <gpio_stm32_configure_raw.isra.0+0xe4>

08004478 <gpio_stm32_config>:
{
 8004478:	b538      	push	{r3, r4, r5, lr}
 800447a:	4604      	mov	r4, r0
	if ((flags & GPIO_OUTPUT) != 0) {
 800447c:	0390      	lsls	r0, r2, #14
{
 800447e:	460d      	mov	r5, r1
 8004480:	4613      	mov	r3, r2
	if ((flags & GPIO_OUTPUT) != 0) {
 8004482:	d517      	bpl.n	80044b4 <gpio_stm32_config+0x3c>
		if ((flags & GPIO_SINGLE_ENDED) != 0) {
 8004484:	0791      	lsls	r1, r2, #30
 8004486:	d50e      	bpl.n	80044a6 <gpio_stm32_config+0x2e>
			if (flags & GPIO_LINE_OPEN_DRAIN) {
 8004488:	075a      	lsls	r2, r3, #29
 800448a:	d52e      	bpl.n	80044ea <gpio_stm32_config+0x72>
				*pincfg |= STM32_PINCFG_OPEN_DRAIN;
 800448c:	2250      	movs	r2, #80	; 0x50
		if ((flags & GPIO_PULL_UP) != 0) {
 800448e:	06d8      	lsls	r0, r3, #27
 8004490:	d50b      	bpl.n	80044aa <gpio_stm32_config+0x32>
			*pincfg |= STM32_PINCFG_PULL_UP;
 8004492:	f442 7200 	orr.w	r2, r2, #512	; 0x200
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 8004496:	0319      	lsls	r1, r3, #12
 8004498:	d51a      	bpl.n	80044d0 <gpio_stm32_config+0x58>
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800449a:	6861      	ldr	r1, [r4, #4]
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 800449c:	2301      	movs	r3, #1
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800449e:	6849      	ldr	r1, [r1, #4]
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 80044a0:	40ab      	lsls	r3, r5
	WRITE_REG(gpio->BSRR, pins);
 80044a2:	618b      	str	r3, [r1, #24]
	return 0;
 80044a4:	e00d      	b.n	80044c2 <gpio_stm32_config+0x4a>
		*pincfg = STM32_PINCFG_MODE_OUTPUT;
 80044a6:	2210      	movs	r2, #16
 80044a8:	e7f1      	b.n	800448e <gpio_stm32_config+0x16>
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 80044aa:	0699      	lsls	r1, r3, #26
 80044ac:	d5f3      	bpl.n	8004496 <gpio_stm32_config+0x1e>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 80044ae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
	if (err != 0) {
 80044b2:	e7f0      	b.n	8004496 <gpio_stm32_config+0x1e>
	} else if  ((flags & GPIO_INPUT) != 0) {
 80044b4:	03da      	lsls	r2, r3, #15
 80044b6:	d513      	bpl.n	80044e0 <gpio_stm32_config+0x68>
		if ((flags & GPIO_PULL_UP) != 0) {
 80044b8:	06d8      	lsls	r0, r3, #27
 80044ba:	d413      	bmi.n	80044e4 <gpio_stm32_config+0x6c>
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 80044bc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80044c0:	029a      	lsls	r2, r3, #10
	gpio_stm32_configure_raw(dev, pin, pincfg, 0);
 80044c2:	6860      	ldr	r0, [r4, #4]
 80044c4:	2300      	movs	r3, #0
 80044c6:	4629      	mov	r1, r5
 80044c8:	f7ff ff53 	bl	8004372 <gpio_stm32_configure_raw.isra.0>
	return 0;
 80044cc:	2000      	movs	r0, #0
}
 80044ce:	bd38      	pop	{r3, r4, r5, pc}
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
 80044d0:	035b      	lsls	r3, r3, #13
 80044d2:	d5f6      	bpl.n	80044c2 <gpio_stm32_config+0x4a>
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 80044d4:	2101      	movs	r1, #1
 80044d6:	40a9      	lsls	r1, r5
 80044d8:	4620      	mov	r0, r4
 80044da:	f7ff ff14 	bl	8004306 <gpio_stm32_port_clear_bits_raw>
 80044de:	e7f0      	b.n	80044c2 <gpio_stm32_config+0x4a>
		*pincfg = STM32_PINCFG_MODE_ANALOG;
 80044e0:	2230      	movs	r2, #48	; 0x30
 80044e2:	e7ee      	b.n	80044c2 <gpio_stm32_config+0x4a>
			*pincfg |= STM32_PINCFG_PULL_UP;
 80044e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044e8:	e7eb      	b.n	80044c2 <gpio_stm32_config+0x4a>
				return -ENOTSUP;
 80044ea:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80044ee:	e7ee      	b.n	80044ce <gpio_stm32_config+0x56>

080044f0 <gpio_stm32_isr>:
{
 80044f0:	b570      	push	{r4, r5, r6, lr}
 80044f2:	460b      	mov	r3, r1
 80044f4:	6889      	ldr	r1, [r1, #8]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 80044f6:	b121      	cbz	r1, 8004502 <gpio_stm32_isr+0x12>
	gpio_fire_callbacks(&data->cb, data->dev, BIT(line));
 80044f8:	2501      	movs	r5, #1
 80044fa:	685e      	ldr	r6, [r3, #4]
	return node->next;
 80044fc:	680c      	ldr	r4, [r1, #0]
 80044fe:	4085      	lsls	r5, r0
 8004500:	b901      	cbnz	r1, 8004504 <gpio_stm32_isr+0x14>
}
 8004502:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->pin_mask & pins) {
 8004504:	688a      	ldr	r2, [r1, #8]
 8004506:	402a      	ands	r2, r5
 8004508:	d002      	beq.n	8004510 <gpio_stm32_isr+0x20>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
 800450a:	684b      	ldr	r3, [r1, #4]
 800450c:	4630      	mov	r0, r6
 800450e:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8004510:	b11c      	cbz	r4, 800451a <gpio_stm32_isr+0x2a>
 8004512:	6823      	ldr	r3, [r4, #0]
 8004514:	4621      	mov	r1, r4
 8004516:	461c      	mov	r4, r3
 8004518:	e7f2      	b.n	8004500 <gpio_stm32_isr+0x10>
 800451a:	4623      	mov	r3, r4
 800451c:	e7fa      	b.n	8004514 <gpio_stm32_isr+0x24>

0800451e <gpio_stm32_configure>:
{
 800451e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004520:	461f      	mov	r7, r3
 8004522:	4604      	mov	r4, r0
	gpio_stm32_configure_raw(dev, pin, conf, func);
 8004524:	6840      	ldr	r0, [r0, #4]
{
 8004526:	460e      	mov	r6, r1
 8004528:	4615      	mov	r5, r2
	gpio_stm32_configure_raw(dev, pin, conf, func);
 800452a:	f7ff ff22 	bl	8004372 <gpio_stm32_configure_raw.isra.0>
	if (func == IS_GPIO_OUT) {
 800452e:	2f11      	cmp	r7, #17
 8004530:	d107      	bne.n	8004542 <gpio_stm32_configure+0x24>
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 8004532:	2101      	movs	r1, #1
		if (gpio_out == STM32_ODR_1) {
 8004534:	052b      	lsls	r3, r5, #20
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 8004536:	fa01 f106 	lsl.w	r1, r1, r6
		if (gpio_out == STM32_ODR_1) {
 800453a:	d504      	bpl.n	8004546 <gpio_stm32_configure+0x28>
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800453c:	6863      	ldr	r3, [r4, #4]
 800453e:	685b      	ldr	r3, [r3, #4]
	WRITE_REG(gpio->BSRR, pins);
 8004540:	6199      	str	r1, [r3, #24]
}
 8004542:	2000      	movs	r0, #0
 8004544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 8004546:	4620      	mov	r0, r4
 8004548:	f7ff fedd 	bl	8004306 <gpio_stm32_port_clear_bits_raw>
 800454c:	e7f9      	b.n	8004542 <gpio_stm32_configure+0x24>

0800454e <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
 800454e:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
 8004550:	6803      	ldr	r3, [r0, #0]
 8004552:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
 8004554:	7905      	ldrb	r5, [r0, #4]
 8004556:	6804      	ldr	r4, [r0, #0]
 8004558:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800455c:	42a3      	cmp	r3, r4
 800455e:	d302      	bcc.n	8004566 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
 8004560:	f06f 0001 	mvn.w	r0, #1
}
 8004564:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
 8004566:	795c      	ldrb	r4, [r3, #5]
 8004568:	428c      	cmp	r4, r1
 800456a:	d001      	beq.n	8004570 <pinctrl_lookup_state+0x22>
		(*state)++;
 800456c:	3308      	adds	r3, #8
 800456e:	e7f0      	b.n	8004552 <pinctrl_lookup_state+0x4>
			return 0;
 8004570:	2000      	movs	r0, #0
 8004572:	e7f7      	b.n	8004564 <pinctrl_lookup_state+0x16>

08004574 <currsmp_shunt_stm32_configure>:
	struct currsmp_shunt_stm32_data *data = dev->data;
 8004574:	6903      	ldr	r3, [r0, #16]
	data->regulation_ctx = ctx;
 8004576:	e9c3 1200 	strd	r1, r2, [r3]
}
 800457a:	4770      	bx	lr

0800457c <currsmp_shunt_stm32_set_sector>:
	struct currsmp_shunt_stm32_data *data = dev->data;
 800457c:	6902      	ldr	r2, [r0, #16]
	const struct currsmp_shunt_stm32_config *config = dev->config;
 800457e:	6843      	ldr	r3, [r0, #4]
	data->sector = sector;
 8004580:	7391      	strb	r1, [r2, #14]
	config->adc->JSQR = data->jsqr[sector / 2U % 3U];
 8004582:	6818      	ldr	r0, [r3, #0]
 8004584:	0849      	lsrs	r1, r1, #1
 8004586:	2303      	movs	r3, #3
 8004588:	fbb1 f3f3 	udiv	r3, r1, r3
 800458c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004590:	1ac9      	subs	r1, r1, r3
 8004592:	b2c9      	uxtb	r1, r1
 8004594:	3104      	adds	r1, #4
 8004596:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800459a:	6383      	str	r3, [r0, #56]	; 0x38
}
 800459c:	4770      	bx	lr

0800459e <currsmp_shunt_stm32_start>:
}
 800459e:	4770      	bx	lr

080045a0 <currsmp_shunt_stm32_pause>:
	LL_ADC_DisableIT_JEOS(config->adc);
 80045a0:	6843      	ldr	r3, [r0, #4]
 80045a2:	681a      	ldr	r2, [r3, #0]
{
  /* Note: on this STM32 series, there is no flag ADC group injected          */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "JEOC" is corresponding to flag "JEOS"               */
  /*       in other STM32 families).                                          */
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 80045a4:	6853      	ldr	r3, [r2, #4]
 80045a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045aa:	6053      	str	r3, [r2, #4]
}
 80045ac:	4770      	bx	lr

080045ae <currsmp_shunt_stm32_resume>:
	LL_ADC_EnableIT_JEOS(config->adc);
 80045ae:	6843      	ldr	r3, [r0, #4]
 80045b0:	681a      	ldr	r2, [r3, #0]
  SET_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 80045b2:	6853      	ldr	r3, [r2, #4]
 80045b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045b8:	6053      	str	r3, [r2, #4]
}
 80045ba:	4770      	bx	lr

080045bc <LL_ADC_SetChannelSamplingTime>:
{
 80045bc:	b570      	push	{r4, r5, r6, lr}
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 80045c2:	f001 7400 	and.w	r4, r1, #33554432	; 0x2000000
 80045c6:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 80045ca:	fab3 f383 	clz	r3, r3
 80045ce:	40dc      	lsrs	r4, r3
 80045d0:	300c      	adds	r0, #12
  MODIFY_REG(*preg,
 80045d2:	f001 71f8 	and.w	r1, r1, #32505856	; 0x1f00000
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045d6:	f04f 73f8 	mov.w	r3, #32505856	; 0x1f00000
 80045da:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 80045de:	fab3 f383 	clz	r3, r3
 80045e2:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 80045e6:	fa21 f303 	lsr.w	r3, r1, r3
 80045ea:	2607      	movs	r6, #7
 80045ec:	fa06 f303 	lsl.w	r3, r6, r3
 80045f0:	ea25 0503 	bic.w	r5, r5, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045f4:	f04f 73f8 	mov.w	r3, #32505856	; 0x1f00000
 80045f8:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 80045fc:	fab3 f383 	clz	r3, r3
 8004600:	40d9      	lsrs	r1, r3
 8004602:	408a      	lsls	r2, r1
 8004604:	432a      	orrs	r2, r5
 8004606:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
}
 800460a:	bd70      	pop	{r4, r5, r6, pc}

0800460c <currsmp_shunt_stm32_stop>:
static void currsmp_shunt_stm32_stop(const struct device *dev)
 800460c:	4770      	bx	lr

0800460e <currsmp_shunt_stm32_get_currents>:
{
 800460e:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct currsmp_shunt_stm32_config *config = dev->config;
 8004610:	6845      	ldr	r5, [r0, #4]
	struct currsmp_shunt_stm32_data *data = dev->data;
 8004612:	6907      	ldr	r7, [r0, #16]
  return (uint32_t)(READ_BIT(*preg,
 8004614:	682a      	ldr	r2, [r5, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->JDR1, __ADC_MASK_SHIFT(Rank, ADC_INJ_JDRX_REGOFFSET_MASK));
 8004616:	f44f 7080 	mov.w	r0, #256	; 0x100
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800461a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800461e:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8004622:	fab3 f383 	clz	r3, r3
  return (uint32_t)(READ_BIT(*preg,
 8004626:	f852 4f3c 	ldr.w	r4, [r2, #60]!
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->JDR1, __ADC_MASK_SHIFT(Rank, ADC_INJ_JDRX_REGOFFSET_MASK));
 800462a:	fa20 f303 	lsr.w	r3, r0, r3
	val_ch1 = (uint16_t)LL_ADC_INJ_ReadConversionData32(config->adc,
 800462e:	b2a4      	uxth	r4, r4
  return (uint32_t)(READ_BIT(*preg,
 8004630:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
	switch (data->sector) {
 8004634:	7bbb      	ldrb	r3, [r7, #14]
 8004636:	3b01      	subs	r3, #1
	val_ch2 = (uint16_t)LL_ADC_INJ_ReadConversionData32(config->adc,
 8004638:	b280      	uxth	r0, r0
	switch (data->sector) {
 800463a:	2b05      	cmp	r3, #5
 800463c:	d855      	bhi.n	80046ea <currsmp_shunt_stm32_get_currents+0xdc>
 800463e:	e8df f003 	tbb	[pc, r3]
 8004642:	0349      	.short	0x0349
 8004644:	493e3e03 	.word	0x493e3e03
		i_a = data->i_a_offset - val_ch1;
 8004648:	893a      	ldrh	r2, [r7, #8]
		i_c = data->i_c_offset - val_ch2;
 800464a:	89bf      	ldrh	r7, [r7, #12]
		i_a = data->i_a_offset - val_ch1;
 800464c:	1b16      	subs	r6, r2, r4
		i_b = -(i_a + i_c);
 800464e:	443a      	add	r2, r7
 8004650:	1aa2      	subs	r2, r4, r2
		i_c = data->i_c_offset - val_ch2;
 8004652:	1a3b      	subs	r3, r7, r0
		i_b = -(i_a + i_c);
 8004654:	4402      	add	r2, r0
		i_a = data->i_a_offset - val_ch1;
 8004656:	b236      	sxth	r6, r6
		i_c = data->i_c_offset - val_ch2;
 8004658:	b21b      	sxth	r3, r3
		i_b = -(i_a + i_c);
 800465a:	b212      	sxth	r2, r2
	curr->i_a = (float)i_a / (2U << (config->adc_resolution - 1U));
 800465c:	7c2c      	ldrb	r4, [r5, #16]
 800465e:	2002      	movs	r0, #2
 8004660:	ee07 6a90 	vmov	s15, r6
 8004664:	3c01      	subs	r4, #1
 8004666:	fa00 f404 	lsl.w	r4, r0, r4
 800466a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800466e:	ee07 4a90 	vmov	s15, r4
 8004672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004676:	eec7 6a27 	vdiv.f32	s13, s14, s15
	curr->i_b = (float)i_b / (2U << (config->adc_resolution - 1U));
 800467a:	ee07 2a90 	vmov	s15, r2
	curr->i_a = (float)i_a / (2U << (config->adc_resolution - 1U));
 800467e:	edc1 6a00 	vstr	s13, [r1]
	curr->i_b = (float)i_b / (2U << (config->adc_resolution - 1U));
 8004682:	7c2a      	ldrb	r2, [r5, #16]
 8004684:	3a01      	subs	r2, #1
 8004686:	fa00 f202 	lsl.w	r2, r0, r2
 800468a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800468e:	ee07 2a90 	vmov	s15, r2
 8004692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004696:	eec7 6a27 	vdiv.f32	s13, s14, s15
	curr->i_c = (float)i_c / (2U << (config->adc_resolution - 1U));
 800469a:	ee07 3a90 	vmov	s15, r3
	curr->i_b = (float)i_b / (2U << (config->adc_resolution - 1U));
 800469e:	edc1 6a01 	vstr	s13, [r1, #4]
	curr->i_c = (float)i_c / (2U << (config->adc_resolution - 1U));
 80046a2:	7c2b      	ldrb	r3, [r5, #16]
 80046a4:	3b01      	subs	r3, #1
 80046a6:	4098      	lsls	r0, r3
 80046a8:	ee07 0a10 	vmov	s14, r0
 80046ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046b0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80046b4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80046b8:	edc1 6a02 	vstr	s13, [r1, #8]
}
 80046bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		i_a = data->i_a_offset - val_ch2;
 80046be:	893b      	ldrh	r3, [r7, #8]
		i_b = data->i_b_offset - val_ch1;
 80046c0:	897f      	ldrh	r7, [r7, #10]
		i_a = data->i_a_offset - val_ch2;
 80046c2:	1a1e      	subs	r6, r3, r0
		i_c = -(i_a + i_b);
 80046c4:	443b      	add	r3, r7
 80046c6:	1ae3      	subs	r3, r4, r3
		i_b = data->i_b_offset - val_ch1;
 80046c8:	1b3a      	subs	r2, r7, r4
		i_c = -(i_a + i_b);
 80046ca:	4403      	add	r3, r0
		i_a = data->i_a_offset - val_ch2;
 80046cc:	b236      	sxth	r6, r6
		i_b = data->i_b_offset - val_ch1;
 80046ce:	b212      	sxth	r2, r2
		i_c = -(i_a + i_b);
 80046d0:	b21b      	sxth	r3, r3
		break;
 80046d2:	e7c3      	b.n	800465c <currsmp_shunt_stm32_get_currents+0x4e>
		i_b = data->i_b_offset - val_ch1;
 80046d4:	897e      	ldrh	r6, [r7, #10]
		i_c = data->i_c_offset - val_ch2;
 80046d6:	89bf      	ldrh	r7, [r7, #12]
		i_b = data->i_b_offset - val_ch1;
 80046d8:	1b32      	subs	r2, r6, r4
		i_a = -(i_b + i_c);
 80046da:	443e      	add	r6, r7
 80046dc:	1ba4      	subs	r4, r4, r6
		i_c = data->i_c_offset - val_ch2;
 80046de:	1a3b      	subs	r3, r7, r0
		i_a = -(i_b + i_c);
 80046e0:	4420      	add	r0, r4
		i_b = data->i_b_offset - val_ch1;
 80046e2:	b212      	sxth	r2, r2
		i_c = data->i_c_offset - val_ch2;
 80046e4:	b21b      	sxth	r3, r3
		i_a = -(i_b + i_c);
 80046e6:	b206      	sxth	r6, r0
		break;
 80046e8:	e7b8      	b.n	800465c <currsmp_shunt_stm32_get_currents+0x4e>
	switch (data->sector) {
 80046ea:	2300      	movs	r3, #0
 80046ec:	461a      	mov	r2, r3
 80046ee:	461e      	mov	r6, r3
 80046f0:	e7b4      	b.n	800465c <currsmp_shunt_stm32_get_currents+0x4e>

080046f2 <gpio_pin_get_raw>:
 * @retval 0 If pin physical level is low.
 * @retval -EIO I/O error when accessing an external GPIO chip.
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_pin_get_raw(const struct device *port, gpio_pin_t pin)
{
 80046f2:	b513      	push	{r0, r1, r4, lr}
 80046f4:	460c      	mov	r4, r1
	return api->port_get_raw(port, value);
 80046f6:	6883      	ldr	r3, [r0, #8]
 80046f8:	a901      	add	r1, sp, #4
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	4798      	blx	r3

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	ret = gpio_port_get_raw(port, &value);
	if (ret == 0) {
 80046fe:	b938      	cbnz	r0, 8004710 <gpio_pin_get_raw+0x1e>
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
 8004700:	2301      	movs	r3, #1
 8004702:	fa03 f104 	lsl.w	r1, r3, r4
 8004706:	9b01      	ldr	r3, [sp, #4]
 8004708:	4219      	tst	r1, r3
 800470a:	bf14      	ite	ne
 800470c:	2001      	movne	r0, #1
 800470e:	2000      	moveq	r0, #0
	}

	return ret;
}
 8004710:	b002      	add	sp, #8
 8004712:	bd10      	pop	{r4, pc}

08004714 <halls_stm32_get_eangle>:
	return (float)data->eangle;
 8004714:	6903      	ldr	r3, [r0, #16]
 8004716:	881b      	ldrh	r3, [r3, #0]
 8004718:	ee00 3a10 	vmov	s0, r3
}
 800471c:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8004720:	4770      	bx	lr

08004722 <halls_stm32_get_speed>:
	struct halls_stm32_data *data = dev->data;
 8004722:	6902      	ldr	r2, [r0, #16]
	return (float)(data->tfreq / data->raw_speed / 6UL);
 8004724:	e9d2 3201 	ldrd	r3, r2, [r2, #4]
 8004728:	fbb3 f3f2 	udiv	r3, r3, r2
 800472c:	2206      	movs	r2, #6
 800472e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004732:	ee00 3a10 	vmov	s0, r3
}
 8004736:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800473a:	4770      	bx	lr

0800473c <halls_stm32_get_state.isra.0>:
static uint8_t halls_stm32_get_state(const struct device *dev)
 800473c:	b570      	push	{r4, r5, r6, lr}
 800473e:	4605      	mov	r5, r0
	return (uint8_t)gpio_pin_get_raw(config->h3.port, config->h3.pin)
 8004740:	f890 1020 	ldrb.w	r1, [r0, #32]
 8004744:	69c0      	ldr	r0, [r0, #28]
 8004746:	f7ff ffd4 	bl	80046f2 <gpio_pin_get_raw>
	       (uint8_t)gpio_pin_get_raw(config->h2.port, config->h2.pin)
 800474a:	7e29      	ldrb	r1, [r5, #24]
	return (uint8_t)gpio_pin_get_raw(config->h3.port, config->h3.pin)
 800474c:	4606      	mov	r6, r0
	       (uint8_t)gpio_pin_get_raw(config->h2.port, config->h2.pin)
 800474e:	6968      	ldr	r0, [r5, #20]
 8004750:	f7ff ffcf 	bl	80046f2 <gpio_pin_get_raw>
	       (uint8_t)gpio_pin_get_raw(config->h1.port, config->h1.pin);
 8004754:	7c29      	ldrb	r1, [r5, #16]
		       << 1U |
 8004756:	0044      	lsls	r4, r0, #1
	       (uint8_t)gpio_pin_get_raw(config->h1.port, config->h1.pin);
 8004758:	68e8      	ldr	r0, [r5, #12]
 800475a:	f7ff ffca 	bl	80046f2 <gpio_pin_get_raw>
		       << 1U |
 800475e:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
		       << 2U |
 8004762:	ea44 0486 	orr.w	r4, r4, r6, lsl #2
 8004766:	b264      	sxtb	r4, r4
		       << 1U |
 8004768:	4320      	orrs	r0, r4
}
 800476a:	b2c0      	uxtb	r0, r0
 800476c:	bd70      	pop	{r4, r5, r6, pc}

0800476e <svpwm_stm32_set_phase_voltages>:
{
 800476e:	b570      	push	{r4, r5, r6, lr}
	struct svpwm_stm32_data *data = dev->data;
 8004770:	6904      	ldr	r4, [r0, #16]
	const struct svpwm_stm32_config *config = dev->config;
 8004772:	6845      	ldr	r5, [r0, #4]
	svm_set(&data->svm, v_alpha, v_beta);
 8004774:	1d20      	adds	r0, r4, #4
 8004776:	f7fe fc19 	bl	8002fac <svm_set>
				(uint32_t)(data->period * duties->a));
 800477a:	edd4 7a00 	vldr	s15, [r4]
 800477e:	ed94 7a02 	vldr	s14, [r4, #8]
	LL_TIM_OC_SetCompareCH1(config->timer,
 8004782:	682b      	ldr	r3, [r5, #0]
				(uint32_t)(data->period * duties->a));
 8004784:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004788:	ee67 7a87 	vmul.f32	s15, s15, s14
	LL_TIM_OC_SetCompareCH1(config->timer,
 800478c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  WRITE_REG(TIMx->CCR1, CompareValue);
 8004790:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
				(uint32_t)(data->period * duties->b));
 8004794:	edd4 7a00 	vldr	s15, [r4]
 8004798:	ed94 7a03 	vldr	s14, [r4, #12]
	LL_TIM_OC_SetCompareCH2(config->timer,
 800479c:	682b      	ldr	r3, [r5, #0]
				(uint32_t)(data->period * duties->b));
 800479e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047a2:	ee67 7a87 	vmul.f32	s15, s15, s14
	LL_TIM_OC_SetCompareCH2(config->timer,
 80047a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  WRITE_REG(TIMx->CCR2, CompareValue);
 80047aa:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
				(uint32_t)(data->period * duties->c));
 80047ae:	edd4 7a00 	vldr	s15, [r4]
 80047b2:	ed94 7a04 	vldr	s14, [r4, #16]
	LL_TIM_OC_SetCompareCH3(config->timer,
 80047b6:	682b      	ldr	r3, [r5, #0]
				(uint32_t)(data->period * duties->c));
 80047b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047bc:	ee67 7a87 	vmul.f32	s15, s15, s14
	LL_TIM_OC_SetCompareCH3(config->timer,
 80047c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  WRITE_REG(TIMx->CCR3, CompareValue);
 80047c4:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	currsmp_set_sector(config->currsmp, data->svm.sector);
 80047c8:	69a8      	ldr	r0, [r5, #24]
 */
static inline void currsmp_set_sector(const struct device *dev, uint8_t sector)
{
	const struct currsmp_driver_api *api = dev->api;

	api->set_sector(dev, sector);
 80047ca:	7921      	ldrb	r1, [r4, #4]
 80047cc:	6883      	ldr	r3, [r0, #8]
}
 80047ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	4718      	bx	r3

080047d6 <gpio_pin_set.isra.0>:
			(const struct gpio_driver_data *)port->data;

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 80047d6:	2301      	movs	r3, #1
 80047d8:	fa03 f101 	lsl.w	r1, r3, r1
 80047dc:	6903      	ldr	r3, [r0, #16]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
 80047e2:	bf18      	it	ne
 80047e4:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
 80047e8:	b112      	cbz	r2, 80047f0 <gpio_pin_set.isra.0+0x1a>
	return api->port_set_bits_raw(port, pins);
 80047ea:	6883      	ldr	r3, [r0, #8]
 80047ec:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
 80047ee:	4718      	bx	r3
 80047f0:	6883      	ldr	r3, [r0, #8]
 80047f2:	691b      	ldr	r3, [r3, #16]
 80047f4:	e7fb      	b.n	80047ee <gpio_pin_set.isra.0+0x18>

080047f6 <svpwm_stm32_stop>:
{
 80047f6:	b538      	push	{r3, r4, r5, lr}
	const struct svpwm_stm32_config *config = dev->config;
 80047f8:	6844      	ldr	r4, [r0, #4]
	LL_TIM_DisableCounter(config->timer);
 80047fa:	6822      	ldr	r2, [r4, #0]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 80047fc:	6813      	ldr	r3, [r2, #0]
 80047fe:	f023 0301 	bic.w	r3, r3, #1
 8004802:	6013      	str	r3, [r2, #0]
	LL_TIM_DisableAllOutputs(config->timer);
 8004804:	6822      	ldr	r2, [r4, #0]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8004806:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8004808:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800480c:	6453      	str	r3, [r2, #68]	; 0x44
	LL_TIM_CC_DisableChannel(config->timer, LL_TIM_CHANNEL_CH1);
 800480e:	6822      	ldr	r2, [r4, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8004810:	6a13      	ldr	r3, [r2, #32]
 8004812:	f023 0301 	bic.w	r3, r3, #1
 8004816:	6213      	str	r3, [r2, #32]
	LL_TIM_CC_DisableChannel(config->timer, LL_TIM_CHANNEL_CH2);
 8004818:	6822      	ldr	r2, [r4, #0]
 800481a:	6a13      	ldr	r3, [r2, #32]
 800481c:	f023 0310 	bic.w	r3, r3, #16
 8004820:	6213      	str	r3, [r2, #32]
	LL_TIM_CC_DisableChannel(config->timer, LL_TIM_CHANNEL_CH3);
 8004822:	6822      	ldr	r2, [r4, #0]
 8004824:	6a13      	ldr	r3, [r2, #32]
 8004826:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800482a:	6213      	str	r3, [r2, #32]
	if (config->enable_comp_outputs) {
 800482c:	7b23      	ldrb	r3, [r4, #12]
 800482e:	b173      	cbz	r3, 800484e <svpwm_stm32_stop+0x58>
		LL_TIM_CC_DisableChannel(config->timer, LL_TIM_CHANNEL_CH1N);
 8004830:	6822      	ldr	r2, [r4, #0]
 8004832:	6a13      	ldr	r3, [r2, #32]
 8004834:	f023 0304 	bic.w	r3, r3, #4
 8004838:	6213      	str	r3, [r2, #32]
		LL_TIM_CC_DisableChannel(config->timer, LL_TIM_CHANNEL_CH2N);
 800483a:	6822      	ldr	r2, [r4, #0]
 800483c:	6a13      	ldr	r3, [r2, #32]
 800483e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004842:	6213      	str	r3, [r2, #32]
		LL_TIM_CC_DisableChannel(config->timer, LL_TIM_CHANNEL_CH3N);
 8004844:	6822      	ldr	r2, [r4, #0]
 8004846:	6a13      	ldr	r3, [r2, #32]
 8004848:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800484c:	6213      	str	r3, [r2, #32]
	LL_TIM_CC_DisableChannel(config->timer, LL_TIM_CHANNEL_CH4);
 800484e:	6822      	ldr	r2, [r4, #0]
 8004850:	6a13      	ldr	r3, [r2, #32]
 8004852:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004856:	6213      	str	r3, [r2, #32]
	for (size_t i = 0U; i < config->enable_len; i++) {
 8004858:	2500      	movs	r5, #0
 800485a:	6a23      	ldr	r3, [r4, #32]
 800485c:	42ab      	cmp	r3, r5
 800485e:	d800      	bhi.n	8004862 <svpwm_stm32_stop+0x6c>
}
 8004860:	bd38      	pop	{r3, r4, r5, pc}
		gpio_pin_set(config->enable[i].port, config->enable[i].pin, 0);
 8004862:	69e3      	ldr	r3, [r4, #28]
 8004864:	eb03 01c5 	add.w	r1, r3, r5, lsl #3
 8004868:	f853 0035 	ldr.w	r0, [r3, r5, lsl #3]
 800486c:	7909      	ldrb	r1, [r1, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	f7ff ffb1 	bl	80047d6 <gpio_pin_set.isra.0>
	for (size_t i = 0U; i < config->enable_len; i++) {
 8004874:	3501      	adds	r5, #1
 8004876:	e7f0      	b.n	800485a <svpwm_stm32_stop+0x64>

08004878 <svpwm_stm32_start>:
{
 8004878:	b570      	push	{r4, r5, r6, lr}
	struct svpwm_stm32_data *data = dev->data;
 800487a:	6905      	ldr	r5, [r0, #16]
	const struct svpwm_stm32_config *config = dev->config;
 800487c:	6844      	ldr	r4, [r0, #4]
	svm_init(&data->svm);
 800487e:	1d28      	adds	r0, r5, #4
 8004880:	f000 f851 	bl	8004926 <svm_init>
	data->svm.sector = 5U;
 8004884:	2105      	movs	r1, #5
 8004886:	7129      	strb	r1, [r5, #4]
	currsmp_set_sector(config->currsmp, data->svm.sector);
 8004888:	69a0      	ldr	r0, [r4, #24]
 800488a:	6883      	ldr	r3, [r0, #8]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	4798      	blx	r3
	for (size_t i = 0U; i < config->enable_len; i++) {
 8004890:	2600      	movs	r6, #0
 8004892:	6a23      	ldr	r3, [r4, #32]
 8004894:	42b3      	cmp	r3, r6
 8004896:	d83b      	bhi.n	8004910 <svpwm_stm32_start+0x98>
	LL_TIM_OC_SetCompareCH1(config->timer, data->period / 2U);
 8004898:	682b      	ldr	r3, [r5, #0]
 800489a:	6822      	ldr	r2, [r4, #0]
 800489c:	085b      	lsrs	r3, r3, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 800489e:	6353      	str	r3, [r2, #52]	; 0x34
	LL_TIM_OC_SetCompareCH2(config->timer, data->period / 2U);
 80048a0:	682b      	ldr	r3, [r5, #0]
 80048a2:	6822      	ldr	r2, [r4, #0]
 80048a4:	085b      	lsrs	r3, r3, #1
  WRITE_REG(TIMx->CCR2, CompareValue);
 80048a6:	6393      	str	r3, [r2, #56]	; 0x38
	LL_TIM_OC_SetCompareCH3(config->timer, data->period / 2U);
 80048a8:	682b      	ldr	r3, [r5, #0]
 80048aa:	6822      	ldr	r2, [r4, #0]
 80048ac:	085b      	lsrs	r3, r3, #1
  WRITE_REG(TIMx->CCR3, CompareValue);
 80048ae:	63d3      	str	r3, [r2, #60]	; 0x3c
	LL_TIM_CC_EnableChannel(config->timer, LL_TIM_CHANNEL_CH1);
 80048b0:	6822      	ldr	r2, [r4, #0]
  SET_BIT(TIMx->CCER, Channels);
 80048b2:	6a13      	ldr	r3, [r2, #32]
 80048b4:	f043 0301 	orr.w	r3, r3, #1
 80048b8:	6213      	str	r3, [r2, #32]
	LL_TIM_CC_EnableChannel(config->timer, LL_TIM_CHANNEL_CH2);
 80048ba:	6822      	ldr	r2, [r4, #0]
 80048bc:	6a13      	ldr	r3, [r2, #32]
 80048be:	f043 0310 	orr.w	r3, r3, #16
 80048c2:	6213      	str	r3, [r2, #32]
	LL_TIM_CC_EnableChannel(config->timer, LL_TIM_CHANNEL_CH3);
 80048c4:	6822      	ldr	r2, [r4, #0]
 80048c6:	6a13      	ldr	r3, [r2, #32]
 80048c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048cc:	6213      	str	r3, [r2, #32]
	if (config->enable_comp_outputs) {
 80048ce:	7b23      	ldrb	r3, [r4, #12]
 80048d0:	b173      	cbz	r3, 80048f0 <svpwm_stm32_start+0x78>
		LL_TIM_CC_EnableChannel(config->timer, LL_TIM_CHANNEL_CH1N);
 80048d2:	6822      	ldr	r2, [r4, #0]
 80048d4:	6a13      	ldr	r3, [r2, #32]
 80048d6:	f043 0304 	orr.w	r3, r3, #4
 80048da:	6213      	str	r3, [r2, #32]
		LL_TIM_CC_EnableChannel(config->timer, LL_TIM_CHANNEL_CH2N);
 80048dc:	6822      	ldr	r2, [r4, #0]
 80048de:	6a13      	ldr	r3, [r2, #32]
 80048e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048e4:	6213      	str	r3, [r2, #32]
		LL_TIM_CC_EnableChannel(config->timer, LL_TIM_CHANNEL_CH3N);
 80048e6:	6822      	ldr	r2, [r4, #0]
 80048e8:	6a13      	ldr	r3, [r2, #32]
 80048ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80048ee:	6213      	str	r3, [r2, #32]
	LL_TIM_CC_EnableChannel(config->timer, LL_TIM_CHANNEL_CH4);
 80048f0:	6822      	ldr	r2, [r4, #0]
 80048f2:	6a13      	ldr	r3, [r2, #32]
 80048f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80048f8:	6213      	str	r3, [r2, #32]
	LL_TIM_EnableAllOutputs(config->timer);
 80048fa:	6822      	ldr	r2, [r4, #0]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80048fc:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80048fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004902:	6453      	str	r3, [r2, #68]	; 0x44
	LL_TIM_EnableCounter(config->timer);
 8004904:	6822      	ldr	r2, [r4, #0]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8004906:	6813      	ldr	r3, [r2, #0]
 8004908:	f043 0301 	orr.w	r3, r3, #1
 800490c:	6013      	str	r3, [r2, #0]
}
 800490e:	bd70      	pop	{r4, r5, r6, pc}
		gpio_pin_set(config->enable[i].port, config->enable[i].pin, 1);
 8004910:	69e3      	ldr	r3, [r4, #28]
 8004912:	eb03 01c6 	add.w	r1, r3, r6, lsl #3
 8004916:	f853 0036 	ldr.w	r0, [r3, r6, lsl #3]
 800491a:	7909      	ldrb	r1, [r1, #4]
 800491c:	2201      	movs	r2, #1
 800491e:	f7ff ff5a 	bl	80047d6 <gpio_pin_set.isra.0>
	for (size_t i = 0U; i < config->enable_len; i++) {
 8004922:	3601      	adds	r6, #1
 8004924:	e7b5      	b.n	8004892 <svpwm_stm32_start+0x1a>

08004926 <svm_init>:
	svm->sector = 0U;
 8004926:	2300      	movs	r3, #0
 8004928:	7003      	strb	r3, [r0, #0]
	svm->duties.a = 0.0f;
 800492a:	2300      	movs	r3, #0
 800492c:	6043      	str	r3, [r0, #4]
	svm->duties.b = 0.0f;
 800492e:	6083      	str	r3, [r0, #8]
	svm->duties.c = 0.0f;
 8004930:	60c3      	str	r3, [r0, #12]
	svm->d_min = 0.0f;
 8004932:	6103      	str	r3, [r0, #16]
	svm->d_max = 1.0f;
 8004934:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004938:	6143      	str	r3, [r0, #20]
}
 800493a:	4770      	bx	lr

0800493c <stm32_adc_res_get>:
}
 800493c:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8004940:	4770      	bx	lr

08004942 <stm32_adc_smp_get>:
}
 8004942:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8004946:	4770      	bx	lr

08004948 <stm32_adc_t_sar_get>:

int stm32_adc_t_sar_get(uint8_t res_bits, float *t_sar)
 8004948:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800494c:	4770      	bx	lr

0800494e <arm_pid_init_f32>:
void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 800494e:	edd0 7a06 	vldr	s15, [r0, #24]
 8004952:	ed90 7a07 	vldr	s14, [r0, #28]
 8004956:	edd0 6a08 	vldr	s13, [r0, #32]
 800495a:	ee37 7a87 	vadd.f32	s14, s15, s14

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 800495e:	eef1 7a67 	vneg.f32	s15, s15
  S->A0 = S->Kp + S->Ki + S->Kd;
 8004962:	ee37 7a26 	vadd.f32	s14, s14, s13

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 8004966:	edc0 6a02 	vstr	s13, [r0, #8]
  S->A0 = S->Kp + S->Ki + S->Kd;
 800496a:	ed80 7a00 	vstr	s14, [r0]
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 800496e:	ee36 7aa6 	vadd.f32	s14, s13, s13
 8004972:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004976:	edc0 7a01 	vstr	s15, [r0, #4]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 800497a:	b119      	cbz	r1, 8004984 <arm_pid_init_f32+0x36>

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
 800497c:	2300      	movs	r3, #0
 800497e:	60c3      	str	r3, [r0, #12]
 8004980:	6103      	str	r3, [r0, #16]
 8004982:	6143      	str	r3, [r0, #20]
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
  }

}
 8004984:	4770      	bx	lr

08004986 <LL_ADC_CommonStructInit>:
  ADC_CommonInitStruct->CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV2;
 8004986:	2300      	movs	r3, #0
 8004988:	6003      	str	r3, [r0, #0]
}
 800498a:	4770      	bx	lr

0800498c <LL_ADC_Init>:
{
 800498c:	b530      	push	{r4, r5, lr}
 800498e:	4602      	mov	r2, r0
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8004990:	6880      	ldr	r0, [r0, #8]
  if(LL_ADC_IsEnabled(ADCx) == 0UL)
 8004992:	f010 0001 	ands.w	r0, r0, #1
 8004996:	d110      	bne.n	80049ba <LL_ADC_Init+0x2e>
    MODIFY_REG(ADCx->CR1,
 8004998:	6854      	ldr	r4, [r2, #4]
 800499a:	680b      	ldr	r3, [r1, #0]
 800499c:	688d      	ldr	r5, [r1, #8]
 800499e:	f024 7440 	bic.w	r4, r4, #50331648	; 0x3000000
 80049a2:	432b      	orrs	r3, r5
 80049a4:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 80049a8:	4323      	orrs	r3, r4
 80049aa:	6053      	str	r3, [r2, #4]
    MODIFY_REG(ADCx->CR2,
 80049ac:	6893      	ldr	r3, [r2, #8]
 80049ae:	6849      	ldr	r1, [r1, #4]
 80049b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80049b4:	430b      	orrs	r3, r1
 80049b6:	6093      	str	r3, [r2, #8]
}
 80049b8:	bd30      	pop	{r4, r5, pc}
    status = ERROR;
 80049ba:	2001      	movs	r0, #1
 80049bc:	e7fc      	b.n	80049b8 <LL_ADC_Init+0x2c>

080049be <LL_ADC_StructInit>:
  ADC_InitStruct->Resolution    = LL_ADC_RESOLUTION_12B;
 80049be:	2300      	movs	r3, #0
  ADC_InitStruct->DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 80049c0:	e9c0 3300 	strd	r3, r3, [r0]
  ADC_InitStruct->SequencersScanMode      = LL_ADC_SEQ_SCAN_ENABLE;
 80049c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80049c8:	6083      	str	r3, [r0, #8]
}
 80049ca:	4770      	bx	lr

080049cc <LL_ADC_REG_StructInit>:
  /* Set ADC_REG_InitStruct fields to default values */
  /* Set fields of ADC group regular */
  /* Note: On this STM32 series, ADC trigger edge is set when starting        */
  /*       ADC conversion.                                                    */
  /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().        */
  ADC_REG_InitStruct->TriggerSource    = LL_ADC_REG_TRIG_SOFTWARE;
 80049cc:	2300      	movs	r3, #0
  ADC_REG_InitStruct->SequencerLength  = LL_ADC_REG_SEQ_SCAN_DISABLE;
 80049ce:	e9c0 3300 	strd	r3, r3, [r0]
  ADC_REG_InitStruct->SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
  ADC_REG_InitStruct->ContinuousMode   = LL_ADC_REG_CONV_SINGLE;
 80049d2:	e9c0 3302 	strd	r3, r3, [r0, #8]
  ADC_REG_InitStruct->DMATransfer      = LL_ADC_REG_DMA_TRANSFER_NONE;
 80049d6:	6103      	str	r3, [r0, #16]
}
 80049d8:	4770      	bx	lr

080049da <LL_ADC_INJ_Init>:
 80049da:	6883      	ldr	r3, [r0, #8]
  }
  assert_param(IS_LL_ADC_INJ_TRIG_AUTO(ADC_INJ_InitStruct->TrigAuto));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0UL)
 80049dc:	07db      	lsls	r3, r3, #31
 80049de:	d41d      	bmi.n	8004a1c <LL_ADC_INJ_Init+0x42>
    /*    - Set ADC group injected conversion trigger: independent or         */
    /*      from ADC group regular                                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting      */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_INJ_StartConversionExtTrig().      */
    if(ADC_INJ_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 80049e0:	684b      	ldr	r3, [r1, #4]
    {
      MODIFY_REG(ADCx->CR1,
 80049e2:	68ca      	ldr	r2, [r1, #12]
    if(ADC_INJ_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 80049e4:	b1b3      	cbz	r3, 8004a14 <LL_ADC_INJ_Init+0x3a>
      MODIFY_REG(ADCx->CR1,
 80049e6:	6843      	ldr	r3, [r0, #4]
 80049e8:	f423 53a0 	bic.w	r3, r3, #5120	; 0x1400
 80049ec:	4313      	orrs	r3, r2
 80049ee:	688a      	ldr	r2, [r1, #8]
                 | ADC_INJ_InitStruct->TrigAuto
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 80049f0:	4313      	orrs	r3, r2
 80049f2:	6043      	str	r3, [r0, #4]
                   LL_ADC_REG_SEQ_DISCONT_DISABLE
                 | ADC_INJ_InitStruct->TrigAuto
                );
    }

    MODIFY_REG(ADCx->CR2,
 80049f4:	6882      	ldr	r2, [r0, #8]
 80049f6:	680b      	ldr	r3, [r1, #0]
 80049f8:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 80049fc:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8004a00:	4313      	orrs	r3, r2
 8004a02:	6083      	str	r3, [r0, #8]
  MODIFY_REG(ADCx->JSQR, ADC_JSQR_JL, SequencerNbRanks);
 8004a04:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004a06:	684a      	ldr	r2, [r1, #4]
 8004a08:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	6383      	str	r3, [r0, #56]	; 0x38
  ErrorStatus status = SUCCESS;
 8004a10:	2000      	movs	r0, #0
}
 8004a12:	4770      	bx	lr
      MODIFY_REG(ADCx->CR1,
 8004a14:	6843      	ldr	r3, [r0, #4]
 8004a16:	f423 53a0 	bic.w	r3, r3, #5120	; 0x1400
 8004a1a:	e7e9      	b.n	80049f0 <LL_ADC_INJ_Init+0x16>
    LL_ADC_INJ_SetSequencerLength(ADCx, ADC_INJ_InitStruct->SequencerLength);
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8004a1c:	2001      	movs	r0, #1
  }
  return status;
}
 8004a1e:	4770      	bx	lr

08004a20 <LL_ADC_INJ_StructInit>:
  */
void LL_ADC_INJ_StructInit(LL_ADC_INJ_InitTypeDef *ADC_INJ_InitStruct)
{
  /* Set ADC_INJ_InitStruct fields to default values */
  /* Set fields of ADC group injected */
  ADC_INJ_InitStruct->TriggerSource    = LL_ADC_INJ_TRIG_SOFTWARE;
 8004a20:	2300      	movs	r3, #0
  ADC_INJ_InitStruct->SequencerLength  = LL_ADC_INJ_SEQ_SCAN_DISABLE;
 8004a22:	e9c0 3300 	strd	r3, r3, [r0]
  ADC_INJ_InitStruct->SequencerDiscont = LL_ADC_INJ_SEQ_DISCONT_DISABLE;
  ADC_INJ_InitStruct->TrigAuto         = LL_ADC_INJ_TRIG_INDEPENDENT;
 8004a26:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
 8004a2a:	4770      	bx	lr

08004a2c <LL_TIM_StructInit>:
  TIM_InitStruct->Prescaler         = (uint16_t)0x0000;
 8004a2c:	2300      	movs	r3, #0
  TIM_InitStruct->Autoreload        = 0xFFFFFFFFU;
 8004a2e:	f04f 32ff 	mov.w	r2, #4294967295
  TIM_InitStruct->ClockDivision     = LL_TIM_CLOCKDIVISION_DIV1;
 8004a32:	e9c0 2302 	strd	r2, r3, [r0, #8]
  TIM_InitStruct->Prescaler         = (uint16_t)0x0000;
 8004a36:	8003      	strh	r3, [r0, #0]
  TIM_InitStruct->CounterMode       = LL_TIM_COUNTERMODE_UP;
 8004a38:	6043      	str	r3, [r0, #4]
  TIM_InitStruct->RepetitionCounter = 0x00000000U;
 8004a3a:	6103      	str	r3, [r0, #16]
}
 8004a3c:	4770      	bx	lr

08004a3e <LL_TIM_OC_StructInit>:
  TIM_OC_InitStruct->OCMode       = LL_TIM_OCMODE_FROZEN;
 8004a3e:	2300      	movs	r3, #0
  TIM_OC_InitStruct->OCState      = LL_TIM_OCSTATE_DISABLE;
 8004a40:	e9c0 3300 	strd	r3, r3, [r0]
  TIM_OC_InitStruct->CompareValue = 0x00000000U;
 8004a44:	e9c0 3302 	strd	r3, r3, [r0, #8]
  TIM_OC_InitStruct->OCNPolarity  = LL_TIM_OCPOLARITY_HIGH;
 8004a48:	e9c0 3304 	strd	r3, r3, [r0, #16]
  TIM_OC_InitStruct->OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8004a4c:	e9c0 3306 	strd	r3, r3, [r0, #24]
}
 8004a50:	4770      	bx	lr

08004a52 <LL_TIM_ENCODER_StructInit>:
  TIM_EncoderInitStruct->IC1Polarity    = LL_TIM_IC_POLARITY_RISING;
 8004a52:	2300      	movs	r3, #0
 8004a54:	2201      	movs	r2, #1
 8004a56:	e9c0 2300 	strd	r2, r3, [r0]
  TIM_EncoderInitStruct->IC1ActiveInput = LL_TIM_ACTIVEINPUT_DIRECTTI;
 8004a5a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  TIM_EncoderInitStruct->IC1Prescaler   = LL_TIM_ICPSC_DIV1;
 8004a5e:	e9c0 2302 	strd	r2, r3, [r0, #8]
  TIM_EncoderInitStruct->IC2Polarity    = LL_TIM_IC_POLARITY_RISING;
 8004a62:	e9c0 3304 	strd	r3, r3, [r0, #16]
  TIM_EncoderInitStruct->IC2Prescaler   = LL_TIM_ICPSC_DIV1;
 8004a66:	e9c0 2306 	strd	r2, r3, [r0, #24]
  TIM_EncoderInitStruct->IC2Filter      = LL_TIM_IC_FILTER_FDIV1;
 8004a6a:	6203      	str	r3, [r0, #32]
}
 8004a6c:	4770      	bx	lr

08004a6e <LL_TIM_ENCODER_Init>:
{
 8004a6e:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= (uint32_t)~(TIM_CCER_CC1E | TIM_CCER_CC2E);
 8004a70:	6a03      	ldr	r3, [r0, #32]
 8004a72:	f023 0311 	bic.w	r3, r3, #17
 8004a76:	6203      	str	r3, [r0, #32]
  tmpccmr1 |= (uint32_t)(TIM_EncoderInitStruct->IC1Filter >> 16U);
 8004a78:	8a4d      	ldrh	r5, [r1, #18]
  tmpccmr1 |= (uint32_t)(TIM_EncoderInitStruct->IC1ActiveInput >> 16U);
 8004a7a:	894c      	ldrh	r4, [r1, #10]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8004a7c:	6982      	ldr	r2, [r0, #24]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004a7e:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 |= (uint32_t)(TIM_EncoderInitStruct->IC1Prescaler >> 16U);
 8004a80:	432c      	orrs	r4, r5
 8004a82:	89cd      	ldrh	r5, [r1, #14]
  tmpccmr1 &= (uint32_t)~(TIM_CCMR1_CC1S | TIM_CCMR1_IC1F  | TIM_CCMR1_IC1PSC);
 8004a84:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
  tmpccmr1 |= (uint32_t)(TIM_EncoderInitStruct->IC1Prescaler >> 16U);
 8004a88:	432c      	orrs	r4, r5
 8004a8a:	4314      	orrs	r4, r2
  tmpccmr1 |= (uint32_t)(TIM_EncoderInitStruct->IC2Filter >> 8U);
 8004a8c:	6a0a      	ldr	r2, [r1, #32]
  tmpccmr1 |= (uint32_t)(TIM_EncoderInitStruct->IC2ActiveInput >> 8U);
 8004a8e:	698d      	ldr	r5, [r1, #24]
  tmpccmr1 |= (uint32_t)(TIM_EncoderInitStruct->IC2Filter >> 8U);
 8004a90:	0a12      	lsrs	r2, r2, #8
  tmpccmr1 |= (uint32_t)(TIM_EncoderInitStruct->IC2Prescaler >> 8U);
 8004a92:	ea42 2215 	orr.w	r2, r2, r5, lsr #8
 8004a96:	69cd      	ldr	r5, [r1, #28]
  tmpccmr1 &= (uint32_t)~(TIM_CCMR1_CC2S | TIM_CCMR1_IC2F  | TIM_CCMR1_IC2PSC);
 8004a98:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpccmr1 |= (uint32_t)(TIM_EncoderInitStruct->IC2Prescaler >> 8U);
 8004a9c:	ea42 2215 	orr.w	r2, r2, r5, lsr #8
 8004aa0:	4322      	orrs	r2, r4
  tmpccer |= (uint32_t)(TIM_EncoderInitStruct->IC1Polarity);
 8004aa2:	684c      	ldr	r4, [r1, #4]
  tmpccer &= (uint32_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP | TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004aa4:	f023 03aa 	bic.w	r3, r3, #170	; 0xaa
  tmpccer |= (uint32_t)(TIM_EncoderInitStruct->IC1Polarity);
 8004aa8:	4323      	orrs	r3, r4
  tmpccer |= (uint32_t)(TIM_EncoderInitStruct->IC2Polarity << 4U);
 8004aaa:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, EncoderMode);
 8004aac:	6809      	ldr	r1, [r1, #0]
 8004aae:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8004ab2:	6884      	ldr	r4, [r0, #8]
 8004ab4:	f024 0407 	bic.w	r4, r4, #7
  tmpccer |= (uint32_t)(TIM_CCER_CC1E | TIM_CCER_CC2E);
 8004ab8:	f043 0311 	orr.w	r3, r3, #17
 8004abc:	4321      	orrs	r1, r4
 8004abe:	6081      	str	r1, [r0, #8]
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8004ac0:	6182      	str	r2, [r0, #24]
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004ac2:	6203      	str	r3, [r0, #32]
}
 8004ac4:	2000      	movs	r0, #0
 8004ac6:	bd30      	pop	{r4, r5, pc}

08004ac8 <LL_TIM_BDTR_StructInit>:
  TIM_BDTRInitStruct->OSSRState       = LL_TIM_OSSR_DISABLE;
 8004ac8:	2300      	movs	r3, #0
  TIM_BDTRInitStruct->OSSIState       = LL_TIM_OSSI_DISABLE;
 8004aca:	e9c0 3300 	strd	r3, r3, [r0]
  TIM_BDTRInitStruct->AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8004ace:	e9c0 3304 	strd	r3, r3, [r0, #16]
  TIM_BDTRInitStruct->LockLevel       = LL_TIM_LOCKLEVEL_OFF;
 8004ad2:	6083      	str	r3, [r0, #8]
  TIM_BDTRInitStruct->DeadTime        = (uint8_t)0x00;
 8004ad4:	7303      	strb	r3, [r0, #12]
  TIM_BDTRInitStruct->BreakState      = LL_TIM_BREAK_DISABLE;
 8004ad6:	81c3      	strh	r3, [r0, #14]
}
 8004ad8:	4770      	bx	lr

08004ada <LL_TIM_BDTR_Init>:
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8004ada:	688a      	ldr	r2, [r1, #8]
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 8004adc:	7b0b      	ldrb	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8004ade:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8004ae0:	684a      	ldr	r2, [r1, #4]
 8004ae2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ae6:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8004ae8:	680a      	ldr	r2, [r1, #0]
 8004aea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004aee:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8004af0:	89ca      	ldrh	r2, [r1, #14]
 8004af2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004af6:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8004af8:	690a      	ldr	r2, [r1, #16]
 8004afa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004afe:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 8004b00:	694a      	ldr	r2, [r1, #20]
 8004b02:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004b06:	4313      	orrs	r3, r2
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 8004b08:	6443      	str	r3, [r0, #68]	; 0x44
}
 8004b0a:	2000      	movs	r0, #0
 8004b0c:	4770      	bx	lr

08004b0e <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
 8004b0e:	4770      	bx	lr

08004b10 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
 8004b10:	b140      	cbz	r0, 8004b24 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
 8004b12:	68c3      	ldr	r3, [r0, #12]
 8004b14:	7858      	ldrb	r0, [r3, #1]
 8004b16:	f010 0001 	ands.w	r0, r0, #1
 8004b1a:	bf1e      	ittt	ne
 8004b1c:	7818      	ldrbne	r0, [r3, #0]
 8004b1e:	fab0 f080 	clzne	r0, r0
 8004b22:	0940      	lsrne	r0, r0, #5
}
 8004b24:	4770      	bx	lr

08004b26 <arch_system_halt>:
	__asm__ volatile(
 8004b26:	f04f 0220 	mov.w	r2, #32
 8004b2a:	f3ef 8311 	mrs	r3, BASEPRI
 8004b2e:	f382 8812 	msr	BASEPRI_MAX, r2
 8004b32:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
 8004b36:	e7fe      	b.n	8004b36 <arch_system_halt+0x10>

08004b38 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
 8004b38:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
 8004b3a:	f7ff fff4 	bl	8004b26 <arch_system_halt>

08004b3e <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 8004b3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b40:	4605      	mov	r5, r0
 8004b42:	460e      	mov	r6, r1
 8004b44:	f04f 0320 	mov.w	r3, #32
 8004b48:	f3ef 8711 	mrs	r7, BASEPRI
 8004b4c:	f383 8812 	msr	BASEPRI_MAX, r3
 8004b50:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
 8004b54:	f7ff f876 	bl	8003c44 <z_impl_z_current_get>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
 8004b58:	4631      	mov	r1, r6
 8004b5a:	4604      	mov	r4, r0
 8004b5c:	4628      	mov	r0, r5
 8004b5e:	f7ff ffeb 	bl	8004b38 <k_sys_fatal_error_handler>
	__asm__ volatile(
 8004b62:	f387 8811 	msr	BASEPRI, r7
 8004b66:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
 8004b6a:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
 8004b6c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004b70:	f7fd bb64 	b.w	800223c <z_impl_k_thread_abort>

08004b74 <z_early_memset>:
 8004b74:	f7ff ba4e 	b.w	8004014 <memset>

08004b78 <z_early_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 8004b78:	f7fb bf98 	b.w	8000aac <memcpy>

08004b7c <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
 8004b7c:	b508      	push	{r3, lr}
	__asm__ volatile(
 8004b7e:	f04f 0220 	mov.w	r2, #32
 8004b82:	f3ef 8311 	mrs	r3, BASEPRI
 8004b86:	f382 8812 	msr	BASEPRI_MAX, r2
 8004b8a:	f3bf 8f6f 	isb	sy
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
 8004b8e:	f7fd f8c5 	bl	8001d1c <arch_cpu_idle>
 8004b92:	e7f4      	b.n	8004b7e <idle+0x2>

08004b94 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
 8004b94:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
 8004b98:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 8004b9a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8004b9c:	2300      	movs	r3, #0
	node->prev = NULL;
 8004b9e:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
 8004ba2:	4770      	bx	lr

08004ba4 <unpend_thread_no_timeout>:
{
 8004ba4:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
 8004ba6:	f7ff fff5 	bl	8004b94 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 8004baa:	7b43      	ldrb	r3, [r0, #13]
 8004bac:	f023 0302 	bic.w	r3, r3, #2
 8004bb0:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	6083      	str	r3, [r0, #8]
}
 8004bb6:	bd08      	pop	{r3, pc}

08004bb8 <z_thread_timeout>:
{
 8004bb8:	b510      	push	{r4, lr}
 8004bba:	4601      	mov	r1, r0
 8004bbc:	f04f 0320 	mov.w	r3, #32
 8004bc0:	f3ef 8411 	mrs	r4, BASEPRI
 8004bc4:	f383 8812 	msr	BASEPRI_MAX, r3
 8004bc8:	f3bf 8f6f 	isb	sy
		if (!killed) {
 8004bcc:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
 8004bd0:	f013 0f28 	tst.w	r3, #40	; 0x28
 8004bd4:	d10d      	bne.n	8004bf2 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
 8004bd6:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
 8004bda:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
 8004bdc:	b10b      	cbz	r3, 8004be2 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
 8004bde:	f7ff ffe1 	bl	8004ba4 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 8004be2:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
 8004be6:	f023 0314 	bic.w	r3, r3, #20
 8004bea:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
 8004bee:	f7fe ff21 	bl	8003a34 <ready_thread>
	__asm__ volatile(
 8004bf2:	f384 8811 	msr	BASEPRI, r4
 8004bf6:	f3bf 8f6f 	isb	sy
}
 8004bfa:	bd10      	pop	{r4, pc}

08004bfc <z_ready_thread>:
{
 8004bfc:	b510      	push	{r4, lr}
	__asm__ volatile(
 8004bfe:	f04f 0320 	mov.w	r3, #32
 8004c02:	f3ef 8411 	mrs	r4, BASEPRI
 8004c06:	f383 8812 	msr	BASEPRI_MAX, r3
 8004c0a:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
 8004c0e:	f7fe ff11 	bl	8003a34 <ready_thread>
	__asm__ volatile(
 8004c12:	f384 8811 	msr	BASEPRI, r4
 8004c16:	f3bf 8f6f 	isb	sy
}
 8004c1a:	bd10      	pop	{r4, pc}

08004c1c <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	b920      	cbnz	r0, 8004c2a <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c20:	f3ef 8205 	mrs	r2, IPSR
 8004c24:	b90a      	cbnz	r2, 8004c2a <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
 8004c26:	f7fd b8e1 	b.w	8001dec <arch_swap>
 8004c2a:	f383 8811 	msr	BASEPRI, r3
 8004c2e:	f3bf 8f6f 	isb	sy
}
 8004c32:	4770      	bx	lr

08004c34 <z_reschedule_unlocked>:
	__asm__ volatile(
 8004c34:	f04f 0320 	mov.w	r3, #32
 8004c38:	f3ef 8011 	mrs	r0, BASEPRI
 8004c3c:	f383 8812 	msr	BASEPRI_MAX, r3
 8004c40:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 8004c44:	f7ff bfea 	b.w	8004c1c <z_reschedule_irqlock>

08004c48 <z_abort_timeout>:
{
 8004c48:	b510      	push	{r4, lr}
 8004c4a:	f04f 0220 	mov.w	r2, #32
 8004c4e:	f3ef 8411 	mrs	r4, BASEPRI
 8004c52:	f382 8812 	msr	BASEPRI_MAX, r2
 8004c56:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
 8004c5a:	6803      	ldr	r3, [r0, #0]
 8004c5c:	b13b      	cbz	r3, 8004c6e <z_abort_timeout+0x26>
			remove_timeout(to);
 8004c5e:	f7ff f8a3 	bl	8003da8 <remove_timeout>
			ret = 0;
 8004c62:	2000      	movs	r0, #0
	__asm__ volatile(
 8004c64:	f384 8811 	msr	BASEPRI, r4
 8004c68:	f3bf 8f6f 	isb	sy
}
 8004c6c:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
 8004c6e:	f06f 0015 	mvn.w	r0, #21
 8004c72:	e7f7      	b.n	8004c64 <z_abort_timeout+0x1c>

08004c74 <z_set_timeout_expiry>:
{
 8004c74:	b570      	push	{r4, r5, r6, lr}
 8004c76:	4604      	mov	r4, r0
 8004c78:	460d      	mov	r5, r1
	__asm__ volatile(
 8004c7a:	f04f 0320 	mov.w	r3, #32
 8004c7e:	f3ef 8611 	mrs	r6, BASEPRI
 8004c82:	f383 8812 	msr	BASEPRI_MAX, r3
 8004c86:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
 8004c8a:	f7ff f865 	bl	8003d58 <next_timeout>
			      || (ticks <= next_to);
 8004c8e:	2801      	cmp	r0, #1
 8004c90:	dd07      	ble.n	8004ca2 <z_set_timeout_expiry+0x2e>
 8004c92:	42a0      	cmp	r0, r4
 8004c94:	db05      	blt.n	8004ca2 <z_set_timeout_expiry+0x2e>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
 8004c96:	42a0      	cmp	r0, r4
 8004c98:	4629      	mov	r1, r5
 8004c9a:	bfa8      	it	ge
 8004c9c:	4620      	movge	r0, r4
 8004c9e:	f7fd fda5 	bl	80027ec <sys_clock_set_timeout>
	__asm__ volatile(
 8004ca2:	f386 8811 	msr	BASEPRI, r6
 8004ca6:	f3bf 8f6f 	isb	sy
}
 8004caa:	bd70      	pop	{r4, r5, r6, pc}
