
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

08000000 <_vector_table>:
 8000000:	58 10 00 20 c1 16 00 08 13 29 00 08 95 16 00 08     X.. .....)......
 8000010:	95 16 00 08 95 16 00 08 95 16 00 08 00 00 00 00     ................
	...
 800002c:	55 13 00 08 95 16 00 08 00 00 00 00 d1 12 00 08     U...............
 800003c:	d5 1b 00 08                                         ....

08000040 <_irq_vector_table>:
 8000040:	f1 13 00 08 f1 13 00 08 f1 13 00 08 f1 13 00 08     ................
 8000050:	f1 13 00 08 f1 13 00 08 f1 13 00 08 f1 13 00 08     ................
 8000060:	f1 13 00 08 f1 13 00 08 f1 13 00 08 f1 13 00 08     ................
 8000070:	f1 13 00 08 f1 13 00 08 f1 13 00 08 f1 13 00 08     ................
 8000080:	f1 13 00 08 f1 13 00 08 f1 13 00 08 f1 13 00 08     ................
 8000090:	f1 13 00 08 f1 13 00 08 f1 13 00 08 f1 13 00 08     ................
 80000a0:	f1 13 00 08 f1 13 00 08 f1 13 00 08 f1 13 00 08     ................
 80000b0:	f1 13 00 08 f1 13 00 08 f1 13 00 08 f1 13 00 08     ................
 80000c0:	f1 13 00 08 f1 13 00 08 f1 13 00 08 f1 13 00 08     ................
 80000d0:	f1 13 00 08 f1 13 00 08 f1 13 00 08 f1 13 00 08     ................
 80000e0:	f1 13 00 08 f1 13 00 08 f1 13 00 08 f1 13 00 08     ................
 80000f0:	f1 13 00 08 f1 13 00 08 f1 13 00 08 f1 13 00 08     ................
 8000100:	f1 13 00 08 f1 13 00 08 f1 13 00 08 f1 13 00 08     ................
 8000110:	f1 13 00 08 f1 13 00 08 f1 13 00 08 f1 13 00 08     ................
 8000120:	f1 13 00 08 f1 13 00 08 f1 13 00 08 f1 13 00 08     ................
 8000130:	f1 13 00 08 f1 13 00 08 f1 13 00 08 f1 13 00 08     ................
 8000140:	f1 13 00 08 f1 13 00 08 f1 13 00 08 f1 13 00 08     ................
 8000150:	f1 13 00 08 f1 13 00 08 f1 13 00 08 f1 13 00 08     ................
 8000160:	f1 13 00 08 f1 13 00 08 f1 13 00 08 f1 13 00 08     ................
 8000170:	f1 13 00 08 f1 13 00 08 f1 13 00 08 f1 13 00 08     ................
 8000180:	f1 13 00 08 f1 13 00 08 f1 13 00 08 f1 13 00 08     ................
 8000190:	f1 13 00 08 f1 13 00 08                             ........

Disassembly of section text:

08000198 <__aeabi_uldivmod>:
 8000198:	b953      	cbnz	r3, 80001b0 <__aeabi_uldivmod+0x18>
 800019a:	b94a      	cbnz	r2, 80001b0 <__aeabi_uldivmod+0x18>
 800019c:	2900      	cmp	r1, #0
 800019e:	bf08      	it	eq
 80001a0:	2800      	cmpeq	r0, #0
 80001a2:	bf1c      	itt	ne
 80001a4:	f04f 31ff 	movne.w	r1, #4294967295
 80001a8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ac:	f000 b80c 	b.w	80001c8 <__aeabi_idiv0>
 80001b0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001b8:	f000 f808 	bl	80001cc <__udivmoddi4>
 80001bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001c4:	b004      	add	sp, #16
 80001c6:	4770      	bx	lr

080001c8 <__aeabi_idiv0>:
 80001c8:	4770      	bx	lr
 80001ca:	bf00      	nop

080001cc <__udivmoddi4>:
 80001cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001d0:	4686      	mov	lr, r0
 80001d2:	468c      	mov	ip, r1
 80001d4:	4608      	mov	r0, r1
 80001d6:	9e08      	ldr	r6, [sp, #32]
 80001d8:	4615      	mov	r5, r2
 80001da:	4674      	mov	r4, lr
 80001dc:	4619      	mov	r1, r3
 80001de:	2b00      	cmp	r3, #0
 80001e0:	f040 80c2 	bne.w	8000368 <__udivmoddi4+0x19c>
 80001e4:	4285      	cmp	r5, r0
 80001e6:	fab2 f282 	clz	r2, r2
 80001ea:	d945      	bls.n	8000278 <__udivmoddi4+0xac>
 80001ec:	b14a      	cbz	r2, 8000202 <__udivmoddi4+0x36>
 80001ee:	f1c2 0320 	rsb	r3, r2, #32
 80001f2:	fa00 fc02 	lsl.w	ip, r0, r2
 80001f6:	fa2e f303 	lsr.w	r3, lr, r3
 80001fa:	4095      	lsls	r5, r2
 80001fc:	ea43 0c0c 	orr.w	ip, r3, ip
 8000200:	4094      	lsls	r4, r2
 8000202:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000206:	b2a8      	uxth	r0, r5
 8000208:	fbbc f8fe 	udiv	r8, ip, lr
 800020c:	0c23      	lsrs	r3, r4, #16
 800020e:	fb0e cc18 	mls	ip, lr, r8, ip
 8000212:	fb08 f900 	mul.w	r9, r8, r0
 8000216:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 800021a:	4599      	cmp	r9, r3
 800021c:	d928      	bls.n	8000270 <__udivmoddi4+0xa4>
 800021e:	18eb      	adds	r3, r5, r3
 8000220:	f108 37ff 	add.w	r7, r8, #4294967295
 8000224:	d204      	bcs.n	8000230 <__udivmoddi4+0x64>
 8000226:	4599      	cmp	r9, r3
 8000228:	d902      	bls.n	8000230 <__udivmoddi4+0x64>
 800022a:	f1a8 0702 	sub.w	r7, r8, #2
 800022e:	442b      	add	r3, r5
 8000230:	eba3 0309 	sub.w	r3, r3, r9
 8000234:	b2a4      	uxth	r4, r4
 8000236:	fbb3 fcfe 	udiv	ip, r3, lr
 800023a:	fb0e 331c 	mls	r3, lr, ip, r3
 800023e:	fb0c f000 	mul.w	r0, ip, r0
 8000242:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000246:	42a0      	cmp	r0, r4
 8000248:	d914      	bls.n	8000274 <__udivmoddi4+0xa8>
 800024a:	192c      	adds	r4, r5, r4
 800024c:	f10c 33ff 	add.w	r3, ip, #4294967295
 8000250:	d204      	bcs.n	800025c <__udivmoddi4+0x90>
 8000252:	42a0      	cmp	r0, r4
 8000254:	d902      	bls.n	800025c <__udivmoddi4+0x90>
 8000256:	f1ac 0302 	sub.w	r3, ip, #2
 800025a:	442c      	add	r4, r5
 800025c:	1a24      	subs	r4, r4, r0
 800025e:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
 8000262:	b11e      	cbz	r6, 800026c <__udivmoddi4+0xa0>
 8000264:	40d4      	lsrs	r4, r2
 8000266:	2300      	movs	r3, #0
 8000268:	6034      	str	r4, [r6, #0]
 800026a:	6073      	str	r3, [r6, #4]
 800026c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000270:	4647      	mov	r7, r8
 8000272:	e7dd      	b.n	8000230 <__udivmoddi4+0x64>
 8000274:	4663      	mov	r3, ip
 8000276:	e7f1      	b.n	800025c <__udivmoddi4+0x90>
 8000278:	bb92      	cbnz	r2, 80002e0 <__udivmoddi4+0x114>
 800027a:	1b43      	subs	r3, r0, r5
 800027c:	2101      	movs	r1, #1
 800027e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000282:	b2af      	uxth	r7, r5
 8000284:	fbb3 fcfe 	udiv	ip, r3, lr
 8000288:	0c20      	lsrs	r0, r4, #16
 800028a:	fb0e 331c 	mls	r3, lr, ip, r3
 800028e:	fb0c f807 	mul.w	r8, ip, r7
 8000292:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000296:	4598      	cmp	r8, r3
 8000298:	d962      	bls.n	8000360 <__udivmoddi4+0x194>
 800029a:	18eb      	adds	r3, r5, r3
 800029c:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002a0:	d204      	bcs.n	80002ac <__udivmoddi4+0xe0>
 80002a2:	4598      	cmp	r8, r3
 80002a4:	d902      	bls.n	80002ac <__udivmoddi4+0xe0>
 80002a6:	f1ac 0002 	sub.w	r0, ip, #2
 80002aa:	442b      	add	r3, r5
 80002ac:	eba3 0308 	sub.w	r3, r3, r8
 80002b0:	b2a4      	uxth	r4, r4
 80002b2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002b6:	fb0e 331c 	mls	r3, lr, ip, r3
 80002ba:	fb0c f707 	mul.w	r7, ip, r7
 80002be:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c2:	42a7      	cmp	r7, r4
 80002c4:	d94e      	bls.n	8000364 <__udivmoddi4+0x198>
 80002c6:	192c      	adds	r4, r5, r4
 80002c8:	f10c 33ff 	add.w	r3, ip, #4294967295
 80002cc:	d204      	bcs.n	80002d8 <__udivmoddi4+0x10c>
 80002ce:	42a7      	cmp	r7, r4
 80002d0:	d902      	bls.n	80002d8 <__udivmoddi4+0x10c>
 80002d2:	f1ac 0302 	sub.w	r3, ip, #2
 80002d6:	442c      	add	r4, r5
 80002d8:	1be4      	subs	r4, r4, r7
 80002da:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80002de:	e7c0      	b.n	8000262 <__udivmoddi4+0x96>
 80002e0:	f1c2 0320 	rsb	r3, r2, #32
 80002e4:	fa20 f103 	lsr.w	r1, r0, r3
 80002e8:	4095      	lsls	r5, r2
 80002ea:	4090      	lsls	r0, r2
 80002ec:	fa2e f303 	lsr.w	r3, lr, r3
 80002f0:	4303      	orrs	r3, r0
 80002f2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f6:	b2af      	uxth	r7, r5
 80002f8:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fc:	fb0e 101c 	mls	r0, lr, ip, r1
 8000300:	0c19      	lsrs	r1, r3, #16
 8000302:	fb0c f807 	mul.w	r8, ip, r7
 8000306:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800030a:	4588      	cmp	r8, r1
 800030c:	fa04 f402 	lsl.w	r4, r4, r2
 8000310:	d922      	bls.n	8000358 <__udivmoddi4+0x18c>
 8000312:	1869      	adds	r1, r5, r1
 8000314:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000318:	d204      	bcs.n	8000324 <__udivmoddi4+0x158>
 800031a:	4588      	cmp	r8, r1
 800031c:	d902      	bls.n	8000324 <__udivmoddi4+0x158>
 800031e:	f1ac 0002 	sub.w	r0, ip, #2
 8000322:	4429      	add	r1, r5
 8000324:	eba1 0108 	sub.w	r1, r1, r8
 8000328:	b29b      	uxth	r3, r3
 800032a:	fbb1 fcfe 	udiv	ip, r1, lr
 800032e:	fb0e 111c 	mls	r1, lr, ip, r1
 8000332:	fb0c f707 	mul.w	r7, ip, r7
 8000336:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800033a:	429f      	cmp	r7, r3
 800033c:	d90e      	bls.n	800035c <__udivmoddi4+0x190>
 800033e:	18eb      	adds	r3, r5, r3
 8000340:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000344:	d204      	bcs.n	8000350 <__udivmoddi4+0x184>
 8000346:	429f      	cmp	r7, r3
 8000348:	d902      	bls.n	8000350 <__udivmoddi4+0x184>
 800034a:	f1ac 0102 	sub.w	r1, ip, #2
 800034e:	442b      	add	r3, r5
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000356:	e792      	b.n	800027e <__udivmoddi4+0xb2>
 8000358:	4660      	mov	r0, ip
 800035a:	e7e3      	b.n	8000324 <__udivmoddi4+0x158>
 800035c:	4661      	mov	r1, ip
 800035e:	e7f7      	b.n	8000350 <__udivmoddi4+0x184>
 8000360:	4660      	mov	r0, ip
 8000362:	e7a3      	b.n	80002ac <__udivmoddi4+0xe0>
 8000364:	4663      	mov	r3, ip
 8000366:	e7b7      	b.n	80002d8 <__udivmoddi4+0x10c>
 8000368:	4283      	cmp	r3, r0
 800036a:	d906      	bls.n	800037a <__udivmoddi4+0x1ae>
 800036c:	b916      	cbnz	r6, 8000374 <__udivmoddi4+0x1a8>
 800036e:	2100      	movs	r1, #0
 8000370:	4608      	mov	r0, r1
 8000372:	e77b      	b.n	800026c <__udivmoddi4+0xa0>
 8000374:	e9c6 e000 	strd	lr, r0, [r6]
 8000378:	e7f9      	b.n	800036e <__udivmoddi4+0x1a2>
 800037a:	fab3 f783 	clz	r7, r3
 800037e:	b98f      	cbnz	r7, 80003a4 <__udivmoddi4+0x1d8>
 8000380:	4283      	cmp	r3, r0
 8000382:	d301      	bcc.n	8000388 <__udivmoddi4+0x1bc>
 8000384:	4572      	cmp	r2, lr
 8000386:	d808      	bhi.n	800039a <__udivmoddi4+0x1ce>
 8000388:	ebbe 0402 	subs.w	r4, lr, r2
 800038c:	eb60 0303 	sbc.w	r3, r0, r3
 8000390:	2001      	movs	r0, #1
 8000392:	469c      	mov	ip, r3
 8000394:	b91e      	cbnz	r6, 800039e <__udivmoddi4+0x1d2>
 8000396:	2100      	movs	r1, #0
 8000398:	e768      	b.n	800026c <__udivmoddi4+0xa0>
 800039a:	4638      	mov	r0, r7
 800039c:	e7fa      	b.n	8000394 <__udivmoddi4+0x1c8>
 800039e:	e9c6 4c00 	strd	r4, ip, [r6]
 80003a2:	e7f8      	b.n	8000396 <__udivmoddi4+0x1ca>
 80003a4:	f1c7 0c20 	rsb	ip, r7, #32
 80003a8:	40bb      	lsls	r3, r7
 80003aa:	fa22 f40c 	lsr.w	r4, r2, ip
 80003ae:	431c      	orrs	r4, r3
 80003b0:	fa2e f10c 	lsr.w	r1, lr, ip
 80003b4:	fa20 f30c 	lsr.w	r3, r0, ip
 80003b8:	40b8      	lsls	r0, r7
 80003ba:	4301      	orrs	r1, r0
 80003bc:	ea4f 4914 	mov.w	r9, r4, lsr #16
 80003c0:	fa0e f507 	lsl.w	r5, lr, r7
 80003c4:	fbb3 f8f9 	udiv	r8, r3, r9
 80003c8:	fa1f fe84 	uxth.w	lr, r4
 80003cc:	fb09 3018 	mls	r0, r9, r8, r3
 80003d0:	0c0b      	lsrs	r3, r1, #16
 80003d2:	fb08 fa0e 	mul.w	sl, r8, lr
 80003d6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80003da:	459a      	cmp	sl, r3
 80003dc:	fa02 f207 	lsl.w	r2, r2, r7
 80003e0:	d940      	bls.n	8000464 <__udivmoddi4+0x298>
 80003e2:	18e3      	adds	r3, r4, r3
 80003e4:	f108 30ff 	add.w	r0, r8, #4294967295
 80003e8:	d204      	bcs.n	80003f4 <__udivmoddi4+0x228>
 80003ea:	459a      	cmp	sl, r3
 80003ec:	d902      	bls.n	80003f4 <__udivmoddi4+0x228>
 80003ee:	f1a8 0002 	sub.w	r0, r8, #2
 80003f2:	4423      	add	r3, r4
 80003f4:	eba3 030a 	sub.w	r3, r3, sl
 80003f8:	b289      	uxth	r1, r1
 80003fa:	fbb3 f8f9 	udiv	r8, r3, r9
 80003fe:	fb09 3318 	mls	r3, r9, r8, r3
 8000402:	fb08 fe0e 	mul.w	lr, r8, lr
 8000406:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800040a:	458e      	cmp	lr, r1
 800040c:	d92c      	bls.n	8000468 <__udivmoddi4+0x29c>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f108 33ff 	add.w	r3, r8, #4294967295
 8000414:	d204      	bcs.n	8000420 <__udivmoddi4+0x254>
 8000416:	458e      	cmp	lr, r1
 8000418:	d902      	bls.n	8000420 <__udivmoddi4+0x254>
 800041a:	f1a8 0302 	sub.w	r3, r8, #2
 800041e:	4421      	add	r1, r4
 8000420:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000424:	fba0 9802 	umull	r9, r8, r0, r2
 8000428:	eba1 010e 	sub.w	r1, r1, lr
 800042c:	4541      	cmp	r1, r8
 800042e:	46ce      	mov	lr, r9
 8000430:	4643      	mov	r3, r8
 8000432:	d302      	bcc.n	800043a <__udivmoddi4+0x26e>
 8000434:	d106      	bne.n	8000444 <__udivmoddi4+0x278>
 8000436:	454d      	cmp	r5, r9
 8000438:	d204      	bcs.n	8000444 <__udivmoddi4+0x278>
 800043a:	ebb9 0e02 	subs.w	lr, r9, r2
 800043e:	eb68 0304 	sbc.w	r3, r8, r4
 8000442:	3801      	subs	r0, #1
 8000444:	2e00      	cmp	r6, #0
 8000446:	d0a6      	beq.n	8000396 <__udivmoddi4+0x1ca>
 8000448:	ebb5 020e 	subs.w	r2, r5, lr
 800044c:	eb61 0103 	sbc.w	r1, r1, r3
 8000450:	fa01 fc0c 	lsl.w	ip, r1, ip
 8000454:	fa22 f307 	lsr.w	r3, r2, r7
 8000458:	ea4c 0303 	orr.w	r3, ip, r3
 800045c:	40f9      	lsrs	r1, r7
 800045e:	e9c6 3100 	strd	r3, r1, [r6]
 8000462:	e798      	b.n	8000396 <__udivmoddi4+0x1ca>
 8000464:	4640      	mov	r0, r8
 8000466:	e7c5      	b.n	80003f4 <__udivmoddi4+0x228>
 8000468:	4643      	mov	r3, r8
 800046a:	e7d9      	b.n	8000420 <__udivmoddi4+0x254>
 800046c:	0000      	movs	r0, r0
	...

08000470 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
 8000470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000474:	b09f      	sub	sp, #124	; 0x7c
 8000476:	4682      	mov	sl, r0
 8000478:	9103      	str	r1, [sp, #12]
 800047a:	4616      	mov	r6, r2
 800047c:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
 800047e:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
 8000480:	7830      	ldrb	r0, [r6, #0]
 8000482:	b910      	cbnz	r0, 800048a <z_cbvprintf_impl+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
 8000484:	4628      	mov	r0, r5
 8000486:	f000 bd85 	b.w	8000f94 <z_cbvprintf_impl+0xb24>
			OUTC(*fp++);
 800048a:	1c73      	adds	r3, r6, #1
		if (*fp != '%') {
 800048c:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
 800048e:	9306      	str	r3, [sp, #24]
		if (*fp != '%') {
 8000490:	d006      	beq.n	80004a0 <z_cbvprintf_impl+0x30>
			OUTC(*fp++);
 8000492:	9903      	ldr	r1, [sp, #12]
			OUTC('%');
 8000494:	47d0      	blx	sl
 8000496:	2800      	cmp	r0, #0
 8000498:	f2c0 857c 	blt.w	8000f94 <z_cbvprintf_impl+0xb24>
 800049c:	3501      	adds	r5, #1
		if (bps == NULL) {
 800049e:	e227      	b.n	80008f0 <z_cbvprintf_impl+0x480>
		} state = {
 80004a0:	2218      	movs	r2, #24
 80004a2:	2100      	movs	r1, #0
 80004a4:	a810      	add	r0, sp, #64	; 0x40
 80004a6:	f002 fa56 	bl	8002956 <memset>
	if (*sp == '%') {
 80004aa:	7873      	ldrb	r3, [r6, #1]
 80004ac:	2b25      	cmp	r3, #37	; 0x25
 80004ae:	d07d      	beq.n	80005ac <z_cbvprintf_impl+0x13c>
 80004b0:	2300      	movs	r3, #0
 80004b2:	1c70      	adds	r0, r6, #1
 80004b4:	4698      	mov	r8, r3
 80004b6:	469e      	mov	lr, r3
 80004b8:	469c      	mov	ip, r3
 80004ba:	461f      	mov	r7, r3
 80004bc:	4601      	mov	r1, r0
		switch (*sp) {
 80004be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80004c2:	2a2b      	cmp	r2, #43	; 0x2b
 80004c4:	f000 80a1 	beq.w	800060a <z_cbvprintf_impl+0x19a>
 80004c8:	f200 8098 	bhi.w	80005fc <z_cbvprintf_impl+0x18c>
 80004cc:	2a20      	cmp	r2, #32
 80004ce:	f000 809f 	beq.w	8000610 <z_cbvprintf_impl+0x1a0>
 80004d2:	2a23      	cmp	r2, #35	; 0x23
 80004d4:	f000 809f 	beq.w	8000616 <z_cbvprintf_impl+0x1a6>
 80004d8:	b12b      	cbz	r3, 80004e6 <z_cbvprintf_impl+0x76>
 80004da:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80004de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004e2:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
 80004e6:	f1b8 0f00 	cmp.w	r8, #0
 80004ea:	d005      	beq.n	80004f8 <z_cbvprintf_impl+0x88>
 80004ec:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80004f0:	f043 0320 	orr.w	r3, r3, #32
 80004f4:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
 80004f8:	f1be 0f00 	cmp.w	lr, #0
 80004fc:	d005      	beq.n	800050a <z_cbvprintf_impl+0x9a>
 80004fe:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8000502:	f043 0310 	orr.w	r3, r3, #16
 8000506:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
 800050a:	f1bc 0f00 	cmp.w	ip, #0
 800050e:	d005      	beq.n	800051c <z_cbvprintf_impl+0xac>
 8000510:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8000514:	f043 0308 	orr.w	r3, r3, #8
 8000518:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
 800051c:	b12f      	cbz	r7, 800052a <z_cbvprintf_impl+0xba>
 800051e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8000522:	f043 0304 	orr.w	r3, r3, #4
 8000526:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (conv->flag_zero && conv->flag_dash) {
 800052a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 800052e:	f003 0044 	and.w	r0, r3, #68	; 0x44
 8000532:	2844      	cmp	r0, #68	; 0x44
 8000534:	d103      	bne.n	800053e <z_cbvprintf_impl+0xce>
		conv->flag_zero = false;
 8000536:	f36f 1386 	bfc	r3, #6, #1
 800053a:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	conv->width_present = true;
 800053e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
 8000542:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
 8000544:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000548:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
 800054c:	d17f      	bne.n	800064e <z_cbvprintf_impl+0x1de>
		conv->width_star = true;
 800054e:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 8000552:	f042 0201 	orr.w	r2, r2, #1
		return ++sp;
 8000556:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
 8000558:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	conv->prec_present = (*sp == '.');
 800055c:	781a      	ldrb	r2, [r3, #0]
 800055e:	2a2e      	cmp	r2, #46	; 0x2e
 8000560:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 8000564:	bf0c      	ite	eq
 8000566:	2101      	moveq	r1, #1
 8000568:	2100      	movne	r1, #0
 800056a:	f361 0241 	bfi	r2, r1, #1, #1
 800056e:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	if (!conv->prec_present) {
 8000572:	d178      	bne.n	8000666 <z_cbvprintf_impl+0x1f6>
	if (*sp == '*') {
 8000574:	785a      	ldrb	r2, [r3, #1]
 8000576:	2a2a      	cmp	r2, #42	; 0x2a
 8000578:	d06e      	beq.n	8000658 <z_cbvprintf_impl+0x1e8>
	++sp;
 800057a:	3301      	adds	r3, #1
	size_t val = 0;
 800057c:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
 800057e:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
 8000582:	4619      	mov	r1, r3
 8000584:	f811 0b01 	ldrb.w	r0, [r1], #1
 8000588:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
 800058c:	2f09      	cmp	r7, #9
 800058e:	f240 80ad 	bls.w	80006ec <z_cbvprintf_impl+0x27c>
	conv->unsupported |= ((conv->prec_value < 0)
 8000592:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
	conv->prec_value = prec;
 8000596:	9214      	str	r2, [sp, #80]	; 0x50
	conv->unsupported |= ((conv->prec_value < 0)
 8000598:	f3c1 0040 	ubfx	r0, r1, #1, #1
 800059c:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
 80005a0:	460a      	mov	r2, r1
 80005a2:	f360 0241 	bfi	r2, r0, #1, #1
 80005a6:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
 80005aa:	e05c      	b.n	8000666 <z_cbvprintf_impl+0x1f6>
		conv->specifier = *sp++;
 80005ac:	1cb2      	adds	r2, r6, #2
 80005ae:	9206      	str	r2, [sp, #24]
 80005b0:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->width_star) {
 80005b4:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
 80005b8:	07d9      	lsls	r1, r3, #31
 80005ba:	f140 8150 	bpl.w	800085e <z_cbvprintf_impl+0x3ee>
			width = va_arg(ap, int);
 80005be:	f854 2b04 	ldr.w	r2, [r4], #4
 80005c2:	9204      	str	r2, [sp, #16]
			if (width < 0) {
 80005c4:	2a00      	cmp	r2, #0
 80005c6:	da08      	bge.n	80005da <z_cbvprintf_impl+0x16a>
				conv->flag_dash = true;
 80005c8:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 80005cc:	f042 0204 	orr.w	r2, r2, #4
 80005d0:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				width = -width;
 80005d4:	9a04      	ldr	r2, [sp, #16]
 80005d6:	4252      	negs	r2, r2
		int width = -1;
 80005d8:	9204      	str	r2, [sp, #16]
		if (conv->prec_star) {
 80005da:	075a      	lsls	r2, r3, #29
 80005dc:	f140 8147 	bpl.w	800086e <z_cbvprintf_impl+0x3fe>
			int arg = va_arg(ap, int);
 80005e0:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
 80005e4:	2f00      	cmp	r7, #0
 80005e6:	f280 8146 	bge.w	8000876 <z_cbvprintf_impl+0x406>
				conv->prec_present = false;
 80005ea:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
 80005ee:	f36f 0341 	bfc	r3, #1, #1
 80005f2:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		int precision = -1;
 80005f6:	f04f 37ff 	mov.w	r7, #4294967295
 80005fa:	e13c      	b.n	8000876 <z_cbvprintf_impl+0x406>
		switch (*sp) {
 80005fc:	2a2d      	cmp	r2, #45	; 0x2d
 80005fe:	d00d      	beq.n	800061c <z_cbvprintf_impl+0x1ac>
 8000600:	2a30      	cmp	r2, #48	; 0x30
 8000602:	f47f af69 	bne.w	80004d8 <z_cbvprintf_impl+0x68>
 8000606:	2301      	movs	r3, #1
	} while (loop);
 8000608:	e758      	b.n	80004bc <z_cbvprintf_impl+0x4c>
		switch (*sp) {
 800060a:	f04f 0c01 	mov.w	ip, #1
 800060e:	e755      	b.n	80004bc <z_cbvprintf_impl+0x4c>
 8000610:	f04f 0e01 	mov.w	lr, #1
 8000614:	e752      	b.n	80004bc <z_cbvprintf_impl+0x4c>
 8000616:	f04f 0801 	mov.w	r8, #1
 800061a:	e74f      	b.n	80004bc <z_cbvprintf_impl+0x4c>
 800061c:	2701      	movs	r7, #1
 800061e:	e74d      	b.n	80004bc <z_cbvprintf_impl+0x4c>
		val = 10U * val + *sp++ - '0';
 8000620:	fb0e 7202 	mla	r2, lr, r2, r7
 8000624:	3a30      	subs	r2, #48	; 0x30
 8000626:	4603      	mov	r3, r0
 8000628:	4618      	mov	r0, r3
 800062a:	f810 7b01 	ldrb.w	r7, [r0], #1
 800062e:	f1a7 0c30 	sub.w	ip, r7, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
 8000632:	f1bc 0f09 	cmp.w	ip, #9
 8000636:	d9f3      	bls.n	8000620 <z_cbvprintf_impl+0x1b0>
	if (sp != wp) {
 8000638:	4299      	cmp	r1, r3
 800063a:	d08f      	beq.n	800055c <z_cbvprintf_impl+0xec>
		conv->unsupported |= ((conv->width_value < 0)
 800063c:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
		conv->width_value = width;
 8000640:	9213      	str	r2, [sp, #76]	; 0x4c
				      || (width != (size_t)conv->width_value));
 8000642:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
 8000644:	f362 0141 	bfi	r1, r2, #1, #1
 8000648:	f88d 1048 	strb.w	r1, [sp, #72]	; 0x48
 800064c:	e786      	b.n	800055c <z_cbvprintf_impl+0xec>
 800064e:	460b      	mov	r3, r1
	size_t val = 0;
 8000650:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
 8000652:	f04f 0e0a 	mov.w	lr, #10
 8000656:	e7e7      	b.n	8000628 <z_cbvprintf_impl+0x1b8>
		conv->prec_star = true;
 8000658:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 800065c:	f042 0204 	orr.w	r2, r2, #4
 8000660:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		return ++sp;
 8000664:	3302      	adds	r3, #2
	switch (*sp) {
 8000666:	781a      	ldrb	r2, [r3, #0]
 8000668:	2a6c      	cmp	r2, #108	; 0x6c
 800066a:	d05f      	beq.n	800072c <z_cbvprintf_impl+0x2bc>
 800066c:	d843      	bhi.n	80006f6 <z_cbvprintf_impl+0x286>
 800066e:	2a68      	cmp	r2, #104	; 0x68
 8000670:	d049      	beq.n	8000706 <z_cbvprintf_impl+0x296>
 8000672:	2a6a      	cmp	r2, #106	; 0x6a
 8000674:	d063      	beq.n	800073e <z_cbvprintf_impl+0x2ce>
 8000676:	2a4c      	cmp	r2, #76	; 0x4c
 8000678:	d069      	beq.n	800074e <z_cbvprintf_impl+0x2de>
	conv->specifier = *sp++;
 800067a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800067e:	9306      	str	r3, [sp, #24]
	switch (conv->specifier) {
 8000680:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
 8000682:	f88d 204b 	strb.w	r2, [sp, #75]	; 0x4b
	switch (conv->specifier) {
 8000686:	f200 80a9 	bhi.w	80007dc <z_cbvprintf_impl+0x36c>
 800068a:	2a6d      	cmp	r2, #109	; 0x6d
 800068c:	d86c      	bhi.n	8000768 <z_cbvprintf_impl+0x2f8>
 800068e:	2a69      	cmp	r2, #105	; 0x69
 8000690:	f200 80a4 	bhi.w	80007dc <z_cbvprintf_impl+0x36c>
 8000694:	2a57      	cmp	r2, #87	; 0x57
 8000696:	f200 8084 	bhi.w	80007a2 <z_cbvprintf_impl+0x332>
 800069a:	2a41      	cmp	r2, #65	; 0x41
 800069c:	d004      	beq.n	80006a8 <z_cbvprintf_impl+0x238>
 800069e:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
 80006a2:	2b02      	cmp	r3, #2
 80006a4:	f200 809a 	bhi.w	80007dc <z_cbvprintf_impl+0x36c>
		conv->specifier_cat = SPECIFIER_FP;
 80006a8:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
			|| (conv->specifier == 'A');
 80006ac:	f002 02df 	and.w	r2, r2, #223	; 0xdf
		conv->specifier_cat = SPECIFIER_FP;
 80006b0:	2104      	movs	r1, #4
			|| (conv->specifier == 'A');
 80006b2:	f1a2 0741 	sub.w	r7, r2, #65	; 0x41
		conv->specifier_cat = SPECIFIER_FP;
 80006b6:	f361 0302 	bfi	r3, r1, #0, #3
			|| (conv->specifier == 'A');
 80006ba:	427a      	negs	r2, r7
		conv->specifier_a = (conv->specifier == 'a')
 80006bc:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
		conv->specifier_cat = SPECIFIER_FP;
 80006c0:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
			|| (conv->specifier == 'A');
 80006c4:	417a      	adcs	r2, r7
		conv->specifier_a = (conv->specifier == 'a')
 80006c6:	f362 11c7 	bfi	r1, r2, #7, #1
		if (conv->specifier_a
 80006ca:	060a      	lsls	r2, r1, #24
		conv->specifier_a = (conv->specifier == 'a')
 80006cc:	f88d 1049 	strb.w	r1, [sp, #73]	; 0x49
		if (conv->specifier_a
 80006d0:	b2cb      	uxtb	r3, r1
 80006d2:	f100 80c2 	bmi.w	800085a <z_cbvprintf_impl+0x3ea>
		if (conv->length_mod == LENGTH_L) {
 80006d6:	f003 0278 	and.w	r2, r3, #120	; 0x78
 80006da:	2a18      	cmp	r2, #24
 80006dc:	f040 80ac 	bne.w	8000838 <z_cbvprintf_impl+0x3c8>
			conv->length_mod = LENGTH_NONE;
 80006e0:	f36f 03c6 	bfc	r3, #3, #4
 80006e4:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
	bool unsupported = false;
 80006e8:	2300      	movs	r3, #0
 80006ea:	e09b      	b.n	8000824 <z_cbvprintf_impl+0x3b4>
		val = 10U * val + *sp++ - '0';
 80006ec:	fb0c 0202 	mla	r2, ip, r2, r0
 80006f0:	3a30      	subs	r2, #48	; 0x30
 80006f2:	460b      	mov	r3, r1
 80006f4:	e745      	b.n	8000582 <z_cbvprintf_impl+0x112>
	switch (*sp) {
 80006f6:	2a74      	cmp	r2, #116	; 0x74
 80006f8:	d025      	beq.n	8000746 <z_cbvprintf_impl+0x2d6>
 80006fa:	2a7a      	cmp	r2, #122	; 0x7a
 80006fc:	d1bd      	bne.n	800067a <z_cbvprintf_impl+0x20a>
		conv->length_mod = LENGTH_Z;
 80006fe:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 8000702:	2106      	movs	r1, #6
 8000704:	e00c      	b.n	8000720 <z_cbvprintf_impl+0x2b0>
		if (*++sp == 'h') {
 8000706:	785a      	ldrb	r2, [r3, #1]
 8000708:	2a68      	cmp	r2, #104	; 0x68
 800070a:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 800070e:	d106      	bne.n	800071e <z_cbvprintf_impl+0x2ae>
			conv->length_mod = LENGTH_HH;
 8000710:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
 8000712:	f361 02c6 	bfi	r2, r1, #3, #4
 8000716:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
			++sp;
 800071a:	3302      	adds	r3, #2
 800071c:	e7ad      	b.n	800067a <z_cbvprintf_impl+0x20a>
			conv->length_mod = LENGTH_H;
 800071e:	2102      	movs	r1, #2
 8000720:	f361 02c6 	bfi	r2, r1, #3, #4
 8000724:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		if (*++sp == 'h') {
 8000728:	3301      	adds	r3, #1
 800072a:	e7a6      	b.n	800067a <z_cbvprintf_impl+0x20a>
		if (*++sp == 'l') {
 800072c:	785a      	ldrb	r2, [r3, #1]
 800072e:	2a6c      	cmp	r2, #108	; 0x6c
 8000730:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 8000734:	d101      	bne.n	800073a <z_cbvprintf_impl+0x2ca>
			conv->length_mod = LENGTH_LL;
 8000736:	2104      	movs	r1, #4
 8000738:	e7eb      	b.n	8000712 <z_cbvprintf_impl+0x2a2>
			conv->length_mod = LENGTH_L;
 800073a:	2103      	movs	r1, #3
 800073c:	e7f0      	b.n	8000720 <z_cbvprintf_impl+0x2b0>
		conv->length_mod = LENGTH_J;
 800073e:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 8000742:	2105      	movs	r1, #5
 8000744:	e7ec      	b.n	8000720 <z_cbvprintf_impl+0x2b0>
		conv->length_mod = LENGTH_T;
 8000746:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 800074a:	2107      	movs	r1, #7
 800074c:	e7e8      	b.n	8000720 <z_cbvprintf_impl+0x2b0>
		conv->unsupported = true;
 800074e:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8000752:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 8000756:	f022 0202 	bic.w	r2, r2, #2
 800075a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800075e:	f042 0202 	orr.w	r2, r2, #2
 8000762:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
		break;
 8000766:	e7df      	b.n	8000728 <z_cbvprintf_impl+0x2b8>
	switch (conv->specifier) {
 8000768:	3a6e      	subs	r2, #110	; 0x6e
 800076a:	b2d3      	uxtb	r3, r2
 800076c:	2201      	movs	r2, #1
 800076e:	409a      	lsls	r2, r3
 8000770:	f240 4382 	movw	r3, #1154	; 0x482
 8000774:	421a      	tst	r2, r3
 8000776:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
 800077a:	d136      	bne.n	80007ea <z_cbvprintf_impl+0x37a>
 800077c:	f012 0f24 	tst.w	r2, #36	; 0x24
 8000780:	d15e      	bne.n	8000840 <z_cbvprintf_impl+0x3d0>
 8000782:	07d1      	lsls	r1, r2, #31
 8000784:	d52a      	bpl.n	80007dc <z_cbvprintf_impl+0x36c>
		conv->specifier_cat = SPECIFIER_PTR;
 8000786:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
 800078a:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800078e:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
 8000792:	2103      	movs	r1, #3
 8000794:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
 8000798:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
 800079a:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
 800079e:	4143      	adcs	r3, r0
 80007a0:	e040      	b.n	8000824 <z_cbvprintf_impl+0x3b4>
	switch (conv->specifier) {
 80007a2:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
 80007a6:	b2c9      	uxtb	r1, r1
 80007a8:	2001      	movs	r0, #1
 80007aa:	fa00 f101 	lsl.w	r1, r0, r1
 80007ae:	f411 4f62 	tst.w	r1, #57856	; 0xe200
 80007b2:	f47f af79 	bne.w	80006a8 <z_cbvprintf_impl+0x238>
 80007b6:	f640 0301 	movw	r3, #2049	; 0x801
 80007ba:	4219      	tst	r1, r3
 80007bc:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
 80007c0:	d119      	bne.n	80007f6 <z_cbvprintf_impl+0x386>
 80007c2:	f411 3f04 	tst.w	r1, #135168	; 0x21000
 80007c6:	d009      	beq.n	80007dc <z_cbvprintf_impl+0x36c>
		conv->specifier_cat = SPECIFIER_SINT;
 80007c8:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
 80007cc:	f360 0202 	bfi	r2, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
 80007d0:	f003 0378 	and.w	r3, r3, #120	; 0x78
 80007d4:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
 80007d6:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
 80007da:	d185      	bne.n	80006e8 <z_cbvprintf_impl+0x278>
		conv->invalid = true;
 80007dc:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		break;
 80007e8:	e77e      	b.n	80006e8 <z_cbvprintf_impl+0x278>
		conv->specifier_cat = SPECIFIER_UINT;
 80007ea:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
 80007ee:	2102      	movs	r1, #2
 80007f0:	f361 0202 	bfi	r2, r1, #0, #3
 80007f4:	e7ec      	b.n	80007d0 <z_cbvprintf_impl+0x360>
 80007f6:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
 80007fa:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
 80007fc:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
 8000800:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
 8000804:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
 8000806:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			conv->invalid = true;
 800080a:	bf02      	ittt	eq
 800080c:	f89d 1048 	ldrbeq.w	r1, [sp, #72]	; 0x48
 8000810:	f041 0101 	orreq.w	r1, r1, #1
 8000814:	f88d 1048 	strbeq.w	r1, [sp, #72]	; 0x48
		if (conv->specifier == 'c') {
 8000818:	2a63      	cmp	r2, #99	; 0x63
 800081a:	f47f af65 	bne.w	80006e8 <z_cbvprintf_impl+0x278>
			unsupported = (conv->length_mod != LENGTH_NONE);
 800081e:	3b00      	subs	r3, #0
 8000820:	bf18      	it	ne
 8000822:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
 8000824:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8000828:	f3c2 0140 	ubfx	r1, r2, #1, #1
 800082c:	430b      	orrs	r3, r1
 800082e:	f363 0241 	bfi	r2, r3, #1, #1
 8000832:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
 8000836:	e6bd      	b.n	80005b4 <z_cbvprintf_impl+0x144>
		} else if ((conv->length_mod != LENGTH_NONE)
 8000838:	f013 0f38 	tst.w	r3, #56	; 0x38
 800083c:	d1ce      	bne.n	80007dc <z_cbvprintf_impl+0x36c>
 800083e:	e753      	b.n	80006e8 <z_cbvprintf_impl+0x278>
		conv->specifier_cat = SPECIFIER_PTR;
 8000840:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
 8000844:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
 8000846:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
 800084a:	f361 0202 	bfi	r2, r1, #0, #3
 800084e:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
 8000852:	bf14      	ite	ne
 8000854:	2301      	movne	r3, #1
 8000856:	2300      	moveq	r3, #0
 8000858:	e7e4      	b.n	8000824 <z_cbvprintf_impl+0x3b4>
			unsupported = true;
 800085a:	2301      	movs	r3, #1
 800085c:	e7e2      	b.n	8000824 <z_cbvprintf_impl+0x3b4>
		} else if (conv->width_present) {
 800085e:	f99d 2048 	ldrsb.w	r2, [sp, #72]	; 0x48
 8000862:	2a00      	cmp	r2, #0
			width = conv->width_value;
 8000864:	bfb4      	ite	lt
 8000866:	9a13      	ldrlt	r2, [sp, #76]	; 0x4c
		int width = -1;
 8000868:	f04f 32ff 	movge.w	r2, #4294967295
 800086c:	e6b4      	b.n	80005d8 <z_cbvprintf_impl+0x168>
		} else if (conv->prec_present) {
 800086e:	079f      	lsls	r7, r3, #30
 8000870:	f57f aec1 	bpl.w	80005f6 <z_cbvprintf_impl+0x186>
			precision = conv->prec_value;
 8000874:	9f14      	ldr	r7, [sp, #80]	; 0x50
		conv->pad0_value = 0;
 8000876:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
 8000878:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
		    && (conv->specifier_cat == SPECIFIER_FP)
 800087c:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
 8000880:	f003 0207 	and.w	r2, r3, #7
 8000884:	2a04      	cmp	r2, #4
 8000886:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 800088a:	d107      	bne.n	800089c <z_cbvprintf_impl+0x42c>
		    && !conv->prec_present) {
 800088c:	0790      	lsls	r0, r2, #30
 800088e:	d405      	bmi.n	800089c <z_cbvprintf_impl+0x42c>
			if (conv->specifier_a) {
 8000890:	f99d 1049 	ldrsb.w	r1, [sp, #73]	; 0x49
				precision = FRACTION_HEX;
 8000894:	2900      	cmp	r1, #0
 8000896:	bfac      	ite	ge
 8000898:	2706      	movge	r7, #6
 800089a:	270d      	movlt	r7, #13
		enum specifier_cat_enum specifier_cat
 800089c:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
 80008a0:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
 80008a2:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
 80008a6:	d133      	bne.n	8000910 <z_cbvprintf_impl+0x4a0>
			switch (length_mod) {
 80008a8:	1ed3      	subs	r3, r2, #3
 80008aa:	2b04      	cmp	r3, #4
 80008ac:	d804      	bhi.n	80008b8 <z_cbvprintf_impl+0x448>
 80008ae:	e8df f003 	tbb	[pc, r3]
 80008b2:	4621      	.short	0x4621
 80008b4:	2146      	.short	0x2146
 80008b6:	21          	.byte	0x21
 80008b7:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
 80008b8:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
 80008ba:	2a01      	cmp	r2, #1
				value->sint = va_arg(ap, int);
 80008bc:	ea4f 71e3 	mov.w	r1, r3, asr #31
 80008c0:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
 80008c4:	d11c      	bne.n	8000900 <z_cbvprintf_impl+0x490>
				value->sint = (signed char)value->sint;
 80008c6:	f99d 3040 	ldrsb.w	r3, [sp, #64]	; 0x40
 80008ca:	17d9      	asrs	r1, r3, #31
 80008cc:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
				value->sint = va_arg(ap, int);
 80008d0:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
 80008d2:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80008d6:	9307      	str	r3, [sp, #28]
 80008d8:	0799      	lsls	r1, r3, #30
 80008da:	d050      	beq.n	800097e <z_cbvprintf_impl+0x50e>
			OUTS(sp, fp);
 80008dc:	9b06      	ldr	r3, [sp, #24]
 80008de:	9903      	ldr	r1, [sp, #12]
 80008e0:	4632      	mov	r2, r6
 80008e2:	4650      	mov	r0, sl
 80008e4:	f001 fff1 	bl	80028ca <outs>
 80008e8:	2800      	cmp	r0, #0
 80008ea:	f2c0 8353 	blt.w	8000f94 <z_cbvprintf_impl+0xb24>
 80008ee:	4405      	add	r5, r0
			continue;
 80008f0:	9e06      	ldr	r6, [sp, #24]
 80008f2:	e5c5      	b.n	8000480 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
 80008f4:	f854 3b04 	ldr.w	r3, [r4], #4
 80008f8:	17d9      	asrs	r1, r3, #31
				value->uint = (unsigned char)value->uint;
 80008fa:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
 80008fe:	e7e8      	b.n	80008d2 <z_cbvprintf_impl+0x462>
			} else if (length_mod == LENGTH_H) {
 8000900:	2a02      	cmp	r2, #2
 8000902:	d1e5      	bne.n	80008d0 <z_cbvprintf_impl+0x460>
				value->sint = (short)value->sint;
 8000904:	b219      	sxth	r1, r3
 8000906:	f343 33c0 	sbfx	r3, r3, #15, #1
 800090a:	e9cd 1310 	strd	r1, r3, [sp, #64]	; 0x40
 800090e:	e7df      	b.n	80008d0 <z_cbvprintf_impl+0x460>
		} else if (specifier_cat == SPECIFIER_UINT) {
 8000910:	2b02      	cmp	r3, #2
 8000912:	d124      	bne.n	800095e <z_cbvprintf_impl+0x4ee>
			switch (length_mod) {
 8000914:	1ed3      	subs	r3, r2, #3
 8000916:	2b04      	cmp	r3, #4
 8000918:	d804      	bhi.n	8000924 <z_cbvprintf_impl+0x4b4>
 800091a:	e8df f003 	tbb	[pc, r3]
 800091e:	1018      	.short	0x1018
 8000920:	1810      	.short	0x1810
 8000922:	18          	.byte	0x18
 8000923:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
 8000924:	2a01      	cmp	r2, #1
				value->uint = va_arg(ap, unsigned int);
 8000926:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
 800092a:	f04f 0100 	mov.w	r1, #0
 800092e:	d014      	beq.n	800095a <z_cbvprintf_impl+0x4ea>
			} else if (length_mod == LENGTH_H) {
 8000930:	2a02      	cmp	r2, #2
				value->uint = va_arg(ap, unsigned int);
 8000932:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
			} else if (length_mod == LENGTH_H) {
 8000936:	d1cc      	bne.n	80008d2 <z_cbvprintf_impl+0x462>
				value->uint = (unsigned short)value->uint;
 8000938:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
 800093a:	9310      	str	r3, [sp, #64]	; 0x40
 800093c:	e7c9      	b.n	80008d2 <z_cbvprintf_impl+0x462>
					(uint_value_type)va_arg(ap,
 800093e:	3407      	adds	r4, #7
 8000940:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
 8000944:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8000948:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
 800094c:	e7c1      	b.n	80008d2 <z_cbvprintf_impl+0x462>
					(uint_value_type)va_arg(ap, size_t);
 800094e:	f854 3b04 	ldr.w	r3, [r4], #4
 8000952:	9310      	str	r3, [sp, #64]	; 0x40
 8000954:	2300      	movs	r3, #0
 8000956:	9311      	str	r3, [sp, #68]	; 0x44
			} else if (length_mod == LENGTH_H) {
 8000958:	e7bb      	b.n	80008d2 <z_cbvprintf_impl+0x462>
				value->uint = (unsigned char)value->uint;
 800095a:	b2db      	uxtb	r3, r3
 800095c:	e7cd      	b.n	80008fa <z_cbvprintf_impl+0x48a>
		} else if (specifier_cat == SPECIFIER_FP) {
 800095e:	2b04      	cmp	r3, #4
 8000960:	d108      	bne.n	8000974 <z_cbvprintf_impl+0x504>
					(sint_value_type)va_arg(ap, long long);
 8000962:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
 8000964:	f024 0407 	bic.w	r4, r4, #7
 8000968:	e9d4 0100 	ldrd	r0, r1, [r4]
 800096c:	3408      	adds	r4, #8
 800096e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8000972:	e7ae      	b.n	80008d2 <z_cbvprintf_impl+0x462>
		} else if (specifier_cat == SPECIFIER_PTR) {
 8000974:	2b03      	cmp	r3, #3
 8000976:	d1ac      	bne.n	80008d2 <z_cbvprintf_impl+0x462>
			value->ptr = va_arg(ap, void *);
 8000978:	f854 3b04 	ldr.w	r3, [r4], #4
 800097c:	e7dd      	b.n	800093a <z_cbvprintf_impl+0x4ca>
		switch (conv->specifier) {
 800097e:	f89d b04b 	ldrb.w	fp, [sp, #75]	; 0x4b
 8000982:	f1bb 0f78 	cmp.w	fp, #120	; 0x78
 8000986:	d8b3      	bhi.n	80008f0 <z_cbvprintf_impl+0x480>
 8000988:	f1bb 0f57 	cmp.w	fp, #87	; 0x57
 800098c:	d849      	bhi.n	8000a22 <z_cbvprintf_impl+0x5b2>
 800098e:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8000992:	f000 8091 	beq.w	8000ab8 <z_cbvprintf_impl+0x648>
 8000996:	f1bb 0f24 	cmp.w	fp, #36	; 0x24
 800099a:	d9a9      	bls.n	80008f0 <z_cbvprintf_impl+0x480>
 800099c:	f1bb 0f41 	cmp.w	fp, #65	; 0x41
 80009a0:	d003      	beq.n	80009aa <z_cbvprintf_impl+0x53a>
 80009a2:	f1ab 0245 	sub.w	r2, fp, #69	; 0x45
 80009a6:	2a02      	cmp	r2, #2
 80009a8:	d8a2      	bhi.n	80008f0 <z_cbvprintf_impl+0x480>
	} u = {
 80009aa:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
	if ((u.u64 & SIGN_MASK) != 0U) {
 80009ae:	2a00      	cmp	r2, #0
 80009b0:	f2c0 8136 	blt.w	8000c20 <z_cbvprintf_impl+0x7b0>
	} else if (conv->flag_plus) {
 80009b4:	9b07      	ldr	r3, [sp, #28]
 80009b6:	071e      	lsls	r6, r3, #28
 80009b8:	f100 8135 	bmi.w	8000c26 <z_cbvprintf_impl+0x7b6>
	} else if (conv->flag_space) {
 80009bc:	f3c3 1900 	ubfx	r9, r3, #4, #1
 80009c0:	ea4f 1949 	mov.w	r9, r9, lsl #5
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
 80009c4:	f3c2 500a 	ubfx	r0, r2, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
 80009c8:	f3c2 0213 	ubfx	r2, r2, #0, #20
	bool is_subnormal = (expo == 0) && (fract != 0);
 80009cc:	2800      	cmp	r0, #0
 80009ce:	f040 812d 	bne.w	8000c2c <z_cbvprintf_impl+0x7bc>
 80009d2:	ea51 0602 	orrs.w	r6, r1, r2
 80009d6:	bf14      	ite	ne
 80009d8:	2601      	movne	r6, #1
 80009da:	2600      	moveq	r6, #0
	fract <<= EXPONENT_BITS;
 80009dc:	02d2      	lsls	r2, r2, #11
 80009de:	ea42 5251 	orr.w	r2, r2, r1, lsr #21
 80009e2:	02c9      	lsls	r1, r1, #11
		c = 'f';
 80009e4:	f1bb 0f46 	cmp.w	fp, #70	; 0x46
	if ((expo | fract) != 0) {
 80009e8:	ea40 0e01 	orr.w	lr, r0, r1
 80009ec:	ea42 7ce0 	orr.w	ip, r2, r0, asr #31
		c = 'f';
 80009f0:	bf08      	it	eq
 80009f2:	f04f 0b66 	moveq.w	fp, #102	; 0x66
	if ((expo | fract) != 0) {
 80009f6:	ea5e 0c0c 	orrs.w	ip, lr, ip
	fract &= ~SIGN_MASK;
 80009fa:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
	if ((expo | fract) != 0) {
 80009fe:	f000 8197 	beq.w	8000d30 <z_cbvprintf_impl+0x8c0>
		if (is_subnormal) {
 8000a02:	2e00      	cmp	r6, #0
 8000a04:	f040 8144 	bne.w	8000c90 <z_cbvprintf_impl+0x820>
		fract |= BIT_63;
 8000a08:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8000a0a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
 8000a0e:	f2a0 38fe 	subw	r8, r0, #1022	; 0x3fe
		fract |= BIT_63;
 8000a12:	920d      	str	r2, [sp, #52]	; 0x34
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
 8000a14:	2000      	movs	r0, #0
 8000a16:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8000a1a:	4606      	mov	r6, r0
		fract *= 5U;
 8000a1c:	f04f 0c05 	mov.w	ip, #5
 8000a20:	e150      	b.n	8000cc4 <z_cbvprintf_impl+0x854>
		switch (conv->specifier) {
 8000a22:	f1ab 0158 	sub.w	r1, fp, #88	; 0x58
 8000a26:	2920      	cmp	r1, #32
 8000a28:	f63f af62 	bhi.w	80008f0 <z_cbvprintf_impl+0x480>
 8000a2c:	a001      	add	r0, pc, #4	; (adr r0, 8000a34 <z_cbvprintf_impl+0x5c4>)
 8000a2e:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8000a32:	bf00      	nop
 8000a34:	08000bbf 	.word	0x08000bbf
 8000a38:	080008f1 	.word	0x080008f1
 8000a3c:	080008f1 	.word	0x080008f1
 8000a40:	080008f1 	.word	0x080008f1
 8000a44:	080008f1 	.word	0x080008f1
 8000a48:	080008f1 	.word	0x080008f1
 8000a4c:	080008f1 	.word	0x080008f1
 8000a50:	080008f1 	.word	0x080008f1
 8000a54:	080008f1 	.word	0x080008f1
 8000a58:	080009ab 	.word	0x080009ab
 8000a5c:	080008f1 	.word	0x080008f1
 8000a60:	08000b43 	.word	0x08000b43
 8000a64:	08000b57 	.word	0x08000b57
 8000a68:	080009ab 	.word	0x080009ab
 8000a6c:	080009ab 	.word	0x080009ab
 8000a70:	080009ab 	.word	0x080009ab
 8000a74:	080008f1 	.word	0x080008f1
 8000a78:	08000b57 	.word	0x08000b57
 8000a7c:	080008f1 	.word	0x080008f1
 8000a80:	080008f1 	.word	0x080008f1
 8000a84:	080008f1 	.word	0x080008f1
 8000a88:	080008f1 	.word	0x080008f1
 8000a8c:	08000bf9 	.word	0x08000bf9
 8000a90:	08000bbf 	.word	0x08000bbf
 8000a94:	08000bc5 	.word	0x08000bc5
 8000a98:	080008f1 	.word	0x080008f1
 8000a9c:	080008f1 	.word	0x080008f1
 8000aa0:	08000abf 	.word	0x08000abf
 8000aa4:	080008f1 	.word	0x080008f1
 8000aa8:	08000bbf 	.word	0x08000bbf
 8000aac:	080008f1 	.word	0x080008f1
 8000ab0:	080008f1 	.word	0x080008f1
 8000ab4:	08000bbf 	.word	0x08000bbf
			OUTC('%');
 8000ab8:	9903      	ldr	r1, [sp, #12]
 8000aba:	4658      	mov	r0, fp
 8000abc:	e4ea      	b.n	8000494 <z_cbvprintf_impl+0x24>
			if (precision >= 0) {
 8000abe:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
 8000ac0:	9e10      	ldr	r6, [sp, #64]	; 0x40
			if (precision >= 0) {
 8000ac2:	db3a      	blt.n	8000b3a <z_cbvprintf_impl+0x6ca>
				len = strnlen(bps, precision);
 8000ac4:	4639      	mov	r1, r7
 8000ac6:	4630      	mov	r0, r6
 8000ac8:	f001 ff31 	bl	800292e <strnlen>
			bpe = bps + len;
 8000acc:	1837      	adds	r7, r6, r0
		if (bps == NULL) {
 8000ace:	2e00      	cmp	r6, #0
 8000ad0:	f43f af0e 	beq.w	80008f0 <z_cbvprintf_impl+0x480>
		char sign = 0;
 8000ad4:	f04f 0900 	mov.w	r9, #0
		if (conv->altform_0c) {
 8000ad8:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 8000adc:	f013 0210 	ands.w	r2, r3, #16
 8000ae0:	9205      	str	r2, [sp, #20]
 8000ae2:	f000 824c 	beq.w	8000f7e <z_cbvprintf_impl+0xb0e>
			nj_len += 2U;
 8000ae6:	3002      	adds	r0, #2
		if (conv->pad_fp) {
 8000ae8:	f013 0340 	ands.w	r3, r3, #64	; 0x40
		nj_len += conv->pad0_value;
 8000aec:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
		if (conv->pad_fp) {
 8000af0:	9308      	str	r3, [sp, #32]
			nj_len += conv->pad0_pre_exp;
 8000af2:	bf18      	it	ne
 8000af4:	9b14      	ldrne	r3, [sp, #80]	; 0x50
		nj_len += conv->pad0_value;
 8000af6:	f8cd 801c 	str.w	r8, [sp, #28]
 8000afa:	4440      	add	r0, r8
			nj_len += conv->pad0_pre_exp;
 8000afc:	bf18      	it	ne
 8000afe:	18c0      	addne	r0, r0, r3
		if (width > 0) {
 8000b00:	9b04      	ldr	r3, [sp, #16]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	f340 8256 	ble.w	8000fb4 <z_cbvprintf_impl+0xb44>
			if (!conv->flag_dash) {
 8000b08:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
			width -= (int)nj_len;
 8000b0c:	1a1b      	subs	r3, r3, r0
 8000b0e:	9304      	str	r3, [sp, #16]
			if (!conv->flag_dash) {
 8000b10:	0753      	lsls	r3, r2, #29
 8000b12:	f3c2 0b80 	ubfx	fp, r2, #2, #1
 8000b16:	f100 824d 	bmi.w	8000fb4 <z_cbvprintf_impl+0xb44>
				if (conv->flag_zero) {
 8000b1a:	0650      	lsls	r0, r2, #25
 8000b1c:	f140 823d 	bpl.w	8000f9a <z_cbvprintf_impl+0xb2a>
					if (sign != 0) {
 8000b20:	f1b9 0f00 	cmp.w	r9, #0
 8000b24:	d007      	beq.n	8000b36 <z_cbvprintf_impl+0x6c6>
						OUTC(sign);
 8000b26:	9903      	ldr	r1, [sp, #12]
 8000b28:	4648      	mov	r0, r9
 8000b2a:	47d0      	blx	sl
 8000b2c:	2800      	cmp	r0, #0
 8000b2e:	f2c0 8231 	blt.w	8000f94 <z_cbvprintf_impl+0xb24>
 8000b32:	3501      	adds	r5, #1
						sign = 0;
 8000b34:	46d9      	mov	r9, fp
					pad = '0';
 8000b36:	2230      	movs	r2, #48	; 0x30
 8000b38:	e230      	b.n	8000f9c <z_cbvprintf_impl+0xb2c>
				len = strlen(bps);
 8000b3a:	4630      	mov	r0, r6
 8000b3c:	f001 fef0 	bl	8002920 <strlen>
 8000b40:	e7c4      	b.n	8000acc <z_cbvprintf_impl+0x65c>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
 8000b42:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8000b44:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		char sign = 0;
 8000b48:	f04f 0900 	mov.w	r9, #0
			bpe = buf + 1;
 8000b4c:	f10d 075d 	add.w	r7, sp, #93	; 0x5d
			bps = buf;
 8000b50:	ae17      	add	r6, sp, #92	; 0x5c
		size_t nj_len = (bpe - bps);
 8000b52:	2001      	movs	r0, #1
 8000b54:	e7c0      	b.n	8000ad8 <z_cbvprintf_impl+0x668>
			if (conv->flag_plus) {
 8000b56:	9b07      	ldr	r3, [sp, #28]
 8000b58:	071a      	lsls	r2, r3, #28
			} else if (conv->flag_space) {
 8000b5a:	bf58      	it	pl
 8000b5c:	f3c3 1900 	ubfxpl	r9, r3, #4, #1
			sint = value->sint;
 8000b60:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
			} else if (conv->flag_space) {
 8000b64:	bf54      	ite	pl
 8000b66:	ea4f 1949 	movpl.w	r9, r9, lsl #5
				sign = '+';
 8000b6a:	f04f 092b 	movmi.w	r9, #43	; 0x2b
			if (sint < 0) {
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	da06      	bge.n	8000b80 <z_cbvprintf_impl+0x710>
				value->uint = (uint_value_type)-sint;
 8000b72:	4252      	negs	r2, r2
 8000b74:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b78:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
				sign = '-';
 8000b7c:	f04f 092d 	mov.w	r9, #45	; 0x2d
			bps = encode_uint(value->uint, conv, buf, bpe);
 8000b80:	f10d 0375 	add.w	r3, sp, #117	; 0x75
 8000b84:	9300      	str	r3, [sp, #0]
 8000b86:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8000b8a:	ab17      	add	r3, sp, #92	; 0x5c
 8000b8c:	aa12      	add	r2, sp, #72	; 0x48
 8000b8e:	f001 fe56 	bl	800283e <encode_uint>
 8000b92:	4606      	mov	r6, r0
			if (precision >= 0) {
 8000b94:	2f00      	cmp	r7, #0
 8000b96:	db0c      	blt.n	8000bb2 <z_cbvprintf_impl+0x742>
				conv->flag_zero = false;
 8000b98:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				size_t len = bpe - bps;
 8000b9c:	f10d 0375 	add.w	r3, sp, #117	; 0x75
 8000ba0:	1b9b      	subs	r3, r3, r6
				conv->flag_zero = false;
 8000ba2:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
 8000ba6:	429f      	cmp	r7, r3
				conv->flag_zero = false;
 8000ba8:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				if (len < (size_t)precision) {
 8000bac:	d901      	bls.n	8000bb2 <z_cbvprintf_impl+0x742>
					conv->pad0_value = precision - (int)len;
 8000bae:	1afb      	subs	r3, r7, r3
 8000bb0:	9313      	str	r3, [sp, #76]	; 0x4c
		if (bps == NULL) {
 8000bb2:	2e00      	cmp	r6, #0
 8000bb4:	f43f ae9c 	beq.w	80008f0 <z_cbvprintf_impl+0x480>
 8000bb8:	f10d 0775 	add.w	r7, sp, #117	; 0x75
 8000bbc:	e056      	b.n	8000c6c <z_cbvprintf_impl+0x7fc>
		switch (conv->specifier) {
 8000bbe:	f04f 0900 	mov.w	r9, #0
 8000bc2:	e7dd      	b.n	8000b80 <z_cbvprintf_impl+0x710>
			if (value->ptr != NULL) {
 8000bc4:	9810      	ldr	r0, [sp, #64]	; 0x40
 8000bc6:	2800      	cmp	r0, #0
 8000bc8:	f000 81d4 	beq.w	8000f74 <z_cbvprintf_impl+0xb04>
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8000bcc:	f10d 0375 	add.w	r3, sp, #117	; 0x75
 8000bd0:	9300      	str	r3, [sp, #0]
 8000bd2:	aa12      	add	r2, sp, #72	; 0x48
 8000bd4:	ab17      	add	r3, sp, #92	; 0x5c
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	f001 fe31 	bl	800283e <encode_uint>
				conv->altform_0c = true;
 8000bdc:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
 8000be0:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8000be4:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
 8000be8:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8000bec:	4606      	mov	r6, r0
				conv->altform_0c = true;
 8000bee:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
		char sign = 0;
 8000bf2:	f04f 0900 	mov.w	r9, #0
				goto prec_int_pad0;
 8000bf6:	e7cd      	b.n	8000b94 <z_cbvprintf_impl+0x724>
				store_count(conv, value->ptr, count);
 8000bf8:	9b10      	ldr	r3, [sp, #64]	; 0x40
	switch ((enum length_mod_enum)conv->length_mod) {
 8000bfa:	2a07      	cmp	r2, #7
 8000bfc:	f63f ae78 	bhi.w	80008f0 <z_cbvprintf_impl+0x480>
 8000c00:	e8df f002 	tbb	[pc, r2]
 8000c04:	0c06040c 	.word	0x0c06040c
 8000c08:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
 8000c0c:	701d      	strb	r5, [r3, #0]
		break;
 8000c0e:	e66f      	b.n	80008f0 <z_cbvprintf_impl+0x480>
		*(short *)dp = (short)count;
 8000c10:	801d      	strh	r5, [r3, #0]
		break;
 8000c12:	e66d      	b.n	80008f0 <z_cbvprintf_impl+0x480>
		*(intmax_t *)dp = (intmax_t)count;
 8000c14:	17ea      	asrs	r2, r5, #31
 8000c16:	e9c3 5200 	strd	r5, r2, [r3]
		break;
 8000c1a:	e669      	b.n	80008f0 <z_cbvprintf_impl+0x480>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
 8000c1c:	601d      	str	r5, [r3, #0]
		break;
 8000c1e:	e667      	b.n	80008f0 <z_cbvprintf_impl+0x480>
		*sign = '-';
 8000c20:	f04f 092d 	mov.w	r9, #45	; 0x2d
 8000c24:	e6ce      	b.n	80009c4 <z_cbvprintf_impl+0x554>
		*sign = '+';
 8000c26:	f04f 092b 	mov.w	r9, #43	; 0x2b
 8000c2a:	e6cb      	b.n	80009c4 <z_cbvprintf_impl+0x554>
	if (expo == BIT_MASK(EXPONENT_BITS)) {
 8000c2c:	f240 76ff 	movw	r6, #2047	; 0x7ff
 8000c30:	42b0      	cmp	r0, r6
 8000c32:	d12a      	bne.n	8000c8a <z_cbvprintf_impl+0x81a>
		if (fract == 0) {
 8000c34:	430a      	orrs	r2, r1
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
 8000c36:	f1ab 0341 	sub.w	r3, fp, #65	; 0x41
 8000c3a:	d11e      	bne.n	8000c7a <z_cbvprintf_impl+0x80a>
			if (isupper((unsigned char)c)) {
 8000c3c:	2b1a      	cmp	r3, #26
 8000c3e:	bf35      	itete	cc
 8000c40:	2349      	movcc	r3, #73	; 0x49
 8000c42:	2369      	movcs	r3, #105	; 0x69
 8000c44:	214e      	movcc	r1, #78	; 0x4e
 8000c46:	216e      	movcs	r1, #110	; 0x6e
 8000c48:	bf34      	ite	cc
 8000c4a:	2246      	movcc	r2, #70	; 0x46
 8000c4c:	2266      	movcs	r2, #102	; 0x66
				*buf++ = 'I';
 8000c4e:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		conv->flag_zero = false;
 8000c52:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
				*buf++ = 'N';
 8000c56:	f88d 105d 	strb.w	r1, [sp, #93]	; 0x5d
		conv->flag_zero = false;
 8000c5a:	f36f 1386 	bfc	r3, #6, #1
				*buf++ = 'F';
 8000c5e:	f88d 205e 	strb.w	r2, [sp, #94]	; 0x5e
		conv->flag_zero = false;
 8000c62:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		*bpe = buf;
 8000c66:	f10d 075f 	add.w	r7, sp, #95	; 0x5f
				bps = encode_float(value->dbl, conv, precision,
 8000c6a:	ae17      	add	r6, sp, #92	; 0x5c
		size_t nj_len = (bpe - bps);
 8000c6c:	1bb8      	subs	r0, r7, r6
		if (sign != 0) {
 8000c6e:	f1b9 0f00 	cmp.w	r9, #0
 8000c72:	f43f af31 	beq.w	8000ad8 <z_cbvprintf_impl+0x668>
			nj_len += 1U;
 8000c76:	3001      	adds	r0, #1
 8000c78:	e72e      	b.n	8000ad8 <z_cbvprintf_impl+0x668>
			if (isupper((unsigned char)c)) {
 8000c7a:	2b19      	cmp	r3, #25
 8000c7c:	bf8b      	itete	hi
 8000c7e:	236e      	movhi	r3, #110	; 0x6e
 8000c80:	234e      	movls	r3, #78	; 0x4e
 8000c82:	2161      	movhi	r1, #97	; 0x61
 8000c84:	2141      	movls	r1, #65	; 0x41
 8000c86:	461a      	mov	r2, r3
 8000c88:	e7e1      	b.n	8000c4e <z_cbvprintf_impl+0x7de>
	bool is_subnormal = (expo == 0) && (fract != 0);
 8000c8a:	2600      	movs	r6, #0
 8000c8c:	e6a6      	b.n	80009dc <z_cbvprintf_impl+0x56c>
				expo--;
 8000c8e:	3801      	subs	r0, #1
			while (((fract <<= 1) & BIT_63) == 0) {
 8000c90:	1849      	adds	r1, r1, r1
 8000c92:	4152      	adcs	r2, r2
 8000c94:	2a00      	cmp	r2, #0
 8000c96:	dafa      	bge.n	8000c8e <z_cbvprintf_impl+0x81e>
 8000c98:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
 8000c9c:	e6b4      	b.n	8000a08 <z_cbvprintf_impl+0x598>
			fract >>= 1;
 8000c9e:	0849      	lsrs	r1, r1, #1
 8000ca0:	ea41 71c2 	orr.w	r1, r1, r2, lsl #31
 8000ca4:	0852      	lsrs	r2, r2, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
 8000ca6:	f1b2 3f33 	cmp.w	r2, #858993459	; 0x33333333
 8000caa:	4640      	mov	r0, r8
			expo++;
 8000cac:	f108 0801 	add.w	r8, r8, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
 8000cb0:	d2f5      	bcs.n	8000c9e <z_cbvprintf_impl+0x82e>
		fract *= 5U;
 8000cb2:	fb0c fe02 	mul.w	lr, ip, r2
 8000cb6:	fba1 120c 	umull	r1, r2, r1, ip
		expo++;
 8000cba:	f100 0802 	add.w	r8, r0, #2
		fract *= 5U;
 8000cbe:	4472      	add	r2, lr
		decexp--;
 8000cc0:	3e01      	subs	r6, #1
 8000cc2:	2001      	movs	r0, #1
	while (expo < -2) {
 8000cc4:	f118 0f02 	cmn.w	r8, #2
 8000cc8:	dbe9      	blt.n	8000c9e <z_cbvprintf_impl+0x82e>
 8000cca:	b108      	cbz	r0, 8000cd0 <z_cbvprintf_impl+0x860>
 8000ccc:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
	while (expo > 0) {
 8000cd0:	f1b8 0f00 	cmp.w	r8, #0
		fract += 2;
 8000cd4:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
	while (expo > 0) {
 8000cd8:	dc2d      	bgt.n	8000d36 <z_cbvprintf_impl+0x8c6>
	fract >>= (4 - expo);
 8000cda:	f1c8 0004 	rsb	r0, r8, #4
 8000cde:	f1a0 0c20 	sub.w	ip, r0, #32
 8000ce2:	f108 081c 	add.w	r8, r8, #28
 8000ce6:	40c2      	lsrs	r2, r0
 8000ce8:	fa01 f808 	lsl.w	r8, r1, r8
 8000cec:	fa21 fc0c 	lsr.w	ip, r1, ip
 8000cf0:	40c1      	lsrs	r1, r0
	if ((c == 'g') || (c == 'G')) {
 8000cf2:	f00b 00df 	and.w	r0, fp, #223	; 0xdf
	fract >>= (4 - expo);
 8000cf6:	ea42 0208 	orr.w	r2, r2, r8
	if ((c == 'g') || (c == 'G')) {
 8000cfa:	2847      	cmp	r0, #71	; 0x47
	fract >>= (4 - expo);
 8000cfc:	ea42 020c 	orr.w	r2, r2, ip
	if ((c == 'g') || (c == 'G')) {
 8000d00:	d13a      	bne.n	8000d78 <z_cbvprintf_impl+0x908>
		if (decexp < (-4 + 1) || decexp > precision) {
 8000d02:	1cf0      	adds	r0, r6, #3
 8000d04:	db01      	blt.n	8000d0a <z_cbvprintf_impl+0x89a>
 8000d06:	42b7      	cmp	r7, r6
 8000d08:	da2b      	bge.n	8000d62 <z_cbvprintf_impl+0x8f2>
			c += 'e' - 'g';  /* e or E */
 8000d0a:	f1ab 0302 	sub.w	r3, fp, #2
			if (precision > 0) {
 8000d0e:	2f00      	cmp	r7, #0
			c += 'e' - 'g';  /* e or E */
 8000d10:	fa5f fb83 	uxtb.w	fp, r3
			if (precision > 0) {
 8000d14:	dd7d      	ble.n	8000e12 <z_cbvprintf_impl+0x9a2>
		if (!conv->flag_hash && (precision > 0)) {
 8000d16:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8000d1a:	0683      	lsls	r3, r0, #26
				precision--;
 8000d1c:	f107 37ff 	add.w	r7, r7, #4294967295
		if (!conv->flag_hash && (precision > 0)) {
 8000d20:	d477      	bmi.n	8000e12 <z_cbvprintf_impl+0x9a2>
 8000d22:	1e3b      	subs	r3, r7, #0
 8000d24:	bf18      	it	ne
 8000d26:	2301      	movne	r3, #1
	bool prune_zero = false;
 8000d28:	9305      	str	r3, [sp, #20]
		decimals = precision + 1;
 8000d2a:	f107 0801 	add.w	r8, r7, #1
 8000d2e:	e02d      	b.n	8000d8c <z_cbvprintf_impl+0x91c>
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
 8000d30:	f04f 0800 	mov.w	r8, #0
 8000d34:	e66e      	b.n	8000a14 <z_cbvprintf_impl+0x5a4>
		fract += 2;
 8000d36:	3202      	adds	r2, #2
 8000d38:	f141 0100 	adc.w	r1, r1, #0
		_ldiv5(&fract);
 8000d3c:	a80c      	add	r0, sp, #48	; 0x30
		fract += 2;
 8000d3e:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		_ldiv5(&fract);
 8000d42:	f001 fd4d 	bl	80027e0 <_ldiv5>
		expo--;
 8000d46:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
 8000d4a:	f108 38ff 	add.w	r8, r8, #4294967295
		decexp++;
 8000d4e:	3601      	adds	r6, #1
			fract <<= 1;
 8000d50:	1892      	adds	r2, r2, r2
 8000d52:	4149      	adcs	r1, r1
		} while (!(fract & BIT_63));
 8000d54:	2900      	cmp	r1, #0
			expo--;
 8000d56:	f108 38ff 	add.w	r8, r8, #4294967295
		} while (!(fract & BIT_63));
 8000d5a:	daf9      	bge.n	8000d50 <z_cbvprintf_impl+0x8e0>
 8000d5c:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
 8000d60:	e7b6      	b.n	8000cd0 <z_cbvprintf_impl+0x860>
		if (!conv->flag_hash && (precision > 0)) {
 8000d62:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8000d66:	0698      	lsls	r0, r3, #26
			precision -= decexp;
 8000d68:	eba7 0706 	sub.w	r7, r7, r6
		if (!conv->flag_hash && (precision > 0)) {
 8000d6c:	d44f      	bmi.n	8000e0e <z_cbvprintf_impl+0x99e>
 8000d6e:	1e3b      	subs	r3, r7, #0
 8000d70:	bf18      	it	ne
 8000d72:	2301      	movne	r3, #1
	bool prune_zero = false;
 8000d74:	9305      	str	r3, [sp, #20]
 8000d76:	e004      	b.n	8000d82 <z_cbvprintf_impl+0x912>
 8000d78:	2300      	movs	r3, #0
	if (c == 'f') {
 8000d7a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
	bool prune_zero = false;
 8000d7e:	9305      	str	r3, [sp, #20]
	if (c == 'f') {
 8000d80:	d1d3      	bne.n	8000d2a <z_cbvprintf_impl+0x8ba>
		if (decimals < 0) {
 8000d82:	eb17 0806 	adds.w	r8, r7, r6
 8000d86:	f04f 0b66 	mov.w	fp, #102	; 0x66
 8000d8a:	d444      	bmi.n	8000e16 <z_cbvprintf_impl+0x9a6>
	if (decimals > 16) {
 8000d8c:	f1b8 0f10 	cmp.w	r8, #16
 8000d90:	bfa8      	it	ge
 8000d92:	f04f 0810 	movge.w	r8, #16
	uint64_t round = BIT64(59); /* 0.5 */
 8000d96:	ed9f 7bb2 	vldr	d7, [pc, #712]	; 8001060 <z_cbvprintf_impl+0xbf0>
 8000d9a:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8000d9e:	2010      	movs	r0, #16
 8000da0:	900b      	str	r0, [sp, #44]	; 0x2c
	*v >>= 1;
 8000da2:	e9dd 030e 	ldrd	r0, r3, [sp, #56]	; 0x38
	while (decimals--) {
 8000da6:	f1b8 0f00 	cmp.w	r8, #0
 8000daa:	d137      	bne.n	8000e1c <z_cbvprintf_impl+0x9ac>
	fract += round;
 8000dac:	1812      	adds	r2, r2, r0
 8000dae:	eb41 0103 	adc.w	r1, r1, r3
	if (fract >= BIT64(60)) {
 8000db2:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 8000db6:	d241      	bcs.n	8000e3c <z_cbvprintf_impl+0x9cc>
	fract += round;
 8000db8:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		if (conv->flag_hash || (precision > 0)) {
 8000dbc:	9b07      	ldr	r3, [sp, #28]
	if (c == 'f') {
 8000dbe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
		if (conv->flag_hash || (precision > 0)) {
 8000dc2:	f003 0220 	and.w	r2, r3, #32
	if (c == 'f') {
 8000dc6:	f040 80b4 	bne.w	8000f32 <z_cbvprintf_impl+0xac2>
		if (decexp > 0) {
 8000dca:	2e00      	cmp	r6, #0
 8000dcc:	dc41      	bgt.n	8000e52 <z_cbvprintf_impl+0x9e2>
			*buf++ = '0';
 8000dce:	2130      	movs	r1, #48	; 0x30
 8000dd0:	f88d 105c 	strb.w	r1, [sp, #92]	; 0x5c
		if (conv->flag_hash || (precision > 0)) {
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	d165      	bne.n	8000ea4 <z_cbvprintf_impl+0xa34>
 8000dd8:	2f00      	cmp	r7, #0
 8000dda:	f340 81b2 	ble.w	8001142 <z_cbvprintf_impl+0xcd2>
			*buf++ = '.';
 8000dde:	222e      	movs	r2, #46	; 0x2e
 8000de0:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
		if (decexp < 0 && precision > 0) {
 8000de4:	b186      	cbz	r6, 8000e08 <z_cbvprintf_impl+0x998>
			conv->pad0_value = -decexp;
 8000de6:	4272      	negs	r2, r6
 8000de8:	42ba      	cmp	r2, r7
 8000dea:	bfa8      	it	ge
 8000dec:	463a      	movge	r2, r7
			conv->pad_postdp = (conv->pad0_value > 0);
 8000dee:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
 8000df2:	9213      	str	r2, [sp, #76]	; 0x4c
 8000df4:	2a00      	cmp	r2, #0
			precision -= conv->pad0_value;
 8000df6:	eba7 0702 	sub.w	r7, r7, r2
			conv->pad_postdp = (conv->pad0_value > 0);
 8000dfa:	bfd4      	ite	le
 8000dfc:	2200      	movle	r2, #0
 8000dfe:	2201      	movgt	r2, #1
 8000e00:	f362 1145 	bfi	r1, r2, #5, #1
 8000e04:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			*buf++ = '.';
 8000e08:	f10d 085e 	add.w	r8, sp, #94	; 0x5e
 8000e0c:	e039      	b.n	8000e82 <z_cbvprintf_impl+0xa12>
	bool prune_zero = false;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	e7b0      	b.n	8000d74 <z_cbvprintf_impl+0x904>
 8000e12:	2300      	movs	r3, #0
 8000e14:	e788      	b.n	8000d28 <z_cbvprintf_impl+0x8b8>
			decimals = 0;
 8000e16:	f04f 0800 	mov.w	r8, #0
 8000e1a:	e7bc      	b.n	8000d96 <z_cbvprintf_impl+0x926>
	*v >>= 1;
 8000e1c:	0840      	lsrs	r0, r0, #1
 8000e1e:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 8000e22:	085b      	lsrs	r3, r3, #1
 8000e24:	e9cd 030e 	strd	r0, r3, [sp, #56]	; 0x38
	_ldiv5(v);
 8000e28:	a80e      	add	r0, sp, #56	; 0x38
 8000e2a:	e9cd 2108 	strd	r2, r1, [sp, #32]
 8000e2e:	f108 38ff 	add.w	r8, r8, #4294967295
 8000e32:	f001 fcd5 	bl	80027e0 <_ldiv5>
 8000e36:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
}
 8000e3a:	e7b2      	b.n	8000da2 <z_cbvprintf_impl+0x932>
	*v >>= 1;
 8000e3c:	0852      	lsrs	r2, r2, #1
 8000e3e:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
	_ldiv5(v);
 8000e42:	a80c      	add	r0, sp, #48	; 0x30
	*v >>= 1;
 8000e44:	0849      	lsrs	r1, r1, #1
 8000e46:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		decexp++;
 8000e4a:	3601      	adds	r6, #1
	_ldiv5(v);
 8000e4c:	f001 fcc8 	bl	80027e0 <_ldiv5>
		decexp++;
 8000e50:	e7b4      	b.n	8000dbc <z_cbvprintf_impl+0x94c>
	char *buf = bps;
 8000e52:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
			while (decexp > 0 && digit_count > 0) {
 8000e56:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8000e58:	2900      	cmp	r1, #0
 8000e5a:	dd09      	ble.n	8000e70 <z_cbvprintf_impl+0xa00>
				*buf++ = _get_digit(&fract, &digit_count);
 8000e5c:	a90b      	add	r1, sp, #44	; 0x2c
 8000e5e:	a80c      	add	r0, sp, #48	; 0x30
 8000e60:	9207      	str	r2, [sp, #28]
 8000e62:	f001 fcd5 	bl	8002810 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
 8000e66:	3e01      	subs	r6, #1
				*buf++ = _get_digit(&fract, &digit_count);
 8000e68:	f808 0b01 	strb.w	r0, [r8], #1
			while (decexp > 0 && digit_count > 0) {
 8000e6c:	9a07      	ldr	r2, [sp, #28]
 8000e6e:	d1f2      	bne.n	8000e56 <z_cbvprintf_impl+0x9e6>
			conv->pad0_value = decexp;
 8000e70:	9613      	str	r6, [sp, #76]	; 0x4c
		if (conv->flag_hash || (precision > 0)) {
 8000e72:	b99a      	cbnz	r2, 8000e9c <z_cbvprintf_impl+0xa2c>
 8000e74:	2f00      	cmp	r7, #0
 8000e76:	f340 8162 	ble.w	800113e <z_cbvprintf_impl+0xcce>
			*buf++ = '.';
 8000e7a:	212e      	movs	r1, #46	; 0x2e
 8000e7c:	f808 1b01 	strb.w	r1, [r8], #1
 8000e80:	2600      	movs	r6, #0
	while (precision > 0 && digit_count > 0) {
 8000e82:	2f00      	cmp	r7, #0
 8000e84:	dd17      	ble.n	8000eb6 <z_cbvprintf_impl+0xa46>
 8000e86:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8000e88:	2a00      	cmp	r2, #0
 8000e8a:	dd14      	ble.n	8000eb6 <z_cbvprintf_impl+0xa46>
		*buf++ = _get_digit(&fract, &digit_count);
 8000e8c:	a90b      	add	r1, sp, #44	; 0x2c
 8000e8e:	a80c      	add	r0, sp, #48	; 0x30
 8000e90:	f001 fcbe 	bl	8002810 <_get_digit>
		precision--;
 8000e94:	3f01      	subs	r7, #1
		*buf++ = _get_digit(&fract, &digit_count);
 8000e96:	f808 0b01 	strb.w	r0, [r8], #1
		precision--;
 8000e9a:	e7f2      	b.n	8000e82 <z_cbvprintf_impl+0xa12>
			*buf++ = '.';
 8000e9c:	222e      	movs	r2, #46	; 0x2e
 8000e9e:	f808 2b01 	strb.w	r2, [r8], #1
 8000ea2:	e7ed      	b.n	8000e80 <z_cbvprintf_impl+0xa10>
 8000ea4:	222e      	movs	r2, #46	; 0x2e
 8000ea6:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
		if (decexp < 0 && precision > 0) {
 8000eaa:	2e00      	cmp	r6, #0
 8000eac:	d0ac      	beq.n	8000e08 <z_cbvprintf_impl+0x998>
 8000eae:	2f00      	cmp	r7, #0
 8000eb0:	dc99      	bgt.n	8000de6 <z_cbvprintf_impl+0x976>
			*buf++ = '.';
 8000eb2:	f10d 085e 	add.w	r8, sp, #94	; 0x5e
	if (prune_zero) {
 8000eb6:	9b05      	ldr	r3, [sp, #20]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d14e      	bne.n	8000f5a <z_cbvprintf_impl+0xaea>
	conv->pad0_pre_exp = precision;
 8000ebc:	9714      	str	r7, [sp, #80]	; 0x50
 8000ebe:	4647      	mov	r7, r8
	if ((c == 'e') || (c == 'E')) {
 8000ec0:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8000ec4:	2a45      	cmp	r2, #69	; 0x45
 8000ec6:	d123      	bne.n	8000f10 <z_cbvprintf_impl+0xaa0>
		if (decexp < 0) {
 8000ec8:	2e00      	cmp	r6, #0
			decexp = -decexp;
 8000eca:	bfba      	itte	lt
 8000ecc:	4276      	neglt	r6, r6
			*buf++ = '-';
 8000ece:	232d      	movlt	r3, #45	; 0x2d
			*buf++ = '+';
 8000ed0:	232b      	movge	r3, #43	; 0x2b
		if (decexp >= 100) {
 8000ed2:	2e63      	cmp	r6, #99	; 0x63
			*buf++ = (decexp / 100) + '0';
 8000ed4:	bfc8      	it	gt
 8000ed6:	2164      	movgt	r1, #100	; 0x64
 8000ed8:	707b      	strb	r3, [r7, #1]
			*buf++ = '-';
 8000eda:	bfd1      	iteee	le
 8000edc:	1cba      	addle	r2, r7, #2
			*buf++ = (decexp / 100) + '0';
 8000ede:	fbb6 f3f1 	udivgt	r3, r6, r1
 8000ee2:	1cfa      	addgt	r2, r7, #3
 8000ee4:	f103 0030 	addgt.w	r0, r3, #48	; 0x30
			decexp %= 100;
 8000ee8:	bfc8      	it	gt
 8000eea:	fb01 6613 	mlsgt	r6, r1, r3, r6
		*buf++ = (decexp / 10) + '0';
 8000eee:	f04f 010a 	mov.w	r1, #10
			*buf++ = (decexp / 100) + '0';
 8000ef2:	bfc8      	it	gt
 8000ef4:	70b8      	strbgt	r0, [r7, #2]
		*buf++ = c;
 8000ef6:	f887 b000 	strb.w	fp, [r7]
		*buf++ = (decexp / 10) + '0';
 8000efa:	fbb6 f3f1 	udiv	r3, r6, r1
 8000efe:	4617      	mov	r7, r2
 8000f00:	f103 0030 	add.w	r0, r3, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
 8000f04:	fb01 6313 	mls	r3, r1, r3, r6
 8000f08:	3330      	adds	r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
 8000f0a:	f807 0b02 	strb.w	r0, [r7], #2
		*buf++ = (decexp % 10) + '0';
 8000f0e:	7053      	strb	r3, [r2, #1]
		|| (conv->pad0_pre_exp > 0);
 8000f10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	dc2c      	bgt.n	8000f70 <z_cbvprintf_impl+0xb00>
 8000f16:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	bfd4      	ite	le
 8000f1c:	2300      	movle	r3, #0
 8000f1e:	2301      	movgt	r3, #1
	conv->pad_fp = (conv->pad0_value > 0)
 8000f20:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
 8000f24:	f363 1286 	bfi	r2, r3, #6, #1
	*buf = 0;
 8000f28:	2300      	movs	r3, #0
	conv->pad_fp = (conv->pad0_value > 0)
 8000f2a:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
	*buf = 0;
 8000f2e:	703b      	strb	r3, [r7, #0]
	return bps;
 8000f30:	e69b      	b.n	8000c6a <z_cbvprintf_impl+0x7fa>
		*buf = _get_digit(&fract, &digit_count);
 8000f32:	a90b      	add	r1, sp, #44	; 0x2c
 8000f34:	a80c      	add	r0, sp, #48	; 0x30
 8000f36:	9207      	str	r2, [sp, #28]
 8000f38:	f001 fc6a 	bl	8002810 <_get_digit>
		if (*buf++ != '0') {
 8000f3c:	9a07      	ldr	r2, [sp, #28]
		*buf = _get_digit(&fract, &digit_count);
 8000f3e:	f88d 005c 	strb.w	r0, [sp, #92]	; 0x5c
		if (*buf++ != '0') {
 8000f42:	2830      	cmp	r0, #48	; 0x30
			decexp--;
 8000f44:	bf18      	it	ne
 8000f46:	f106 36ff 	addne.w	r6, r6, #4294967295
		if (conv->flag_hash || (precision > 0)) {
 8000f4a:	b912      	cbnz	r2, 8000f52 <z_cbvprintf_impl+0xae2>
 8000f4c:	2f00      	cmp	r7, #0
 8000f4e:	f340 80f8 	ble.w	8001142 <z_cbvprintf_impl+0xcd2>
			*buf++ = '.';
 8000f52:	222e      	movs	r2, #46	; 0x2e
 8000f54:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
 8000f58:	e756      	b.n	8000e08 <z_cbvprintf_impl+0x998>
		while (*--buf == '0') {
 8000f5a:	4647      	mov	r7, r8
 8000f5c:	f108 38ff 	add.w	r8, r8, #4294967295
 8000f60:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8000f64:	2a30      	cmp	r2, #48	; 0x30
 8000f66:	d0f8      	beq.n	8000f5a <z_cbvprintf_impl+0xaea>
 8000f68:	2a2e      	cmp	r2, #46	; 0x2e
 8000f6a:	bf08      	it	eq
 8000f6c:	4647      	moveq	r7, r8
 8000f6e:	e7a7      	b.n	8000ec0 <z_cbvprintf_impl+0xa50>
		|| (conv->pad0_pre_exp > 0);
 8000f70:	2301      	movs	r3, #1
 8000f72:	e7d5      	b.n	8000f20 <z_cbvprintf_impl+0xab0>
			bpe = bps + 5;
 8000f74:	4f3c      	ldr	r7, [pc, #240]	; (8001068 <z_cbvprintf_impl+0xbf8>)
		char sign = 0;
 8000f76:	4681      	mov	r9, r0
			bps = "(nil)";
 8000f78:	1f7e      	subs	r6, r7, #5
		size_t nj_len = (bpe - bps);
 8000f7a:	2005      	movs	r0, #5
 8000f7c:	e5ac      	b.n	8000ad8 <z_cbvprintf_impl+0x668>
		} else if (conv->altform_0) {
 8000f7e:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
 8000f80:	bf48      	it	mi
 8000f82:	3001      	addmi	r0, #1
 8000f84:	e5b0      	b.n	8000ae8 <z_cbvprintf_impl+0x678>
					OUTC(pad);
 8000f86:	4610      	mov	r0, r2
 8000f88:	9209      	str	r2, [sp, #36]	; 0x24
 8000f8a:	9903      	ldr	r1, [sp, #12]
 8000f8c:	47d0      	blx	sl
 8000f8e:	2800      	cmp	r0, #0
 8000f90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000f92:	da05      	bge.n	8000fa0 <z_cbvprintf_impl+0xb30>
#undef OUTS
#undef OUTC
}
 8000f94:	b01f      	add	sp, #124	; 0x7c
 8000f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
 8000f9a:	2220      	movs	r2, #32
					pad = '0';
 8000f9c:	f8dd b010 	ldr.w	fp, [sp, #16]
				while (width-- > 0) {
 8000fa0:	4659      	mov	r1, fp
 8000fa2:	2900      	cmp	r1, #0
 8000fa4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8000fa8:	dced      	bgt.n	8000f86 <z_cbvprintf_impl+0xb16>
 8000faa:	9b04      	ldr	r3, [sp, #16]
 8000fac:	f8cd b010 	str.w	fp, [sp, #16]
 8000fb0:	442b      	add	r3, r5
 8000fb2:	1a5d      	subs	r5, r3, r1
		if (sign != 0) {
 8000fb4:	f1b9 0f00 	cmp.w	r9, #0
 8000fb8:	d005      	beq.n	8000fc6 <z_cbvprintf_impl+0xb56>
			OUTC(sign);
 8000fba:	9903      	ldr	r1, [sp, #12]
 8000fbc:	4648      	mov	r0, r9
 8000fbe:	47d0      	blx	sl
 8000fc0:	2800      	cmp	r0, #0
 8000fc2:	dbe7      	blt.n	8000f94 <z_cbvprintf_impl+0xb24>
 8000fc4:	3501      	adds	r5, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
 8000fc6:	9b08      	ldr	r3, [sp, #32]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d07d      	beq.n	80010c8 <z_cbvprintf_impl+0xc58>
			if (conv->specifier_a) {
 8000fcc:	f99d 3049 	ldrsb.w	r3, [sp, #73]	; 0x49
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	db28      	blt.n	8001026 <z_cbvprintf_impl+0xbb6>
 8000fd4:	46b3      	mov	fp, r6
				while (isdigit((unsigned char)*cp)) {
 8000fd6:	f89b 0000 	ldrb.w	r0, [fp]
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
 8000fda:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8000fde:	2b09      	cmp	r3, #9
 8000fe0:	46d9      	mov	r9, fp
 8000fe2:	f10b 0b01 	add.w	fp, fp, #1
 8000fe6:	d946      	bls.n	8001076 <z_cbvprintf_impl+0xc06>
				if (!conv->pad_postdp) {
 8000fe8:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 8000fec:	1bae      	subs	r6, r5, r6
 8000fee:	0699      	lsls	r1, r3, #26
 8000ff0:	444e      	add	r6, r9
 8000ff2:	d407      	bmi.n	8001004 <z_cbvprintf_impl+0xb94>
					while (pad_len-- > 0) {
 8000ff4:	4642      	mov	r2, r8
 8000ff6:	2a00      	cmp	r2, #0
 8000ff8:	f108 38ff 	add.w	r8, r8, #4294967295
 8000ffc:	dc40      	bgt.n	8001080 <z_cbvprintf_impl+0xc10>
 8000ffe:	9b07      	ldr	r3, [sp, #28]
 8001000:	4433      	add	r3, r6
 8001002:	1a9e      	subs	r6, r3, r2
				if (*cp == '.') {
 8001004:	f899 0000 	ldrb.w	r0, [r9]
 8001008:	282e      	cmp	r0, #46	; 0x2e
 800100a:	d10a      	bne.n	8001022 <z_cbvprintf_impl+0xbb2>
					OUTC(*cp++);
 800100c:	9903      	ldr	r1, [sp, #12]
 800100e:	47d0      	blx	sl
						OUTC('0');
 8001010:	2800      	cmp	r0, #0
 8001012:	dbbf      	blt.n	8000f94 <z_cbvprintf_impl+0xb24>
					while (pad_len-- > 0) {
 8001014:	f1b8 0f00 	cmp.w	r8, #0
						OUTC('0');
 8001018:	f106 0601 	add.w	r6, r6, #1
					while (pad_len-- > 0) {
 800101c:	dc36      	bgt.n	800108c <z_cbvprintf_impl+0xc1c>
					OUTC(*cp++);
 800101e:	f109 0901 	add.w	r9, r9, #1
			if (conv->specifier_a) {
 8001022:	464d      	mov	r5, r9
 8001024:	e03d      	b.n	80010a2 <z_cbvprintf_impl+0xc32>
 8001026:	46b1      	mov	r9, r6
				while (*cp != 'p') {
 8001028:	f899 0000 	ldrb.w	r0, [r9]
 800102c:	2870      	cmp	r0, #112	; 0x70
 800102e:	46c8      	mov	r8, r9
 8001030:	f109 0901 	add.w	r9, r9, #1
 8001034:	d11a      	bne.n	800106c <z_cbvprintf_impl+0xbfc>
 8001036:	1bae      	subs	r6, r5, r6
 8001038:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800103a:	4446      	add	r6, r8
			while (pad_len-- > 0) {
 800103c:	4435      	add	r5, r6
 800103e:	1bab      	subs	r3, r5, r6
 8001040:	2b00      	cmp	r3, #0
 8001042:	dc39      	bgt.n	80010b8 <z_cbvprintf_impl+0xc48>
			OUTS(cp, bpe);
 8001044:	9903      	ldr	r1, [sp, #12]
 8001046:	463b      	mov	r3, r7
 8001048:	4642      	mov	r2, r8
 800104a:	4650      	mov	r0, sl
 800104c:	f001 fc3d 	bl	80028ca <outs>
 8001050:	2800      	cmp	r0, #0
 8001052:	db9f      	blt.n	8000f94 <z_cbvprintf_impl+0xb24>
 8001054:	4430      	add	r0, r6
 8001056:	9e04      	ldr	r6, [sp, #16]
			while (pad_len-- > 0) {
 8001058:	4605      	mov	r5, r0
 800105a:	4406      	add	r6, r0
 800105c:	e06a      	b.n	8001134 <z_cbvprintf_impl+0xcc4>
 800105e:	bf00      	nop
 8001060:	00000000 	.word	0x00000000
 8001064:	08000000 	.word	0x08000000
 8001068:	080033f3 	.word	0x080033f3
					OUTC(*cp++);
 800106c:	9903      	ldr	r1, [sp, #12]
 800106e:	47d0      	blx	sl
 8001070:	2800      	cmp	r0, #0
 8001072:	dad9      	bge.n	8001028 <z_cbvprintf_impl+0xbb8>
 8001074:	e78e      	b.n	8000f94 <z_cbvprintf_impl+0xb24>
					OUTC(*cp++);
 8001076:	9903      	ldr	r1, [sp, #12]
 8001078:	47d0      	blx	sl
 800107a:	2800      	cmp	r0, #0
 800107c:	daab      	bge.n	8000fd6 <z_cbvprintf_impl+0xb66>
 800107e:	e789      	b.n	8000f94 <z_cbvprintf_impl+0xb24>
						OUTC('0');
 8001080:	9903      	ldr	r1, [sp, #12]
 8001082:	2030      	movs	r0, #48	; 0x30
 8001084:	47d0      	blx	sl
 8001086:	2800      	cmp	r0, #0
 8001088:	dab4      	bge.n	8000ff4 <z_cbvprintf_impl+0xb84>
 800108a:	e783      	b.n	8000f94 <z_cbvprintf_impl+0xb24>
						OUTC('0');
 800108c:	9903      	ldr	r1, [sp, #12]
 800108e:	2030      	movs	r0, #48	; 0x30
 8001090:	47d0      	blx	sl
 8001092:	f108 38ff 	add.w	r8, r8, #4294967295
 8001096:	e7bb      	b.n	8001010 <z_cbvprintf_impl+0xba0>
					OUTC(*cp++);
 8001098:	9903      	ldr	r1, [sp, #12]
 800109a:	47d0      	blx	sl
 800109c:	2800      	cmp	r0, #0
 800109e:	f6ff af79 	blt.w	8000f94 <z_cbvprintf_impl+0xb24>
				while (isdigit((unsigned char)*cp)) {
 80010a2:	7828      	ldrb	r0, [r5, #0]
 80010a4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80010a8:	2b09      	cmp	r3, #9
 80010aa:	46a8      	mov	r8, r5
 80010ac:	f105 0501 	add.w	r5, r5, #1
 80010b0:	d9f2      	bls.n	8001098 <z_cbvprintf_impl+0xc28>
 80010b2:	eba6 0609 	sub.w	r6, r6, r9
 80010b6:	e7bf      	b.n	8001038 <z_cbvprintf_impl+0xbc8>
				OUTC('0');
 80010b8:	9903      	ldr	r1, [sp, #12]
 80010ba:	2030      	movs	r0, #48	; 0x30
 80010bc:	47d0      	blx	sl
 80010be:	2800      	cmp	r0, #0
 80010c0:	f6ff af68 	blt.w	8000f94 <z_cbvprintf_impl+0xb24>
 80010c4:	3601      	adds	r6, #1
 80010c6:	e7ba      	b.n	800103e <z_cbvprintf_impl+0xbce>
			if (conv->altform_0c | conv->altform_0) {
 80010c8:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 80010cc:	06da      	lsls	r2, r3, #27
 80010ce:	d401      	bmi.n	80010d4 <z_cbvprintf_impl+0xc64>
 80010d0:	071b      	lsls	r3, r3, #28
 80010d2:	d506      	bpl.n	80010e2 <z_cbvprintf_impl+0xc72>
				OUTC('0');
 80010d4:	9903      	ldr	r1, [sp, #12]
 80010d6:	2030      	movs	r0, #48	; 0x30
 80010d8:	47d0      	blx	sl
 80010da:	2800      	cmp	r0, #0
 80010dc:	f6ff af5a 	blt.w	8000f94 <z_cbvprintf_impl+0xb24>
 80010e0:	3501      	adds	r5, #1
			if (conv->altform_0c) {
 80010e2:	9b05      	ldr	r3, [sp, #20]
 80010e4:	b13b      	cbz	r3, 80010f6 <z_cbvprintf_impl+0xc86>
				OUTC(conv->specifier);
 80010e6:	9903      	ldr	r1, [sp, #12]
 80010e8:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
 80010ec:	47d0      	blx	sl
 80010ee:	2800      	cmp	r0, #0
 80010f0:	f6ff af50 	blt.w	8000f94 <z_cbvprintf_impl+0xb24>
 80010f4:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
 80010f6:	44a8      	add	r8, r5
 80010f8:	e006      	b.n	8001108 <z_cbvprintf_impl+0xc98>
				OUTC('0');
 80010fa:	9903      	ldr	r1, [sp, #12]
 80010fc:	2030      	movs	r0, #48	; 0x30
 80010fe:	47d0      	blx	sl
 8001100:	2800      	cmp	r0, #0
 8001102:	f6ff af47 	blt.w	8000f94 <z_cbvprintf_impl+0xb24>
 8001106:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
 8001108:	eba8 0305 	sub.w	r3, r8, r5
 800110c:	2b00      	cmp	r3, #0
 800110e:	dcf4      	bgt.n	80010fa <z_cbvprintf_impl+0xc8a>
			OUTS(bps, bpe);
 8001110:	9903      	ldr	r1, [sp, #12]
 8001112:	463b      	mov	r3, r7
 8001114:	4632      	mov	r2, r6
 8001116:	4650      	mov	r0, sl
 8001118:	f001 fbd7 	bl	80028ca <outs>
 800111c:	2800      	cmp	r0, #0
 800111e:	f6ff af39 	blt.w	8000f94 <z_cbvprintf_impl+0xb24>
 8001122:	4428      	add	r0, r5
 8001124:	e797      	b.n	8001056 <z_cbvprintf_impl+0xbe6>
			OUTC(' ');
 8001126:	9903      	ldr	r1, [sp, #12]
 8001128:	2020      	movs	r0, #32
 800112a:	47d0      	blx	sl
 800112c:	2800      	cmp	r0, #0
 800112e:	f6ff af31 	blt.w	8000f94 <z_cbvprintf_impl+0xb24>
 8001132:	3501      	adds	r5, #1
		while (width > 0) {
 8001134:	1b73      	subs	r3, r6, r5
 8001136:	2b00      	cmp	r3, #0
 8001138:	dcf5      	bgt.n	8001126 <z_cbvprintf_impl+0xcb6>
 800113a:	f7ff bbd9 	b.w	80008f0 <z_cbvprintf_impl+0x480>
			decexp = 0;
 800113e:	4616      	mov	r6, r2
 8001140:	e6b9      	b.n	8000eb6 <z_cbvprintf_impl+0xa46>
		if (*buf++ != '0') {
 8001142:	f10d 085d 	add.w	r8, sp, #93	; 0x5d
	while (precision > 0 && digit_count > 0) {
 8001146:	e6b6      	b.n	8000eb6 <z_cbvprintf_impl+0xa46>

08001148 <main>:
#include <zephyr/sys/printk.h>
//#include <zephyr/device.h>
//#include <zephyr/drivers/pwm.h>

void main(void)
{
 8001148:	b508      	push	{r3, lr}
	//cloop_start();
	//cloop_set_ref(0.0f, 0.25f);
	printk("Test af main - %s\r\n",CONFIG_BOARD);
 800114a:	4902      	ldr	r1, [pc, #8]	; (8001154 <main+0xc>)
 800114c:	4802      	ldr	r0, [pc, #8]	; (8001158 <main+0x10>)
 800114e:	f001 fb30 	bl	80027b2 <printk>
	while(1) {
 8001152:	e7fe      	b.n	8001152 <main+0xa>
 8001154:	080033bc 	.word	0x080033bc
 8001158:	080033c9 	.word	0x080033c9

0800115c <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
 800115c:	4b01      	ldr	r3, [pc, #4]	; (8001164 <char_out+0x8>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4718      	bx	r3
 8001162:	bf00      	nop
 8001164:	20000000 	.word	0x20000000

08001168 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
 8001168:	b507      	push	{r0, r1, r2, lr}
 800116a:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
 800116c:	2100      	movs	r1, #0
 800116e:	4602      	mov	r2, r0
 8001170:	9100      	str	r1, [sp, #0]
 8001172:	4803      	ldr	r0, [pc, #12]	; (8001180 <vprintk+0x18>)
 8001174:	f7ff f97c 	bl	8000470 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
 8001178:	b003      	add	sp, #12
 800117a:	f85d fb04 	ldr.w	pc, [sp], #4
 800117e:	bf00      	nop
 8001180:	0800115d 	.word	0x0800115d

08001184 <st_stm32f4_init>:
  * @rmtoll FLASH_ACR    ICEN          LL_FLASH_EnableInstCache
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_EnableInstCache(void)
{
  SET_BIT(FLASH->ACR, FLASH_ACR_ICEN);
 8001184:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <st_stm32f4_init+0x34>)
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800118c:	601a      	str	r2, [r3, #0]
  * @rmtoll FLASH_ACR    DCEN          LL_FLASH_EnableDataCache
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_EnableDataCache(void)
{
  SET_BIT(FLASH->ACR, FLASH_ACR_DCEN);
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001194:	601a      	str	r2, [r3, #0]
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
 8001196:	f04f 0210 	mov.w	r2, #16
 800119a:	f3ef 8311 	mrs	r3, BASEPRI
 800119e:	f382 8812 	msr	BASEPRI_MAX, r2
 80011a2:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 80011a6:	f383 8811 	msr	BASEPRI, r3
 80011aa:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	/* Update CMSIS SystemCoreClock variable (HCLK) */
	/* At reset, system core clock is set to 16 MHz from HSI */
	SystemCoreClock = 16000000;
 80011ae:	4b03      	ldr	r3, [pc, #12]	; (80011bc <st_stm32f4_init+0x38>)
 80011b0:	4a03      	ldr	r2, [pc, #12]	; (80011c0 <st_stm32f4_init+0x3c>)
 80011b2:	601a      	str	r2, [r3, #0]

	return 0;
}
 80011b4:	2000      	movs	r0, #0
 80011b6:	4770      	bx	lr
 80011b8:	40023c00 	.word	0x40023c00
 80011bc:	20000020 	.word	0x20000020
 80011c0:	00f42400 	.word	0x00f42400

080011c4 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
 80011c4:	4901      	ldr	r1, [pc, #4]	; (80011cc <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
 80011c6:	2210      	movs	r2, #16
	str	r2, [r1]
 80011c8:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
 80011ca:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
 80011cc:	e000ed10 	.word	0xe000ed10

080011d0 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
 80011d0:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
 80011d2:	4040      	eors	r0, r0
	msr	BASEPRI, r0
 80011d4:	f380 8811 	msr	BASEPRI, r0
	isb
 80011d8:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
 80011dc:	f3bf 8f4f 	dsb	sy
 80011e0:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
 80011e2:	b662      	cpsie	i
	isb
 80011e4:	f3bf 8f6f 	isb	sy

	bx	lr
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop

080011ec <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 80011ec:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 80011ee:	2800      	cmp	r0, #0
 80011f0:	db07      	blt.n	8001202 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011f2:	4a04      	ldr	r2, [pc, #16]	; (8001204 <arch_irq_enable+0x18>)
 80011f4:	0941      	lsrs	r1, r0, #5
 80011f6:	2301      	movs	r3, #1
 80011f8:	f000 001f 	and.w	r0, r0, #31
 80011fc:	4083      	lsls	r3, r0
 80011fe:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 8001202:	4770      	bx	lr
 8001204:	e000e100 	.word	0xe000e100

08001208 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 8001208:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 800120a:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120c:	bfa8      	it	ge
 800120e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
 8001212:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001216:	bfb8      	it	lt
 8001218:	4b06      	ldrlt	r3, [pc, #24]	; (8001234 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800121a:	ea4f 1101 	mov.w	r1, r1, lsl #4
 800121e:	bfac      	ite	ge
 8001220:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001224:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001228:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800122a:	bfb4      	ite	lt
 800122c:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800122e:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
}
 8001232:	4770      	bx	lr
 8001234:	e000ed14 	.word	0xe000ed14

08001238 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 8001238:	bf30      	wfi
    b z_SysNmiOnReset
 800123a:	f7ff bffd 	b.w	8001238 <z_SysNmiOnReset>
 800123e:	bf00      	nop

08001240 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8001240:	4a14      	ldr	r2, [pc, #80]	; (8001294 <z_arm_prep_c+0x54>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
 8001242:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8001244:	4b14      	ldr	r3, [pc, #80]	; (8001298 <z_arm_prep_c+0x58>)
 8001246:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 800124a:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800124c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001250:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
 8001254:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001258:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800125c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
 8001260:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001264:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001268:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
 800126c:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8001270:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
 8001274:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001278:	f3bf 8f6f 	isb	sy
     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
#if __has_builtin(__builtin_arm_set_fpscr)
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
 800127c:	2300      	movs	r3, #0
 800127e:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
 8001282:	f000 fe47 	bl	8001f14 <z_bss_zero>
	z_data_copy();
 8001286:	f001 f93b 	bl	8002500 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
 800128a:	f000 fa0d 	bl	80016a8 <z_arm_interrupt_init>
	z_cstart();
 800128e:	f000 fe81 	bl	8001f94 <z_cstart>
 8001292:	bf00      	nop
 8001294:	08000000 	.word	0x08000000
 8001298:	e000ed00 	.word	0xe000ed00

0800129c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
 800129c:	4a09      	ldr	r2, [pc, #36]	; (80012c4 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
 800129e:	490a      	ldr	r1, [pc, #40]	; (80012c8 <arch_swap+0x2c>)
	_current->arch.basepri = key;
 80012a0:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
 80012a2:	6809      	ldr	r1, [r1, #0]
 80012a4:	66d9      	str	r1, [r3, #108]	; 0x6c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 80012a6:	4909      	ldr	r1, [pc, #36]	; (80012cc <arch_swap+0x30>)
	_current->arch.basepri = key;
 80012a8:	6698      	str	r0, [r3, #104]	; 0x68
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 80012aa:	684b      	ldr	r3, [r1, #4]
 80012ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012b0:	604b      	str	r3, [r1, #4]
 80012b2:	2300      	movs	r3, #0
 80012b4:	f383 8811 	msr	BASEPRI, r3
 80012b8:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 80012bc:	6893      	ldr	r3, [r2, #8]
}
 80012be:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	200002d8 	.word	0x200002d8
 80012c8:	080033a0 	.word	0x080033a0
 80012cc:	e000ed00 	.word	0xe000ed00

080012d0 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 80012d0:	491e      	ldr	r1, [pc, #120]	; (800134c <in_fp_endif+0x1e>)
    ldr r2, [r1, #_kernel_offset_to_current]
 80012d2:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
 80012d4:	f882 e0b1 	strb.w	lr, [r2, #177]	; 0xb1
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 80012d8:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
 80012dc:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
 80012de:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 80012e2:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    tst lr, #_EXC_RETURN_FTYPE_Msk
 80012e6:	f01e 0f10 	tst.w	lr, #16
    bne out_fp_endif
 80012ea:	d103      	bne.n	80012f4 <out_fp_endif>
    /* FP context active: set FP state and store callee-saved registers.
     * Note: if Lazy FP stacking is enabled, storing the callee-saved
     * registers will automatically trigger FP state preservation in
     * the thread's stack. This will also clear the FPCCR.LSPACT flag.
     */
    add r0, r2, #_thread_offset_to_preempt_float
 80012ec:	f102 0070 	add.w	r0, r2, #112	; 0x70
    vstmia r0, {s16-s31}
 80012f0:	ec80 8a10 	vstmia	r0, {s16-s31}

080012f4 <out_fp_endif>:

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 80012f4:	2010      	movs	r0, #16
    msr BASEPRI_MAX, r0
 80012f6:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 80012fa:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
 80012fe:	4f14      	ldr	r7, [pc, #80]	; (8001350 <in_fp_endif+0x22>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 8001300:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 8001304:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
 8001306:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
 8001308:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
 800130a:	f992 e0b1 	ldrsb.w	lr, [r2, #177]	; 0xb1

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 800130e:	6e90      	ldr	r0, [r2, #104]	; 0x68
    movs r3, #0
 8001310:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 8001312:	6693      	str	r3, [r2, #104]	; 0x68
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 8001314:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    tst lr, #_EXC_RETURN_FTYPE_Msk
 8001318:	f01e 0f10 	tst.w	lr, #16
    beq in_fp_active
 800131c:	d003      	beq.n	8001326 <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
 800131e:	2300      	movs	r3, #0
    vmsr fpscr, r3
 8001320:	eee1 3a10 	vmsr	fpscr, r3
    b in_fp_endif
 8001324:	e003      	b.n	800132e <in_fp_endif>

08001326 <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    add r0, r2, #_thread_offset_to_preempt_float
 8001326:	f102 0070 	add.w	r0, r2, #112	; 0x70
    vldmia r0, {s16-s31}
 800132a:	ec90 8a10 	vldmia	r0, {s16-s31}

0800132e <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
 800132e:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #_CONTROL_FPCA_Msk
 8001332:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
 8001336:	f383 8814 	msr	CONTROL, r3
    isb
 800133a:	f3bf 8f6f 	isb	sy
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 800133e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
 8001342:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
 8001346:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
 800134a:	4770      	bx	lr
    ldr r1, =_kernel
 800134c:	200002d8 	.word	0x200002d8
    ldr v4, =_SCS_ICSR
 8001350:	e000ed04 	.word	0xe000ed04

08001354 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
 8001354:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 8001358:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 800135a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 800135e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 8001362:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
 8001364:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
 8001368:	2902      	cmp	r1, #2
    beq _oops
 800136a:	d0ff      	beq.n	800136c <_oops>

0800136c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
 800136c:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
 800136e:	f001 fac8 	bl	8002902 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
 8001372:	bd01      	pop	{r0, pc}

08001374 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
 8001374:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
 8001378:	9b00      	ldr	r3, [sp, #0]
 800137a:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
 800137e:	9b01      	ldr	r3, [sp, #4]
 8001380:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->pc &= 0xfffffffe;
 8001384:	490a      	ldr	r1, [pc, #40]	; (80013b0 <arch_new_thread+0x3c>)
	iframe->a4 = (uint32_t)p3;
 8001386:	9b02      	ldr	r3, [sp, #8]
 8001388:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
 800138c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001390:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
 8001394:	f021 0101 	bic.w	r1, r1, #1
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
 8001398:	2300      	movs	r3, #0
	iframe->pc &= 0xfffffffe;
 800139a:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
 800139e:	3a20      	subs	r2, #32
	thread->arch.basepri = 0;
 80013a0:	6683      	str	r3, [r0, #104]	; 0x68

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
 80013a2:	f44f 437d 	mov.w	r3, #64768	; 0xfd00
	thread->callee_saved.psp = (uint32_t)iframe;
 80013a6:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.mode = 0;
 80013a8:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	080027cd 	.word	0x080027cd

080013b4 <arch_switch_to_main_thread>:
 80013b4:	2300      	movs	r3, #0
 80013b6:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 80013ba:	f3ef 8314 	mrs	r3, CONTROL
#else
	__set_FPSCR(0);
#endif
#if defined(CONFIG_CPU_CORTEX_M) && defined(CONFIG_FPU_SHARING)
	/* In Sharing mode clearing FPSCR may set the CONTROL.FPCA flag. */
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
 80013be:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 80013c2:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
 80013c6:	f3bf 8f6f 	isb	sy
 80013ca:	f3bf 8f6f 	isb	sy
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
 80013ce:	4b07      	ldr	r3, [pc, #28]	; (80013ec <arch_switch_to_main_thread+0x38>)
 80013d0:	6098      	str	r0, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 80013d2:	4610      	mov	r0, r2
 80013d4:	f381 8809 	msr	PSP, r1
 80013d8:	2100      	movs	r1, #0
 80013da:	b663      	cpsie	if
 80013dc:	f381 8811 	msr	BASEPRI, r1
 80013e0:	f3bf 8f6f 	isb	sy
 80013e4:	2200      	movs	r2, #0
 80013e6:	2300      	movs	r3, #0
 80013e8:	f001 f9f0 	bl	80027cc <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
 80013ec:	200002d8 	.word	0x200002d8

080013f0 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
 80013f0:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
 80013f2:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 80013f6:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 80013fa:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
 80013fe:	4904      	ldr	r1, [pc, #16]	; (8001410 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 8001400:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 8001402:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
 8001404:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 8001406:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
 800140a:	4902      	ldr	r1, [pc, #8]	; (8001414 <_isr_wrapper+0x24>)
	bx r1
 800140c:	4708      	bx	r1
 800140e:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 8001410:	08002fb8 	.word	0x08002fb8
	ldr r1, =z_arm_int_exit
 8001414:	08001419 	.word	0x08001419

08001418 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
 8001418:	4b04      	ldr	r3, [pc, #16]	; (800142c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
 800141a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
 800141c:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
 800141e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
 8001420:	d003      	beq.n	800142a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
 8001422:	4903      	ldr	r1, [pc, #12]	; (8001430 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
 8001424:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
 8001428:	600a      	str	r2, [r1, #0]

0800142a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
 800142a:	4770      	bx	lr
	ldr r3, =_kernel
 800142c:	200002d8 	.word	0x200002d8
	ldr r1, =_SCS_ICSR
 8001430:	e000ed04 	.word	0xe000ed04

08001434 <usage_fault.constprop.0>:
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 8001434:	4b13      	ldr	r3, [pc, #76]	; (8001484 <usage_fault.constprop.0+0x50>)
 8001436:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
 8001438:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 800143c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
 800143e:	bf14      	ite	ne
 8001440:	201e      	movne	r0, #30
 8001442:	201d      	moveq	r0, #29
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
 8001444:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 8001448:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
 800144a:	bf18      	it	ne
 800144c:	201f      	movne	r0, #31
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
 800144e:	f412 2f00 	tst.w	r2, #524288	; 0x80000
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 8001452:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
 8001454:	bf18      	it	ne
 8001456:	2021      	movne	r0, #33	; 0x21
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
 8001458:	f412 2f80 	tst.w	r2, #262144	; 0x40000
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 800145c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
 800145e:	bf18      	it	ne
 8001460:	2022      	movne	r0, #34	; 0x22
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
 8001462:	f412 3f00 	tst.w	r2, #131072	; 0x20000
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 8001466:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
 8001468:	bf18      	it	ne
 800146a:	2023      	movne	r0, #35	; 0x23
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
 800146c:	f412 3f80 	tst.w	r2, #65536	; 0x10000
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 8001470:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001472:	ea6f 4202 	mvn.w	r2, r2, lsl #16
 8001476:	ea6f 4212 	mvn.w	r2, r2, lsr #16
 800147a:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
 800147c:	bf18      	it	ne
 800147e:	2024      	movne	r0, #36	; 0x24
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	e000ed00 	.word	0xe000ed00

08001488 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
 8001488:	b510      	push	{r4, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 800148a:	4b19      	ldr	r3, [pc, #100]	; (80014f0 <bus_fault.constprop.0+0x68>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
 800148c:	4602      	mov	r2, r0
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 800148e:	6a98      	ldr	r0, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 8001490:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
 8001492:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 8001496:	bf14      	ite	ne
 8001498:	2017      	movne	r0, #23
 800149a:	2016      	moveq	r0, #22
		reason = K_ERR_ARM_BUS_UNSTACKING;
 800149c:	f414 6f00 	tst.w	r4, #2048	; 0x800
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 80014a0:	6a9c      	ldr	r4, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_UNSTACKING;
 80014a2:	bf18      	it	ne
 80014a4:	2018      	movne	r0, #24
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 80014a6:	05a4      	lsls	r4, r4, #22
 80014a8:	d509      	bpl.n	80014be <bus_fault.constprop.0+0x36>
		STORE_xFAR(bfar, SCB->BFAR);
 80014aa:	6b98      	ldr	r0, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 80014ac:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80014ae:	0400      	lsls	r0, r0, #16
 80014b0:	d504      	bpl.n	80014bc <bus_fault.constprop.0+0x34>
			if (from_hard_fault != 0) {
 80014b2:	b11a      	cbz	r2, 80014bc <bus_fault.constprop.0+0x34>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 80014b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80014ba:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
 80014bc:	2019      	movs	r0, #25
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 80014be:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <bus_fault.constprop.0+0x68>)
 80014c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
 80014c2:	f412 6f80 	tst.w	r2, #1024	; 0x400
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 80014c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
 80014c8:	bf18      	it	ne
 80014ca:	201a      	movne	r0, #26
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 80014cc:	05d2      	lsls	r2, r2, #23
 80014ce:	d40c      	bmi.n	80014ea <bus_fault.constprop.0+0x62>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
 80014d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
 80014d2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80014d6:	bf18      	it	ne
 80014d8:	201c      	movne	r0, #28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 80014da:	4a05      	ldr	r2, [pc, #20]	; (80014f0 <bus_fault.constprop.0+0x68>)
 80014dc:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80014de:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 80014e2:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 80014e4:	2300      	movs	r3, #0
 80014e6:	700b      	strb	r3, [r1, #0]
}
 80014e8:	bd10      	pop	{r4, pc}
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
 80014ea:	201b      	movs	r0, #27
 80014ec:	e7f5      	b.n	80014da <bus_fault.constprop.0+0x52>
 80014ee:	bf00      	nop
 80014f0:	e000ed00 	.word	0xe000ed00

080014f4 <mem_manage_fault.constprop.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
 80014f4:	b510      	push	{r4, lr}
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 80014f6:	4b1c      	ldr	r3, [pc, #112]	; (8001568 <mem_manage_fault.constprop.0+0x74>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
 80014f8:	4602      	mov	r2, r0
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 80014fa:	6a98      	ldr	r0, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 80014fc:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
 80014fe:	f010 0f10 	tst.w	r0, #16
 8001502:	bf14      	ite	ne
 8001504:	2011      	movne	r0, #17
 8001506:	2010      	moveq	r0, #16
		reason = K_ERR_ARM_MEM_UNSTACKING;
 8001508:	f014 0f08 	tst.w	r4, #8
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 800150c:	6a9c      	ldr	r4, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_UNSTACKING;
 800150e:	bf18      	it	ne
 8001510:	2012      	movne	r0, #18
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 8001512:	07a4      	lsls	r4, r4, #30
 8001514:	d509      	bpl.n	800152a <mem_manage_fault.constprop.0+0x36>
		uint32_t temp = SCB->MMFAR;
 8001516:	6b58      	ldr	r0, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 8001518:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800151a:	0600      	lsls	r0, r0, #24
 800151c:	d504      	bpl.n	8001528 <mem_manage_fault.constprop.0+0x34>
			if (from_hard_fault != 0) {
 800151e:	b11a      	cbz	r2, 8001528 <mem_manage_fault.constprop.0+0x34>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 8001520:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001522:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001526:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
 8001528:	2013      	movs	r0, #19
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 800152a:	4b0f      	ldr	r3, [pc, #60]	; (8001568 <mem_manage_fault.constprop.0+0x74>)
 800152c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
 800152e:	f012 0f01 	tst.w	r2, #1
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 8001532:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
 8001534:	bf18      	it	ne
 8001536:	2014      	movne	r0, #20
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
 8001538:	f012 0f20 	tst.w	r2, #32
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 800153c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
 800153e:	bf18      	it	ne
 8001540:	2015      	movne	r0, #21
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 8001542:	06d4      	lsls	r4, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
 8001544:	bf58      	it	pl
 8001546:	6a9b      	ldrpl	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 8001548:	4b07      	ldr	r3, [pc, #28]	; (8001568 <mem_manage_fault.constprop.0+0x74>)
 800154a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800154c:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
 800154e:	bf42      	ittt	mi
 8001550:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
 8001552:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
 8001556:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 8001558:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800155a:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 800155e:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 8001560:	2300      	movs	r3, #0
 8001562:	700b      	strb	r3, [r1, #0]
}
 8001564:	bd10      	pop	{r4, pc}
 8001566:	bf00      	nop
 8001568:	e000ed00 	.word	0xe000ed00

0800156c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
 800156c:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 800156e:	4b44      	ldr	r3, [pc, #272]	; (8001680 <z_arm_fault+0x114>)
 8001570:	685b      	ldr	r3, [r3, #4]
{
 8001572:	b09c      	sub	sp, #112	; 0x70
 8001574:	4606      	mov	r6, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 8001576:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800157a:	2500      	movs	r5, #0
 800157c:	f385 8811 	msr	BASEPRI, r5
 8001580:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
 8001584:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
 8001588:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
 800158c:	d111      	bne.n	80015b2 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
 800158e:	f002 000c 	and.w	r0, r2, #12
 8001592:	2808      	cmp	r0, #8
 8001594:	d00d      	beq.n	80015b2 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
 8001596:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
 8001598:	bf4c      	ite	mi
 800159a:	460e      	movmi	r6, r1
			*nested_exc = true;
 800159c:	2501      	movpl	r5, #1
	*recoverable = false;
 800159e:	2200      	movs	r2, #0
	switch (fault) {
 80015a0:	3b03      	subs	r3, #3
	*recoverable = false;
 80015a2:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
 80015a6:	2b03      	cmp	r3, #3
 80015a8:	d805      	bhi.n	80015b6 <z_arm_fault+0x4a>
 80015aa:	e8df f003 	tbb	[pc, r3]
 80015ae:	5c1e      	.short	0x5c1e
 80015b0:	5960      	.short	0x5960
		return NULL;
 80015b2:	462e      	mov	r6, r5
 80015b4:	e7f3      	b.n	800159e <z_arm_fault+0x32>
 80015b6:	2400      	movs	r4, #0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
 80015b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80015bc:	b99b      	cbnz	r3, 80015e6 <z_arm_fault+0x7a>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
 80015be:	2268      	movs	r2, #104	; 0x68
 80015c0:	4631      	mov	r1, r6
 80015c2:	a802      	add	r0, sp, #8
 80015c4:	f001 f9bc 	bl	8002940 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
 80015c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80015ca:	2d00      	cmp	r5, #0
 80015cc:	d053      	beq.n	8001676 <z_arm_fault+0x10a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 80015ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80015d2:	b922      	cbnz	r2, 80015de <z_arm_fault+0x72>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
 80015d4:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 80015d8:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 80015dc:	9309      	str	r3, [sp, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
 80015de:	a902      	add	r1, sp, #8
 80015e0:	4620      	mov	r0, r4
 80015e2:	f001 f98c 	bl	80028fe <z_arm_fatal_error>
}
 80015e6:	b01c      	add	sp, #112	; 0x70
 80015e8:	bd70      	pop	{r4, r5, r6, pc}
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 80015ea:	4b25      	ldr	r3, [pc, #148]	; (8001680 <z_arm_fault+0x114>)
 80015ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015ee:	0791      	lsls	r1, r2, #30
 80015f0:	d4e1      	bmi.n	80015b6 <z_arm_fault+0x4a>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
 80015f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015f4:	2a00      	cmp	r2, #0
 80015f6:	dbde      	blt.n	80015b6 <z_arm_fault+0x4a>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 80015f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015fa:	0052      	lsls	r2, r2, #1
 80015fc:	d5db      	bpl.n	80015b6 <z_arm_fault+0x4a>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
 80015fe:	695a      	ldr	r2, [r3, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
 8001600:	69b1      	ldr	r1, [r6, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
 8001602:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001606:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001608:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800160c:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
 8001610:	695a      	ldr	r2, [r3, #20]
	uint16_t fault_insn = *(ret_addr - 1);
 8001612:	f831 1c02 	ldrh.w	r1, [r1, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
 8001616:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800161a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800161c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001620:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
 8001624:	f64d 7202 	movw	r2, #57090	; 0xdf02
 8001628:	4291      	cmp	r1, r2
 800162a:	d009      	beq.n	8001640 <z_arm_fault+0xd4>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
 800162c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800162e:	b2d2      	uxtb	r2, r2
 8001630:	b142      	cbz	r2, 8001644 <z_arm_fault+0xd8>
			reason = mem_manage_fault(esf, 1, recoverable);
 8001632:	f10d 0107 	add.w	r1, sp, #7
 8001636:	2001      	movs	r0, #1
		reason = mem_manage_fault(esf, 0, recoverable);
 8001638:	f7ff ff5c 	bl	80014f4 <mem_manage_fault.constprop.0>
		reason = usage_fault(esf);
 800163c:	4604      	mov	r4, r0
		break;
 800163e:	e7bb      	b.n	80015b8 <z_arm_fault+0x4c>
			reason = esf->basic.r0;
 8001640:	6834      	ldr	r4, [r6, #0]
 8001642:	e7b9      	b.n	80015b8 <z_arm_fault+0x4c>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
 8001644:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001646:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
 800164a:	d005      	beq.n	8001658 <z_arm_fault+0xec>
			reason = bus_fault(esf, 1, recoverable);
 800164c:	f10d 0107 	add.w	r1, sp, #7
 8001650:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
 8001652:	f7ff ff19 	bl	8001488 <bus_fault.constprop.0>
 8001656:	e7f1      	b.n	800163c <z_arm_fault+0xd0>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
 8001658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800165a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800165e:	d3aa      	bcc.n	80015b6 <z_arm_fault+0x4a>
		reason = usage_fault(esf);
 8001660:	f7ff fee8 	bl	8001434 <usage_fault.constprop.0>
 8001664:	e7ea      	b.n	800163c <z_arm_fault+0xd0>
		reason = mem_manage_fault(esf, 0, recoverable);
 8001666:	f10d 0107 	add.w	r1, sp, #7
 800166a:	2000      	movs	r0, #0
 800166c:	e7e4      	b.n	8001638 <z_arm_fault+0xcc>
		reason = bus_fault(esf, 0, recoverable);
 800166e:	f10d 0107 	add.w	r1, sp, #7
 8001672:	2000      	movs	r0, #0
 8001674:	e7ed      	b.n	8001652 <z_arm_fault+0xe6>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 8001676:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800167a:	f023 0301 	bic.w	r3, r3, #1
 800167e:	e7ad      	b.n	80015dc <z_arm_fault+0x70>
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 8001684:	4a02      	ldr	r2, [pc, #8]	; (8001690 <z_arm_fault_init+0xc>)
 8001686:	6953      	ldr	r3, [r2, #20]
 8001688:	f043 0310 	orr.w	r3, r3, #16
 800168c:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
 800168e:	4770      	bx	lr
 8001690:	e000ed00 	.word	0xe000ed00

08001694 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
 8001694:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
 8001698:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
 800169c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
 800169e:	4672      	mov	r2, lr
	bl z_arm_fault
 80016a0:	f7ff ff64 	bl	800156c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
 80016a4:	bd01      	pop	{r0, pc}
 80016a6:	bf00      	nop

080016a8 <z_arm_interrupt_init>:
 80016a8:	4804      	ldr	r0, [pc, #16]	; (80016bc <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
 80016aa:	2300      	movs	r3, #0
 80016ac:	2110      	movs	r1, #16
 80016ae:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 80016b0:	3301      	adds	r3, #1
 80016b2:	2b56      	cmp	r3, #86	; 0x56
 80016b4:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
 80016b8:	d1f9      	bne.n	80016ae <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
 80016ba:	4770      	bx	lr
 80016bc:	e000e100 	.word	0xe000e100

080016c0 <__start>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 80016c0:	2010      	movs	r0, #16
    msr BASEPRI, r0
 80016c2:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
 80016c6:	4808      	ldr	r0, [pc, #32]	; (80016e8 <__start+0x28>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
 80016c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
 80016cc:	1840      	adds	r0, r0, r1
    msr PSP, r0
 80016ce:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 80016d2:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 80016d6:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 80016d8:	4308      	orrs	r0, r1
    msr CONTROL, r0
 80016da:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 80016de:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
 80016e2:	f7ff fdad 	bl	8001240 <z_arm_prep_c>
 80016e6:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
 80016e8:	20000318 	.word	0x20000318

080016ec <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
 80016ec:	4b08      	ldr	r3, [pc, #32]	; (8001710 <z_impl_k_thread_abort+0x24>)
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	4283      	cmp	r3, r0
 80016f2:	d10b      	bne.n	800170c <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80016f4:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
 80016f8:	b143      	cbz	r3, 800170c <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 80016fa:	4b06      	ldr	r3, [pc, #24]	; (8001714 <z_impl_k_thread_abort+0x28>)
 80016fc:	685a      	ldr	r2, [r3, #4]
 80016fe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001702:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
 8001704:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001706:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800170a:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
 800170c:	f000 be98 	b.w	8002440 <z_thread_abort>
 8001710:	200002d8 	.word	0x200002d8
 8001714:	e000ed00 	.word	0xe000ed00

08001718 <stm32_exti_isr>:
 * Check EXTI lines in exti_range for pending interrupts
 *
 * @param *exti_range Pointer to a exti_range structure
 */
static void stm32_exti_isr(const void *exti_range)
{
 8001718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 800171c:	4e0e      	ldr	r6, [pc, #56]	; (8001758 <stm32_exti_isr+0x40>)
		if (stm32_exti_is_pending(line)) {
			/* clear pending interrupt */
			stm32_exti_clear_pending(line);

			/* run callback only if one is registered */
			if (!data->cb[line].cb) {
 800171e:	4f0f      	ldr	r7, [pc, #60]	; (800175c <stm32_exti_isr+0x44>)
{
 8001720:	4605      	mov	r5, r0
	for (int i = 0; i <= range->len; i++) {
 8001722:	2400      	movs	r4, #0
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 8001724:	f04f 0801 	mov.w	r8, #1
		line = range->start + i;
 8001728:	782b      	ldrb	r3, [r5, #0]
 800172a:	1918      	adds	r0, r3, r4
	if (line < 32) {
 800172c:	281f      	cmp	r0, #31
 800172e:	dc0d      	bgt.n	800174c <stm32_exti_isr+0x34>
 8001730:	6972      	ldr	r2, [r6, #20]
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 8001732:	fa08 f300 	lsl.w	r3, r8, r0
		if (stm32_exti_is_pending(line)) {
 8001736:	ea33 0202 	bics.w	r2, r3, r2
 800173a:	d107      	bne.n	800174c <stm32_exti_isr+0x34>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 800173c:	6173      	str	r3, [r6, #20]
			if (!data->cb[line].cb) {
 800173e:	f857 3030 	ldr.w	r3, [r7, r0, lsl #3]
 8001742:	b11b      	cbz	r3, 800174c <stm32_exti_isr+0x34>
				continue;
			}

			data->cb[line].cb(line, data->cb[line].data);
 8001744:	eb07 02c0 	add.w	r2, r7, r0, lsl #3
 8001748:	6851      	ldr	r1, [r2, #4]
 800174a:	4798      	blx	r3
	for (int i = 0; i <= range->len; i++) {
 800174c:	786b      	ldrb	r3, [r5, #1]
 800174e:	3401      	adds	r4, #1
 8001750:	42a3      	cmp	r3, r4
 8001752:	dae9      	bge.n	8001728 <stm32_exti_isr+0x10>
		}
	}
}
 8001754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001758:	40013c00 	.word	0x40013c00
 800175c:	200001c8 	.word	0x200001c8

08001760 <stm32_fill_irq_table>:

static void stm32_fill_irq_table(int8_t start, int8_t len, int32_t irqn)
{
	for (int i = 0; i < len; i++) {
 8001760:	4b04      	ldr	r3, [pc, #16]	; (8001774 <stm32_fill_irq_table+0x14>)
 8001762:	4418      	add	r0, r3
 8001764:	2300      	movs	r3, #0
 8001766:	3301      	adds	r3, #1
 8001768:	4299      	cmp	r1, r3
		exti_irq_table[start + i] = irqn;
 800176a:	f800 2b01 	strb.w	r2, [r0], #1
	for (int i = 0; i < len; i++) {
 800176e:	dcfa      	bgt.n	8001766 <stm32_fill_irq_table+0x6>
	}
}
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	2000002c 	.word	0x2000002c

08001778 <stm32_exti_enable>:
{
 8001778:	b410      	push	{r4}
	irqnum = exti_irq_table[line];
 800177a:	4b06      	ldr	r3, [pc, #24]	; (8001794 <stm32_exti_enable+0x1c>)
  SET_BIT(EXTI->IMR, ExtiLine);
 800177c:	4906      	ldr	r1, [pc, #24]	; (8001798 <stm32_exti_enable+0x20>)
{
 800177e:	4602      	mov	r2, r0
 8001780:	680c      	ldr	r4, [r1, #0]
	irqnum = exti_irq_table[line];
 8001782:	5618      	ldrsb	r0, [r3, r0]
	LL_EXTI_EnableIT_0_31(1 << line);
 8001784:	2301      	movs	r3, #1
 8001786:	4093      	lsls	r3, r2
 8001788:	4323      	orrs	r3, r4
 800178a:	600b      	str	r3, [r1, #0]
}
 800178c:	f85d 4b04 	ldr.w	r4, [sp], #4
	irq_enable(irqnum);
 8001790:	f7ff bd2c 	b.w	80011ec <arch_irq_enable>
 8001794:	2000002c 	.word	0x2000002c
 8001798:	40013c00 	.word	0x40013c00

0800179c <stm32_exti_disable>:
	if (line < 32) {
 800179c:	281f      	cmp	r0, #31
 800179e:	dc06      	bgt.n	80017ae <stm32_exti_disable+0x12>
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80017a0:	4903      	ldr	r1, [pc, #12]	; (80017b0 <stm32_exti_disable+0x14>)
		LL_EXTI_DisableIT_0_31(1 << line);
 80017a2:	2201      	movs	r2, #1
 80017a4:	680b      	ldr	r3, [r1, #0]
 80017a6:	4082      	lsls	r2, r0
 80017a8:	ea23 0302 	bic.w	r3, r3, r2
 80017ac:	600b      	str	r3, [r1, #0]
}
 80017ae:	4770      	bx	lr
 80017b0:	40013c00 	.word	0x40013c00

080017b4 <stm32_exti_trigger>:
	switch (trigger) {
 80017b4:	2903      	cmp	r1, #3
 80017b6:	d82a      	bhi.n	800180e <stm32_exti_trigger+0x5a>
 80017b8:	e8df f001 	tbb	[pc, r1]
 80017bc:	1f140e02 	.word	0x1f140e02
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80017c0:	4b13      	ldr	r3, [pc, #76]	; (8001810 <stm32_exti_trigger+0x5c>)
		LL_EXTI_DisableRisingTrig_0_31(1 << line);
 80017c2:	2201      	movs	r2, #1
 80017c4:	6899      	ldr	r1, [r3, #8]
 80017c6:	4082      	lsls	r2, r0
 80017c8:	ea21 0102 	bic.w	r1, r1, r2
  SET_BIT(EXTI->RTSR, ExtiLine);
 80017cc:	6099      	str	r1, [r3, #8]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80017ce:	68d9      	ldr	r1, [r3, #12]
 80017d0:	ea21 0202 	bic.w	r2, r1, r2
 80017d4:	60da      	str	r2, [r3, #12]
}
 80017d6:	4770      	bx	lr
  SET_BIT(EXTI->RTSR, ExtiLine);
 80017d8:	4b0d      	ldr	r3, [pc, #52]	; (8001810 <stm32_exti_trigger+0x5c>)
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 80017da:	2201      	movs	r2, #1
 80017dc:	6899      	ldr	r1, [r3, #8]
 80017de:	4082      	lsls	r2, r0
 80017e0:	4311      	orrs	r1, r2
 80017e2:	e7f3      	b.n	80017cc <stm32_exti_trigger+0x18>
  SET_BIT(EXTI->FTSR, ExtiLine);
 80017e4:	4b0a      	ldr	r3, [pc, #40]	; (8001810 <stm32_exti_trigger+0x5c>)
		LL_EXTI_EnableFallingTrig_0_31(1 << line);
 80017e6:	2201      	movs	r2, #1
 80017e8:	68d9      	ldr	r1, [r3, #12]
 80017ea:	4082      	lsls	r2, r0
 80017ec:	4311      	orrs	r1, r2
 80017ee:	60d9      	str	r1, [r3, #12]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80017f0:	6899      	ldr	r1, [r3, #8]
 80017f2:	ea21 0202 	bic.w	r2, r1, r2
 80017f6:	609a      	str	r2, [r3, #8]
}
 80017f8:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 80017fa:	2301      	movs	r3, #1
 80017fc:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR, ExtiLine);
 8001800:	4b03      	ldr	r3, [pc, #12]	; (8001810 <stm32_exti_trigger+0x5c>)
 8001802:	689a      	ldr	r2, [r3, #8]
 8001804:	4302      	orrs	r2, r0
 8001806:	609a      	str	r2, [r3, #8]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8001808:	68da      	ldr	r2, [r3, #12]
 800180a:	4310      	orrs	r0, r2
 800180c:	60d8      	str	r0, [r3, #12]
}
 800180e:	4770      	bx	lr
 8001810:	40013c00 	.word	0x40013c00

08001814 <stm32_exti_set_callback>:

/**
 * @brief set & unset for the interrupt callbacks
 */
int stm32_exti_set_callback(int line, stm32_exti_callback_t cb, void *arg)
{
 8001814:	b510      	push	{r4, lr}
	const struct device *const dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	if (data->cb[line].cb) {
 8001816:	4b07      	ldr	r3, [pc, #28]	; (8001834 <stm32_exti_set_callback+0x20>)
{
 8001818:	4604      	mov	r4, r0
	if (data->cb[line].cb) {
 800181a:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 800181e:	b928      	cbnz	r0, 800182c <stm32_exti_set_callback+0x18>
		return -EBUSY;
	}

	data->cb[line].cb = cb;
 8001820:	f843 1034 	str.w	r1, [r3, r4, lsl #3]
	data->cb[line].data = arg;
 8001824:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8001828:	605a      	str	r2, [r3, #4]

	return 0;
}
 800182a:	bd10      	pop	{r4, pc}
		return -EBUSY;
 800182c:	f06f 000f 	mvn.w	r0, #15
 8001830:	e7fb      	b.n	800182a <stm32_exti_set_callback+0x16>
 8001832:	bf00      	nop
 8001834:	200001c8 	.word	0x200001c8

08001838 <stm32_exti_unset_callback>:
void stm32_exti_unset_callback(int line)
{
	const struct device *const dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	data->cb[line].cb = NULL;
 8001838:	4b03      	ldr	r3, [pc, #12]	; (8001848 <stm32_exti_unset_callback+0x10>)
 800183a:	2200      	movs	r2, #0
 800183c:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
	data->cb[line].data = NULL;
 8001840:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8001844:	605a      	str	r2, [r3, #4]
}
 8001846:	4770      	bx	lr
 8001848:	200001c8 	.word	0x200001c8

0800184c <stm32_clock_control_get_subsys_rate>:
}

static int stm32_clock_control_get_subsys_rate(const struct device *clock,
						clock_control_subsys_t sub_system,
						uint32_t *rate)
{
 800184c:	b510      	push	{r4, lr}
	 * Get AHB Clock (= SystemCoreClock = SYSCLK/prescaler)
	 * SystemCoreClock is preferred to CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC
	 * since it will be updated after clock configuration and hence
	 * more likely to contain actual clock speed
	 */
	uint32_t ahb_clock = SystemCoreClock;
 800184e:	4b21      	ldr	r3, [pc, #132]	; (80018d4 <stm32_clock_control_get_subsys_rate+0x88>)
 8001850:	6818      	ldr	r0, [r3, #0]
	}
#endif

	ARG_UNUSED(clock);

	switch (pclken->bus) {
 8001852:	680b      	ldr	r3, [r1, #0]
 8001854:	2b44      	cmp	r3, #68	; 0x44
{
 8001856:	4614      	mov	r4, r2
	switch (pclken->bus) {
 8001858:	d828      	bhi.n	80018ac <stm32_clock_control_get_subsys_rate+0x60>
 800185a:	2b2f      	cmp	r3, #47	; 0x2f
 800185c:	d805      	bhi.n	800186a <stm32_clock_control_get_subsys_rate+0x1e>
 800185e:	3b01      	subs	r3, #1
 8001860:	2b05      	cmp	r3, #5
 8001862:	d90d      	bls.n	8001880 <stm32_clock_control_get_subsys_rate+0x34>
 8001864:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8001868:	e01f      	b.n	80018aa <stm32_clock_control_get_subsys_rate+0x5e>
 800186a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800186e:	2201      	movs	r2, #1
 8001870:	408a      	lsls	r2, r1
 8001872:	4919      	ldr	r1, [pc, #100]	; (80018d8 <stm32_clock_control_get_subsys_rate+0x8c>)
 8001874:	420a      	tst	r2, r1
 8001876:	d116      	bne.n	80018a6 <stm32_clock_control_get_subsys_rate+0x5a>
 8001878:	2b40      	cmp	r3, #64	; 0x40
 800187a:	d1f3      	bne.n	8001864 <stm32_clock_control_get_subsys_rate+0x18>
	return clock / prescaler;
 800187c:	0840      	lsrs	r0, r0, #1
	case STM32_CLOCK_BUS_APB1:
#if defined(STM32_CLOCK_BUS_APB1_2)
	case STM32_CLOCK_BUS_APB1_2:
#endif
		*rate = apb1_clock;
		break;
 800187e:	e012      	b.n	80018a6 <stm32_clock_control_get_subsys_rate+0x5a>
	switch (pclken->bus) {
 8001880:	2b05      	cmp	r3, #5
 8001882:	d8ef      	bhi.n	8001864 <stm32_clock_control_get_subsys_rate+0x18>
 8001884:	a201      	add	r2, pc, #4	; (adr r2, 800188c <stm32_clock_control_get_subsys_rate+0x40>)
 8001886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800188a:	bf00      	nop
 800188c:	080018b3 	.word	0x080018b3
 8001890:	080018c3 	.word	0x080018c3
 8001894:	08001865 	.word	0x08001865
 8001898:	080018a5 	.word	0x080018a5
 800189c:	080018a5 	.word	0x080018a5
 80018a0:	080018a7 	.word	0x080018a7
 80018a4:	2000      	movs	r0, #0
#endif /* STM32_SRC_PLLI2S_R */
/* PLLSAI1x not supported yet */
/* PLLSAI2x not supported yet */
#if defined(STM32_SRC_LSE)
	case STM32_SRC_LSE:
		*rate = STM32_LSE_FREQ;
 80018a6:	6020      	str	r0, [r4, #0]
#endif /* STM32_HSI48_ENABLED */
	default:
		return -ENOTSUP;
	}

	return 0;
 80018a8:	2000      	movs	r0, #0
}
 80018aa:	bd10      	pop	{r4, pc}
	switch (pclken->bus) {
 80018ac:	2ba8      	cmp	r3, #168	; 0xa8
 80018ae:	d0fa      	beq.n	80018a6 <stm32_clock_control_get_subsys_rate+0x5a>
 80018b0:	e7d8      	b.n	8001864 <stm32_clock_control_get_subsys_rate+0x18>
		*rate = get_pll_div_frequency(get_pllsrc_frequency(),
 80018b2:	f000 f895 	bl	80019e0 <get_pllsrc_frequency>
	return pllsrc_freq / pllm_div * plln_mul / pllout_div;
 80018b6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80018ba:	08c0      	lsrs	r0, r0, #3
 80018bc:	4358      	muls	r0, r3
 80018be:	0880      	lsrs	r0, r0, #2
		break;
 80018c0:	e7f1      	b.n	80018a6 <stm32_clock_control_get_subsys_rate+0x5a>
		*rate = get_pll_div_frequency(get_pllsrc_frequency(),
 80018c2:	f000 f88d 	bl	80019e0 <get_pllsrc_frequency>
	return pllsrc_freq / pllm_div * plln_mul / pllout_div;
 80018c6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80018ca:	08c0      	lsrs	r0, r0, #3
 80018cc:	4358      	muls	r0, r3
 80018ce:	08c0      	lsrs	r0, r0, #3
		break;
 80018d0:	e7e9      	b.n	80018a6 <stm32_clock_control_get_subsys_rate+0x5a>
 80018d2:	bf00      	nop
 80018d4:	20000020 	.word	0x20000020
 80018d8:	00100111 	.word	0x00100111

080018dc <stm32_clock_control_init>:
 * @param dev clock device struct
 *
 * @return 0
 */
int stm32_clock_control_init(const struct device *dev)
{
 80018dc:	b570      	push	{r4, r5, r6, lr}
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80018de:	4c3c      	ldr	r4, [pc, #240]	; (80019d0 <stm32_clock_control_init+0xf4>)
	ARG_UNUSED(dev);

	/* Some clocks would be activated by default */
	config_enable_default_clocks();
 80018e0:	f000 f896 	bl	8001a10 <config_enable_default_clocks>

#if defined(FLASH_ACR_LATENCY)
	uint32_t old_flash_freq;
	uint32_t new_flash_freq;

	old_flash_freq = RCC_CALC_FLASH_FREQ(HAL_RCC_GetSysClockFreq(),
 80018e4:	f000 fa26 	bl	8001d34 <HAL_RCC_GetSysClockFreq>
 80018e8:	68a3      	ldr	r3, [r4, #8]
 80018ea:	4a3a      	ldr	r2, [pc, #232]	; (80019d4 <stm32_clock_control_init+0xf8>)
 80018ec:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80018f0:	5cd3      	ldrb	r3, [r2, r3]
 80018f2:	fa20 f503 	lsr.w	r5, r0, r3

	new_flash_freq = RCC_CALC_FLASH_FREQ(CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC,
				      STM32_FLASH_PRESCALER);

	/* If freq increases, set flash latency before any clock setting */
	if (old_flash_freq < CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC) {
 80018f6:	4838      	ldr	r0, [pc, #224]	; (80019d8 <stm32_clock_control_init+0xfc>)
 80018f8:	4285      	cmp	r5, r0
 80018fa:	d201      	bcs.n	8001900 <stm32_clock_control_init+0x24>
		LL_SetFlashLatency(CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC);
 80018fc:	f000 fa48 	bl	8001d90 <LL_SetFlashLatency>
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001900:	6823      	ldr	r3, [r4, #0]
 8001902:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001906:	6023      	str	r3, [r4, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001908:	6823      	ldr	r3, [r4, #0]
 800190a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800190e:	6023      	str	r3, [r4, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8001910:	4b2f      	ldr	r3, [pc, #188]	; (80019d0 <stm32_clock_control_init+0xf4>)
 8001912:	681a      	ldr	r2, [r3, #0]
		while (LL_RCC_HSE_IsReady() != 1) {
 8001914:	0394      	lsls	r4, r2, #14
 8001916:	d5fc      	bpl.n	8001912 <stm32_clock_control_init+0x36>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001918:	689a      	ldr	r2, [r3, #8]
 800191a:	f002 020c 	and.w	r2, r2, #12
	if (LL_RCC_GetSysClkSource() == LL_RCC_SYS_CLKSOURCE_STATUS_PLL) {
 800191e:	2a08      	cmp	r2, #8
 8001920:	d117      	bne.n	8001952 <stm32_clock_control_init+0x76>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001922:	689a      	ldr	r2, [r3, #8]
 8001924:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001928:	609a      	str	r2, [r3, #8]
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800192a:	681a      	ldr	r2, [r3, #0]
	if (LL_RCC_HSI_IsReady() != 1) {
 800192c:	0790      	lsls	r0, r2, #30
 800192e:	d407      	bmi.n	8001940 <stm32_clock_control_init+0x64>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	f042 0201 	orr.w	r2, r2, #1
 8001936:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001938:	4a25      	ldr	r2, [pc, #148]	; (80019d0 <stm32_clock_control_init+0xf4>)
 800193a:	6813      	ldr	r3, [r2, #0]
		while (LL_RCC_HSI_IsReady() != 1) {
 800193c:	0799      	lsls	r1, r3, #30
 800193e:	d5fc      	bpl.n	800193a <stm32_clock_control_init+0x5e>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001940:	4b23      	ldr	r3, [pc, #140]	; (80019d0 <stm32_clock_control_init+0xf4>)
 8001942:	689a      	ldr	r2, [r3, #8]
 8001944:	f022 0203 	bic.w	r2, r2, #3
 8001948:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800194a:	689a      	ldr	r2, [r3, #8]
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 800194c:	f012 0f0c 	tst.w	r2, #12
 8001950:	d1fb      	bne.n	800194a <stm32_clock_control_init+0x6e>
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001952:	4c1f      	ldr	r4, [pc, #124]	; (80019d0 <stm32_clock_control_init+0xf4>)
 8001954:	6823      	ldr	r3, [r4, #0]
 8001956:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800195a:	6023      	str	r3, [r4, #0]
	MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, pllp(STM32_PLL_P_DIVISOR));
 800195c:	6863      	ldr	r3, [r4, #4]
 800195e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001962:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001966:	6063      	str	r3, [r4, #4]
	MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ, pllq(STM32_PLL_Q_DIVISOR));
 8001968:	6863      	ldr	r3, [r4, #4]
 800196a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800196e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001972:	6063      	str	r3, [r4, #4]
	config_pll_sysclock();
 8001974:	f000 f838 	bl	80019e8 <config_pll_sysclock>
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001978:	6823      	ldr	r3, [r4, #0]
 800197a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800197e:	6023      	str	r3, [r4, #0]
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8001980:	6823      	ldr	r3, [r4, #0]
	while (LL_RCC_PLL_IsReady() != 1U) {
 8001982:	019b      	lsls	r3, r3, #6
 8001984:	d5fc      	bpl.n	8001980 <stm32_clock_control_init+0xa4>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001986:	68a3      	ldr	r3, [r4, #8]
 8001988:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800198c:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800198e:	68a3      	ldr	r3, [r4, #8]
 8001990:	f023 0303 	bic.w	r3, r3, #3
 8001994:	f043 0302 	orr.w	r3, r3, #2
 8001998:	60a3      	str	r3, [r4, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800199a:	4c0d      	ldr	r4, [pc, #52]	; (80019d0 <stm32_clock_control_init+0xf4>)
 800199c:	68a3      	ldr	r3, [r4, #8]
 800199e:	f003 030c 	and.w	r3, r3, #12
	}

#if STM32_SYSCLK_SRC_PLL
	/* Set PLL as System Clock Source */
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL) {
 80019a2:	2b08      	cmp	r3, #8
 80019a4:	d1fa      	bne.n	800199c <stm32_clock_control_init+0xc0>
		LL_RCC_SetAHBPrescaler(ahb_prescaler(STM32_CORE_PRESCALER));
	}

#if defined(FLASH_ACR_LATENCY)
	/* If freq not increased, set flash latency after all clock setting */
	if (old_flash_freq >= CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC) {
 80019a6:	4e0c      	ldr	r6, [pc, #48]	; (80019d8 <stm32_clock_control_init+0xfc>)
 80019a8:	42b5      	cmp	r5, r6
 80019aa:	d302      	bcc.n	80019b2 <stm32_clock_control_init+0xd6>
		LL_SetFlashLatency(CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC);
 80019ac:	4630      	mov	r0, r6
 80019ae:	f000 f9ef 	bl	8001d90 <LL_SetFlashLatency>
	}
#endif /* FLASH_ACR_LATENCY */

	SystemCoreClock = CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC;
 80019b2:	4b0a      	ldr	r3, [pc, #40]	; (80019dc <stm32_clock_control_init+0x100>)
 80019b4:	601e      	str	r6, [r3, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80019b6:	68a3      	ldr	r3, [r4, #8]
 80019b8:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80019bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019c0:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80019c2:	68a3      	ldr	r3, [r4, #8]
 80019c4:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80019c8:	60a3      	str	r3, [r4, #8]

	/* configure MCO1/MCO2 based on Kconfig */
	stm32_clock_control_mco_init();

	return 0;
}
 80019ca:	2000      	movs	r0, #0
 80019cc:	bd70      	pop	{r4, r5, r6, pc}
 80019ce:	bf00      	nop
 80019d0:	40023800 	.word	0x40023800
 80019d4:	0800349d 	.word	0x0800349d
 80019d8:	05b8d800 	.word	0x05b8d800
 80019dc:	20000020 	.word	0x20000020

080019e0 <get_pllsrc_frequency>:
		return STM32_HSE_FREQ;
	}

	__ASSERT(0, "Invalid source");
	return 0;
}
 80019e0:	4800      	ldr	r0, [pc, #0]	; (80019e4 <get_pllsrc_frequency+0x4>)
 80019e2:	4770      	bx	lr
 80019e4:	007a1200 	.word	0x007a1200

080019e8 <config_pll_sysclock>:
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 80019e8:	4a06      	ldr	r2, [pc, #24]	; (8001a04 <config_pll_sysclock+0x1c>)
 80019ea:	4907      	ldr	r1, [pc, #28]	; (8001a08 <config_pll_sysclock+0x20>)
 80019ec:	6853      	ldr	r3, [r2, #4]
 80019ee:	4019      	ands	r1, r3
 80019f0:	4b06      	ldr	r3, [pc, #24]	; (8001a0c <config_pll_sysclock+0x24>)
 80019f2:	430b      	orrs	r3, r1
 80019f4:	6053      	str	r3, [r2, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 80019f6:	6853      	ldr	r3, [r2, #4]
 80019f8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80019fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a00:	6053      	str	r3, [r2, #4]
{
	LL_RCC_PLL_ConfigDomain_SYS(get_pll_source(),
				    pllm(STM32_PLL_M_DIVISOR),
				    STM32_PLL_N_MULTIPLIER,
				    pllp(STM32_PLL_P_DIVISOR));
}
 8001a02:	4770      	bx	lr
 8001a04:	40023800 	.word	0x40023800
 8001a08:	ffbf8000 	.word	0xffbf8000
 8001a0c:	00406008 	.word	0x00406008

08001a10 <config_enable_default_clocks>:
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001a10:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <config_enable_default_clocks+0x1c>)
 8001a12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a14:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001a18:	641a      	str	r2, [r3, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40

/**
 * @brief Activate default clocks
 */
void config_enable_default_clocks(void)
{
 8001a1c:	b082      	sub	sp, #8
 8001a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a22:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001a24:	9b01      	ldr	r3, [sp, #4]
	/* Power Interface clock enabled by default */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
}
 8001a26:	b002      	add	sp, #8
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	40023800 	.word	0x40023800

08001a30 <gpio_stm32_init>:
 * @param dev GPIO device struct
 *
 * @return 0
 */
static int gpio_stm32_init(const struct device *dev)
{
 8001a30:	b538      	push	{r3, r4, r5, lr}
	struct gpio_stm32_data *data = dev->data;
 8001a32:	6903      	ldr	r3, [r0, #16]
{
 8001a34:	4604      	mov	r4, r0
	int ret;

	data->dev = dev;
 8001a36:	6058      	str	r0, [r3, #4]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
 8001a38:	4d08      	ldr	r5, [pc, #32]	; (8001a5c <gpio_stm32_init+0x2c>)
 8001a3a:	4628      	mov	r0, r5
 8001a3c:	f001 f93e 	bl	8002cbc <z_device_is_ready>

	if (!device_is_ready(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE))) {
 8001a40:	b140      	cbz	r0, 8001a54 <gpio_stm32_init+0x24>
					(clock_control_subsys_t *)&cfg->pclken);
 8001a42:	6861      	ldr	r1, [r4, #4]
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	return api->on(dev, sys);
 8001a44:	68ab      	ldr	r3, [r5, #8]
 8001a46:	310c      	adds	r1, #12
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4628      	mov	r0, r5
 8001a4c:	4798      	blx	r3
	LL_PWR_EnableVddIO2();
	z_stm32_hsem_unlock(CFG_HW_RCC_SEMID);
#endif
	/* enable port clock (if runtime PM is not enabled) */
	ret = gpio_stm32_clock_request(dev, !IS_ENABLED(CONFIG_PM_DEVICE_RUNTIME));
	if (ret < 0) {
 8001a4e:	ea00 70e0 	and.w	r0, r0, r0, asr #31

	pm_device_init_suspended(dev);
	(void)pm_device_runtime_enable(dev);

	return 0;
}
 8001a52:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
 8001a54:	f06f 0012 	mvn.w	r0, #18
 8001a58:	e7fb      	b.n	8001a52 <gpio_stm32_init+0x22>
 8001a5a:	bf00      	nop
 8001a5c:	08002ec8 	.word	0x08002ec8

08001a60 <gpio_stm32_pin_interrupt_configure>:
{
 8001a60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001a62:	4617      	mov	r7, r2
	if (mode == GPIO_INT_MODE_DISABLED) {
 8001a64:	f5b7 1f00 	cmp.w	r7, #2097152	; 0x200000
	const struct gpio_stm32_config *cfg = dev->config;
 8001a68:	6846      	ldr	r6, [r0, #4]
	struct gpio_stm32_data *data = dev->data;
 8001a6a:	6902      	ldr	r2, [r0, #16]
{
 8001a6c:	460c      	mov	r4, r1
 8001a6e:	461d      	mov	r5, r3
	if (mode == GPIO_INT_MODE_DISABLED) {
 8001a70:	d124      	bne.n	8001abc <gpio_stm32_pin_interrupt_configure+0x5c>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8001a72:	f001 0203 	and.w	r2, r1, #3
 8001a76:	3204      	adds	r2, #4
 8001a78:	0092      	lsls	r2, r2, #2
 8001a7a:	230f      	movs	r3, #15
 8001a7c:	4093      	lsls	r3, r2
 8001a7e:	ea43 0391 	orr.w	r3, r3, r1, lsr #2
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16)) >> POSITION_VAL(Line >> 16));
 8001a82:	b2da      	uxtb	r2, r3
 8001a84:	4933      	ldr	r1, [pc, #204]	; (8001b54 <gpio_stm32_pin_interrupt_configure+0xf4>)
 8001a86:	3202      	adds	r2, #2
 8001a88:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001a8c:	0c19      	lsrs	r1, r3, #16
 8001a8e:	ea02 4313 	and.w	r3, r2, r3, lsr #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a92:	fa91 f2a1 	rbit	r2, r1
  return __builtin_clz(value);
 8001a96:	fab2 f282 	clz	r2, r2
 8001a9a:	40d3      	lsrs	r3, r2
		if (gpio_stm32_get_exti_source(pin) == cfg->port) {
 8001a9c:	68b2      	ldr	r2, [r6, #8]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d109      	bne.n	8001ab6 <gpio_stm32_pin_interrupt_configure+0x56>
			stm32_exti_disable(pin);
 8001aa2:	4620      	mov	r0, r4
 8001aa4:	f7ff fe7a 	bl	800179c <stm32_exti_disable>
			stm32_exti_unset_callback(pin);
 8001aa8:	4620      	mov	r0, r4
 8001aaa:	f7ff fec5 	bl	8001838 <stm32_exti_unset_callback>
			stm32_exti_trigger(pin, STM32_EXTI_TRIG_NONE);
 8001aae:	2100      	movs	r1, #0
 8001ab0:	4620      	mov	r0, r4
 8001ab2:	f7ff fe7f 	bl	80017b4 <stm32_exti_trigger>
	int err = 0;
 8001ab6:	2000      	movs	r0, #0
}
 8001ab8:	b003      	add	sp, #12
 8001aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (mode == GPIO_INT_MODE_LEVEL) {
 8001abc:	f5b7 0f80 	cmp.w	r7, #4194304	; 0x400000
 8001ac0:	d041      	beq.n	8001b46 <gpio_stm32_pin_interrupt_configure+0xe6>
	if (stm32_exti_set_callback(pin, gpio_stm32_isr, data) != 0) {
 8001ac2:	4925      	ldr	r1, [pc, #148]	; (8001b58 <gpio_stm32_pin_interrupt_configure+0xf8>)
 8001ac4:	4620      	mov	r0, r4
 8001ac6:	f7ff fea5 	bl	8001814 <stm32_exti_set_callback>
 8001aca:	2800      	cmp	r0, #0
 8001acc:	d13e      	bne.n	8001b4c <gpio_stm32_pin_interrupt_configure+0xec>
	struct stm32_pclken pclken = {
 8001ace:	4a23      	ldr	r2, [pc, #140]	; (8001b5c <gpio_stm32_pin_interrupt_configure+0xfc>)
	gpio_stm32_enable_int(cfg->port, pin);
 8001ad0:	68b6      	ldr	r6, [r6, #8]
	struct stm32_pclken pclken = {
 8001ad2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ad6:	466b      	mov	r3, sp
 8001ad8:	e883 0003 	stmia.w	r3, {r0, r1}
 8001adc:	4820      	ldr	r0, [pc, #128]	; (8001b60 <gpio_stm32_pin_interrupt_configure+0x100>)
 8001ade:	6882      	ldr	r2, [r0, #8]
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	6812      	ldr	r2, [r2, #0]
 8001ae4:	4790      	blx	r2
	if (ret != 0) {
 8001ae6:	b9c0      	cbnz	r0, 8001b1a <gpio_stm32_pin_interrupt_configure+0xba>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8001ae8:	f004 0303 	and.w	r3, r4, #3
 8001aec:	3304      	adds	r3, #4
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	220f      	movs	r2, #15
 8001af2:	409a      	lsls	r2, r3
 8001af4:	ea42 0294 	orr.w	r2, r2, r4, lsr #2
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8001af8:	b2d3      	uxtb	r3, r2
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001b00:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8001b04:	0c11      	lsrs	r1, r2, #16
 8001b06:	6898      	ldr	r0, [r3, #8]
 8001b08:	ea20 4012 	bic.w	r0, r0, r2, lsr #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0c:	fa91 f2a1 	rbit	r2, r1
  return __builtin_clz(value);
 8001b10:	fab2 f282 	clz	r2, r2
 8001b14:	4096      	lsls	r6, r2
 8001b16:	4306      	orrs	r6, r0
 8001b18:	609e      	str	r6, [r3, #8]
	switch (trig) {
 8001b1a:	f1b5 6f80 	cmp.w	r5, #67108864	; 0x4000000
 8001b1e:	d00e      	beq.n	8001b3e <gpio_stm32_pin_interrupt_configure+0xde>
 8001b20:	f1b5 6fc0 	cmp.w	r5, #100663296	; 0x6000000
 8001b24:	d00d      	beq.n	8001b42 <gpio_stm32_pin_interrupt_configure+0xe2>
 8001b26:	f105 437e 	add.w	r3, r5, #4261412864	; 0xfe000000
 8001b2a:	4259      	negs	r1, r3
 8001b2c:	4159      	adcs	r1, r3
 8001b2e:	0049      	lsls	r1, r1, #1
	stm32_exti_trigger(pin, edge);
 8001b30:	4620      	mov	r0, r4
 8001b32:	f7ff fe3f 	bl	80017b4 <stm32_exti_trigger>
	stm32_exti_enable(pin);
 8001b36:	4620      	mov	r0, r4
 8001b38:	f7ff fe1e 	bl	8001778 <stm32_exti_enable>
 8001b3c:	e7bb      	b.n	8001ab6 <gpio_stm32_pin_interrupt_configure+0x56>
		edge = STM32_EXTI_TRIG_RISING;
 8001b3e:	2101      	movs	r1, #1
 8001b40:	e7f6      	b.n	8001b30 <gpio_stm32_pin_interrupt_configure+0xd0>
		edge = STM32_EXTI_TRIG_BOTH;
 8001b42:	2103      	movs	r1, #3
 8001b44:	e7f4      	b.n	8001b30 <gpio_stm32_pin_interrupt_configure+0xd0>
		err = -ENOTSUP;
 8001b46:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8001b4a:	e7b5      	b.n	8001ab8 <gpio_stm32_pin_interrupt_configure+0x58>
		err = -EBUSY;
 8001b4c:	f06f 000f 	mvn.w	r0, #15
	return err;
 8001b50:	e7b2      	b.n	8001ab8 <gpio_stm32_pin_interrupt_configure+0x58>
 8001b52:	bf00      	nop
 8001b54:	40013800 	.word	0x40013800
 8001b58:	08002c8d 	.word	0x08002c8d
 8001b5c:	080032d4 	.word	0x080032d4
 8001b60:	08002ec8 	.word	0x08002ec8

08001b64 <elapsed>:
 *     - the timer reset or the last time the function was called
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
 8001b64:	b510      	push	{r4, lr}
	uint32_t val1 = SysTick->VAL;	/* A */
 8001b66:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001b6a:	699a      	ldr	r2, [r3, #24]
	uint32_t ctrl = SysTick->CTRL;	/* B */
 8001b6c:	6919      	ldr	r1, [r3, #16]
	uint32_t val2 = SysTick->VAL;	/* C */
 8001b6e:	6998      	ldr	r0, [r3, #24]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 8001b70:	4b09      	ldr	r3, [pc, #36]	; (8001b98 <elapsed+0x34>)
 8001b72:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 8001b76:	4909      	ldr	r1, [pc, #36]	; (8001b9c <elapsed+0x38>)
 8001b78:	d101      	bne.n	8001b7e <elapsed+0x1a>
	    || (val1 < val2)) {
 8001b7a:	4282      	cmp	r2, r0
 8001b7c:	d206      	bcs.n	8001b8c <elapsed+0x28>
		overflow_cyc += last_load;
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	680c      	ldr	r4, [r1, #0]
 8001b82:	4422      	add	r2, r4
 8001b84:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
 8001b86:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8001b8a:	6912      	ldr	r2, [r2, #16]
	}

	return (last_load - val2) + overflow_cyc;
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	680a      	ldr	r2, [r1, #0]
 8001b90:	4413      	add	r3, r2
}
 8001b92:	1a18      	subs	r0, r3, r0
 8001b94:	bd10      	pop	{r4, pc}
 8001b96:	bf00      	nop
 8001b98:	200002c8 	.word	0x200002c8
 8001b9c:	200002d4 	.word	0x200002d4

08001ba0 <sys_clock_driver_init>:
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba0:	4b09      	ldr	r3, [pc, #36]	; (8001bc8 <sys_clock_driver_init+0x28>)
 8001ba2:	2210      	movs	r2, #16
 8001ba4:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
static int sys_clock_driver_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
 8001ba8:	4b08      	ldr	r3, [pc, #32]	; (8001bcc <sys_clock_driver_init+0x2c>)
 8001baa:	f242 527f 	movw	r2, #9599	; 0x257f
 8001bae:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
 8001bb0:	4b07      	ldr	r3, [pc, #28]	; (8001bd0 <sys_clock_driver_init+0x30>)
 8001bb2:	2000      	movs	r0, #0
 8001bb4:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
 8001bb6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001bba:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 8001bbc:	6198      	str	r0, [r3, #24]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 8001bbe:	691a      	ldr	r2, [r3, #16]
 8001bc0:	f042 0207 	orr.w	r2, r2, #7
 8001bc4:	611a      	str	r2, [r3, #16]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
 8001bc6:	4770      	bx	lr
 8001bc8:	e000ed00 	.word	0xe000ed00
 8001bcc:	200002d4 	.word	0x200002d4
 8001bd0:	200002c8 	.word	0x200002c8

08001bd4 <sys_clock_isr>:
{
 8001bd4:	b508      	push	{r3, lr}
	elapsed();
 8001bd6:	f7ff ffc5 	bl	8001b64 <elapsed>
	cycle_count += overflow_cyc;
 8001bda:	4b0c      	ldr	r3, [pc, #48]	; (8001c0c <sys_clock_isr+0x38>)
 8001bdc:	4a0c      	ldr	r2, [pc, #48]	; (8001c10 <sys_clock_isr+0x3c>)
 8001bde:	6818      	ldr	r0, [r3, #0]
 8001be0:	6811      	ldr	r1, [r2, #0]
 8001be2:	4408      	add	r0, r1
 8001be4:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
 8001be6:	2200      	movs	r2, #0
 8001be8:	601a      	str	r2, [r3, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 8001bea:	4a0a      	ldr	r2, [pc, #40]	; (8001c14 <sys_clock_isr+0x40>)
 8001bec:	6813      	ldr	r3, [r2, #0]
 8001bee:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8001bf2:	1ac0      	subs	r0, r0, r3
 8001bf4:	fbb0 f0f1 	udiv	r0, r0, r1
		announced_cycles += dticks * CYC_PER_TICK;
 8001bf8:	fb01 3300 	mla	r3, r1, r0, r3
 8001bfc:	6013      	str	r3, [r2, #0]
		sys_clock_announce(dticks);
 8001bfe:	f000 fd65 	bl	80026cc <sys_clock_announce>
}
 8001c02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 8001c06:	f7ff bc07 	b.w	8001418 <z_arm_exc_exit>
 8001c0a:	bf00      	nop
 8001c0c:	200002c8 	.word	0x200002c8
 8001c10:	200002d0 	.word	0x200002d0
 8001c14:	200002cc 	.word	0x200002cc

08001c18 <sys_clock_set_timeout>:
{
 8001c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c1c:	4e31      	ldr	r6, [pc, #196]	; (8001ce4 <sys_clock_set_timeout+0xcc>)
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
 8001c1e:	2900      	cmp	r1, #0
 8001c20:	d054      	beq.n	8001ccc <sys_clock_set_timeout+0xb4>
 8001c22:	1c42      	adds	r2, r0, #1
 8001c24:	d10a      	bne.n	8001c3c <sys_clock_set_timeout+0x24>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 8001c26:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8001c2a:	6913      	ldr	r3, [r2, #16]
 8001c2c:	f023 0301 	bic.w	r3, r3, #1
 8001c30:	6113      	str	r3, [r2, #16]
		last_load = TIMER_STOPPED;
 8001c32:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001c36:	6033      	str	r3, [r6, #0]
}
 8001c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint32_t last_load_ = last_load;
 8001c3c:	6835      	ldr	r5, [r6, #0]
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8001c3e:	2801      	cmp	r0, #1
 8001c40:	dd4a      	ble.n	8001cd8 <sys_clock_set_timeout+0xc0>
 8001c42:	f240 68d2 	movw	r8, #1746	; 0x6d2
 8001c46:	4540      	cmp	r0, r8
 8001c48:	dc01      	bgt.n	8001c4e <sys_clock_set_timeout+0x36>
 8001c4a:	f100 38ff 	add.w	r8, r0, #4294967295
	__asm__ volatile(
 8001c4e:	f04f 0310 	mov.w	r3, #16
 8001c52:	f3ef 8411 	mrs	r4, BASEPRI
 8001c56:	f383 8812 	msr	BASEPRI_MAX, r3
 8001c5a:	f3bf 8f6f 	isb	sy
	uint32_t pending = elapsed();
 8001c5e:	f7ff ff81 	bl	8001b64 <elapsed>
	cycle_count += pending;
 8001c62:	4f21      	ldr	r7, [pc, #132]	; (8001ce8 <sys_clock_set_timeout+0xd0>)
	val1 = SysTick->VAL;
 8001c64:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	overflow_cyc = 0U;
 8001c68:	2100      	movs	r1, #0
	val1 = SysTick->VAL;
 8001c6a:	f8d3 c018 	ldr.w	ip, [r3, #24]
	cycle_count += pending;
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	18c2      	adds	r2, r0, r3
	overflow_cyc = 0U;
 8001c72:	4b1e      	ldr	r3, [pc, #120]	; (8001cec <sys_clock_set_timeout+0xd4>)
 8001c74:	6019      	str	r1, [r3, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
 8001c76:	4b1e      	ldr	r3, [pc, #120]	; (8001cf0 <sys_clock_set_timeout+0xd8>)
 8001c78:	681b      	ldr	r3, [r3, #0]
	if ((int32_t)unannounced < 0) {
 8001c7a:	1ad1      	subs	r1, r2, r3
 8001c7c:	d42f      	bmi.n	8001cde <sys_clock_set_timeout+0xc6>
		delay = ticks * CYC_PER_TICK;
 8001c7e:	f44f 5016 	mov.w	r0, #9600	; 0x2580
		delay += unannounced;
 8001c82:	fb00 1108 	mla	r1, r0, r8, r1
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8001c86:	f501 5115 	add.w	r1, r1, #9536	; 0x2540
		delay -= unannounced;
 8001c8a:	1a9b      	subs	r3, r3, r2
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8001c8c:	313f      	adds	r1, #63	; 0x3f
 8001c8e:	fbb1 f1f0 	udiv	r1, r1, r0
		delay -= unannounced;
 8001c92:	fb00 3301 	mla	r3, r0, r1, r3
		delay = MAX(delay, MIN_DELAY);
 8001c96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c9a:	d920      	bls.n	8001cde <sys_clock_set_timeout+0xc6>
		if (delay > MAX_CYCLES) {
 8001c9c:	4915      	ldr	r1, [pc, #84]	; (8001cf4 <sys_clock_set_timeout+0xdc>)
 8001c9e:	428b      	cmp	r3, r1
 8001ca0:	bf28      	it	cs
 8001ca2:	460b      	movcs	r3, r1
	val2 = SysTick->VAL;
 8001ca4:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		last_load = MIN_DELAY;
 8001ca8:	6033      	str	r3, [r6, #0]
	val2 = SysTick->VAL;
 8001caa:	6988      	ldr	r0, [r1, #24]
	SysTick->LOAD = last_load - 1;
 8001cac:	3b01      	subs	r3, #1
 8001cae:	614b      	str	r3, [r1, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	618b      	str	r3, [r1, #24]
	if (val1 < val2) {
 8001cb4:	4584      	cmp	ip, r0
 8001cb6:	ebac 0300 	sub.w	r3, ip, r0
		cycle_count += (val1 + (last_load_ - val2));
 8001cba:	bf38      	it	cc
 8001cbc:	195b      	addcc	r3, r3, r5
		cycle_count += (val1 - val2);
 8001cbe:	441a      	add	r2, r3
 8001cc0:	603a      	str	r2, [r7, #0]
	__asm__ volatile(
 8001cc2:	f384 8811 	msr	BASEPRI, r4
 8001cc6:	f3bf 8f6f 	isb	sy
 8001cca:	e7b5      	b.n	8001c38 <sys_clock_set_timeout+0x20>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 8001ccc:	1c43      	adds	r3, r0, #1
	uint32_t last_load_ = last_load;
 8001cce:	6835      	ldr	r5, [r6, #0]
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 8001cd0:	d1b5      	bne.n	8001c3e <sys_clock_set_timeout+0x26>
 8001cd2:	f240 60d2 	movw	r0, #1746	; 0x6d2
 8001cd6:	e7b8      	b.n	8001c4a <sys_clock_set_timeout+0x32>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8001cd8:	f04f 0800 	mov.w	r8, #0
 8001cdc:	e7b7      	b.n	8001c4e <sys_clock_set_timeout+0x36>
 8001cde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ce2:	e7df      	b.n	8001ca4 <sys_clock_set_timeout+0x8c>
 8001ce4:	200002d4 	.word	0x200002d4
 8001ce8:	200002d0 	.word	0x200002d0
 8001cec:	200002c8 	.word	0x200002c8
 8001cf0:	200002cc 	.word	0x200002cc
 8001cf4:	00ffc300 	.word	0x00ffc300

08001cf8 <sys_clock_elapsed>:
{
 8001cf8:	b510      	push	{r4, lr}
	__asm__ volatile(
 8001cfa:	f04f 0310 	mov.w	r3, #16
 8001cfe:	f3ef 8411 	mrs	r4, BASEPRI
 8001d02:	f383 8812 	msr	BASEPRI_MAX, r3
 8001d06:	f3bf 8f6f 	isb	sy
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
 8001d0a:	f7ff ff2b 	bl	8001b64 <elapsed>
 8001d0e:	4b07      	ldr	r3, [pc, #28]	; (8001d2c <sys_clock_elapsed+0x34>)
 8001d10:	4a07      	ldr	r2, [pc, #28]	; (8001d30 <sys_clock_elapsed+0x38>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	6812      	ldr	r2, [r2, #0]
 8001d16:	1a9b      	subs	r3, r3, r2
 8001d18:	4403      	add	r3, r0
	__asm__ volatile(
 8001d1a:	f384 8811 	msr	BASEPRI, r4
 8001d1e:	f3bf 8f6f 	isb	sy
}
 8001d22:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8001d26:	fbb3 f0f0 	udiv	r0, r3, r0
 8001d2a:	bd10      	pop	{r4, pc}
 8001d2c:	200002d0 	.word	0x200002d0
 8001d30:	200002cc 	.word	0x200002cc

08001d34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d34:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d36:	4913      	ldr	r1, [pc, #76]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x50>)
 8001d38:	688b      	ldr	r3, [r1, #8]
 8001d3a:	f003 030c 	and.w	r3, r3, #12
 8001d3e:	2b04      	cmp	r3, #4
 8001d40:	d01c      	beq.n	8001d7c <HAL_RCC_GetSysClockFreq+0x48>
 8001d42:	2b08      	cmp	r3, #8
 8001d44:	d11c      	bne.n	8001d80 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d46:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d48:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d4a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d4c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d50:	bf14      	ite	ne
 8001d52:	480d      	ldrne	r0, [pc, #52]	; (8001d88 <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d54:	480d      	ldreq	r0, [pc, #52]	; (8001d8c <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d56:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001d5a:	bf18      	it	ne
 8001d5c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d5e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d62:	fba1 0100 	umull	r0, r1, r1, r0
 8001d66:	f7fe fa17 	bl	8000198 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d6a:	4b06      	ldr	r3, [pc, #24]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x50>)
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001d72:	3301      	adds	r3, #1
 8001d74:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001d76:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001d7a:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d7c:	4802      	ldr	r0, [pc, #8]	; (8001d88 <HAL_RCC_GetSysClockFreq+0x54>)
 8001d7e:	e7fc      	b.n	8001d7a <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 8001d80:	4802      	ldr	r0, [pc, #8]	; (8001d8c <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8001d82:	e7fa      	b.n	8001d7a <HAL_RCC_GetSysClockFreq+0x46>
 8001d84:	40023800 	.word	0x40023800
 8001d88:	007a1200 	.word	0x007a1200
 8001d8c:	00f42400 	.word	0x00f42400

08001d90 <LL_SetFlashLatency>:
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
  ErrorStatus status = SUCCESS;


  /* Frequency cannot be equal to 0 */
  if(HCLK_Frequency == 0U)
 8001d90:	2800      	cmp	r0, #0
 8001d92:	d076      	beq.n	8001e82 <LL_SetFlashLatency+0xf2>
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  */
__STATIC_INLINE uint32_t LL_PWR_GetRegulVoltageScaling(void)
{
  return (uint32_t)(READ_BIT(PWR->CR, PWR_CR_VOS));
 8001d94:	4b3c      	ldr	r3, [pc, #240]	; (8001e88 <LL_SetFlashLatency+0xf8>)
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
  {
    status = ERROR;
  }
  else
  {
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
 8001d9c:	f5b2 4f40 	cmp.w	r2, #49152	; 0xc000
 8001da0:	d120      	bne.n	8001de4 <LL_SetFlashLatency+0x54>
      {
        latency = LL_FLASH_LATENCY_4;
      }
#endif /* UTILS_SCALE1_LATENCY4_FREQ */
#if defined (UTILS_SCALE1_LATENCY3_FREQ)
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY3_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001da2:	4a3a      	ldr	r2, [pc, #232]	; (8001e8c <LL_SetFlashLatency+0xfc>)
 8001da4:	4290      	cmp	r0, r2
 8001da6:	d815      	bhi.n	8001dd4 <LL_SetFlashLatency+0x44>
      {
        latency = LL_FLASH_LATENCY_3;
      }
#endif /* UTILS_SCALE1_LATENCY3_FREQ */
#if defined (UTILS_SCALE1_LATENCY2_FREQ)
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001da8:	4a39      	ldr	r2, [pc, #228]	; (8001e90 <LL_SetFlashLatency+0x100>)
 8001daa:	4290      	cmp	r0, r2
 8001dac:	d907      	bls.n	8001dbe <LL_SetFlashLatency+0x2e>
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
          latency = LL_FLASH_LATENCY_1;
        }
      }
#endif /* UTILS_SCALE1_LATENCY2_FREQ */
    }
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE2)
 8001db4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001db8:	d15c      	bne.n	8001e74 <LL_SetFlashLatency+0xe4>
 8001dba:	2002      	movs	r0, #2
 8001dbc:	e01f      	b.n	8001dfe <LL_SetFlashLatency+0x6e>
        if((HCLK_Frequency > UTILS_SCALE1_LATENCY1_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001dbe:	4a35      	ldr	r2, [pc, #212]	; (8001e94 <LL_SetFlashLatency+0x104>)
 8001dc0:	4290      	cmp	r0, r2
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8001dc8:	d947      	bls.n	8001e5a <LL_SetFlashLatency+0xca>
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE2)
 8001dca:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001dce:	d14c      	bne.n	8001e6a <LL_SetFlashLatency+0xda>
          latency = LL_FLASH_LATENCY_1;
 8001dd0:	2001      	movs	r0, #1
 8001dd2:	e014      	b.n	8001dfe <LL_SetFlashLatency+0x6e>
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE2)
 8001dda:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001dde:	d13f      	bne.n	8001e60 <LL_SetFlashLatency+0xd0>
 8001de0:	2003      	movs	r0, #3
 8001de2:	e00c      	b.n	8001dfe <LL_SetFlashLatency+0x6e>
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8001dea:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001dee:	d122      	bne.n	8001e36 <LL_SetFlashLatency+0xa6>
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY3_FREQ)&&(latency == LL_FLASH_LATENCY_0))
      {
        latency = LL_FLASH_LATENCY_3;
      }
#endif /*UTILS_SCALE1_LATENCY3_FREQ */
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001df0:	4a27      	ldr	r2, [pc, #156]	; (8001e90 <LL_SetFlashLatency+0x100>)
 8001df2:	4290      	cmp	r0, r2
 8001df4:	d83e      	bhi.n	8001e74 <LL_SetFlashLatency+0xe4>
      {
        latency = LL_FLASH_LATENCY_2;
      }
      else
      {
        if((HCLK_Frequency > UTILS_SCALE2_LATENCY1_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001df6:	4a27      	ldr	r2, [pc, #156]	; (8001e94 <LL_SetFlashLatency+0x104>)
 8001df8:	4290      	cmp	r0, r2
 8001dfa:	d92e      	bls.n	8001e5a <LL_SetFlashLatency+0xca>
 8001dfc:	2000      	movs	r0, #0
 8001dfe:	4b22      	ldr	r3, [pc, #136]	; (8001e88 <LL_SetFlashLatency+0xf8>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2801      	cmp	r0, #1
 8001e04:	bf38      	it	cc
 8001e06:	2001      	movcc	r0, #1
 8001e08:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
          latency = LL_FLASH_LATENCY_1;
        }
      }
    }
#if defined (LL_PWR_REGU_VOLTAGE_SCALE3)
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE3)
 8001e0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e10:	d01f      	beq.n	8001e52 <LL_SetFlashLatency+0xc2>
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001e12:	4a21      	ldr	r2, [pc, #132]	; (8001e98 <LL_SetFlashLatency+0x108>)
 8001e14:	6813      	ldr	r3, [r2, #0]
 8001e16:	f023 0307 	bic.w	r3, r3, #7
 8001e1a:	4303      	orrs	r3, r0
 8001e1c:	6013      	str	r3, [r2, #0]
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001e1e:	6813      	ldr	r3, [r2, #0]
 8001e20:	f003 0307 	and.w	r3, r3, #7
    do
    {
    /* Wait for Flash latency to be updated */
    getlatency = LL_FLASH_GetLatency();
    timeout--;
    } while ((getlatency != latency) && (timeout > 0));
 8001e24:	4298      	cmp	r0, r3
 8001e26:	bf1c      	itt	ne
 8001e28:	6813      	ldrne	r3, [r2, #0]
 8001e2a:	f003 0307 	andne.w	r3, r3, #7

    if(getlatency != latency)
 8001e2e:	1ac0      	subs	r0, r0, r3
 8001e30:	bf18      	it	ne
 8001e32:	2001      	movne	r0, #1
 8001e34:	4770      	bx	lr
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE3)
 8001e3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e40:	d10c      	bne.n	8001e5c <LL_SetFlashLatency+0xcc>
      if((HCLK_Frequency > UTILS_SCALE3_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001e42:	4b13      	ldr	r3, [pc, #76]	; (8001e90 <LL_SetFlashLatency+0x100>)
 8001e44:	4298      	cmp	r0, r3
 8001e46:	d81a      	bhi.n	8001e7e <LL_SetFlashLatency+0xee>
        if((HCLK_Frequency > UTILS_SCALE3_LATENCY1_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001e48:	4b12      	ldr	r3, [pc, #72]	; (8001e94 <LL_SetFlashLatency+0x104>)
 8001e4a:	4298      	cmp	r0, r3
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 8001e4c:	f04f 0000 	mov.w	r0, #0
        if((HCLK_Frequency > UTILS_SCALE3_LATENCY1_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001e50:	d9df      	bls.n	8001e12 <LL_SetFlashLatency+0x82>
 8001e52:	2801      	cmp	r0, #1
 8001e54:	bf38      	it	cc
 8001e56:	2001      	movcc	r0, #1
 8001e58:	e7db      	b.n	8001e12 <LL_SetFlashLatency+0x82>
 8001e5a:	681b      	ldr	r3, [r3, #0]
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 8001e5c:	2000      	movs	r0, #0
 8001e5e:	e7d8      	b.n	8001e12 <LL_SetFlashLatency+0x82>
 8001e60:	681b      	ldr	r3, [r3, #0]
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE3)
 8001e62:	2003      	movs	r0, #3
 8001e64:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e68:	e7d0      	b.n	8001e0c <LL_SetFlashLatency+0x7c>
 8001e6a:	681b      	ldr	r3, [r3, #0]
          latency = LL_FLASH_LATENCY_1;
 8001e6c:	2001      	movs	r0, #1
 8001e6e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e72:	e7cb      	b.n	8001e0c <LL_SetFlashLatency+0x7c>
 8001e74:	681b      	ldr	r3, [r3, #0]
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE3)
 8001e76:	2002      	movs	r0, #2
 8001e78:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e7c:	e7c6      	b.n	8001e0c <LL_SetFlashLatency+0x7c>
      if((HCLK_Frequency > UTILS_SCALE3_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001e7e:	2002      	movs	r0, #2
 8001e80:	e7c7      	b.n	8001e12 <LL_SetFlashLatency+0x82>
    status = ERROR;
 8001e82:	2001      	movs	r0, #1
    {
      status = SUCCESS;
    }
  }
  return status;
}
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	40007000 	.word	0x40007000
 8001e8c:	055d4a80 	.word	0x055d4a80
 8001e90:	03d09000 	.word	0x03d09000
 8001e94:	01c9c380 	.word	0x01c9c380
 8001e98:	40023c00 	.word	0x40023c00

08001e9c <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8001e9c:	4b0f      	ldr	r3, [pc, #60]	; (8001edc <z_sys_init_run_level+0x40>)
{
 8001e9e:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8001ea0:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8001ea4:	3001      	adds	r0, #1
 8001ea6:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8001eaa:	42a6      	cmp	r6, r4
 8001eac:	d800      	bhi.n	8001eb0 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
 8001eae:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
 8001eb0:	e9d4 3500 	ldrd	r3, r5, [r4]
 8001eb4:	4628      	mov	r0, r5
 8001eb6:	4798      	blx	r3
		if (dev != NULL) {
 8001eb8:	b16d      	cbz	r5, 8001ed6 <z_sys_init_run_level+0x3a>
			if (rc != 0) {
 8001eba:	b138      	cbz	r0, 8001ecc <z_sys_init_run_level+0x30>
				if (rc < 0) {
 8001ebc:	2800      	cmp	r0, #0
 8001ebe:	bfb8      	it	lt
 8001ec0:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
 8001ec2:	68eb      	ldr	r3, [r5, #12]
				if (rc > UINT8_MAX) {
 8001ec4:	28ff      	cmp	r0, #255	; 0xff
 8001ec6:	bfa8      	it	ge
 8001ec8:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
 8001eca:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
 8001ecc:	68ea      	ldr	r2, [r5, #12]
 8001ece:	7853      	ldrb	r3, [r2, #1]
 8001ed0:	f043 0301 	orr.w	r3, r3, #1
 8001ed4:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8001ed6:	3408      	adds	r4, #8
 8001ed8:	e7e7      	b.n	8001eaa <z_sys_init_run_level+0xe>
 8001eda:	bf00      	nop
 8001edc:	080033a4 	.word	0x080033a4

08001ee0 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
 8001ee0:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
 8001ee2:	4b0a      	ldr	r3, [pc, #40]	; (8001f0c <bg_thread_main+0x2c>)
 8001ee4:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
 8001ee6:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
 8001ee8:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
 8001eea:	f7ff ffd7 	bl	8001e9c <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
 8001eee:	f000 fc57 	bl	80027a0 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
 8001ef2:	2004      	movs	r0, #4
 8001ef4:	f7ff ffd2 	bl	8001e9c <z_sys_init_run_level>

	z_init_static_threads();
 8001ef8:	f000 f8dc 	bl	80020b4 <z_init_static_threads>
	extern int main(void);
#else
	extern void main(void);
#endif

	(void)main();
 8001efc:	f7ff f924 	bl	8001148 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
 8001f00:	4a03      	ldr	r2, [pc, #12]	; (8001f10 <bg_thread_main+0x30>)
 8001f02:	7b13      	ldrb	r3, [r2, #12]
 8001f04:	f023 0301 	bic.w	r3, r3, #1
 8001f08:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 8001f0a:	bd08      	pop	{r3, pc}
 8001f0c:	20000314 	.word	0x20000314
 8001f10:	20000108 	.word	0x20000108

08001f14 <z_bss_zero>:
{
 8001f14:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
 8001f16:	4803      	ldr	r0, [pc, #12]	; (8001f24 <z_bss_zero+0x10>)
 8001f18:	4a03      	ldr	r2, [pc, #12]	; (8001f28 <z_bss_zero+0x14>)
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	1a12      	subs	r2, r2, r0
 8001f1e:	f000 feff 	bl	8002d20 <z_early_memset>
}
 8001f22:	bd08      	pop	{r3, pc}
 8001f24:	20000050 	.word	0x20000050
 8001f28:	20000318 	.word	0x20000318

08001f2c <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
 8001f2c:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
 8001f2e:	4e14      	ldr	r6, [pc, #80]	; (8001f80 <z_init_cpu+0x54>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 8001f30:	4d14      	ldr	r5, [pc, #80]	; (8001f84 <z_init_cpu+0x58>)
	z_setup_new_thread(thread, stack,
 8001f32:	4915      	ldr	r1, [pc, #84]	; (8001f88 <z_init_cpu+0x5c>)
	struct k_thread *thread = &z_idle_threads[i];
 8001f34:	23b8      	movs	r3, #184	; 0xb8
{
 8001f36:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
 8001f38:	fb03 6600 	mla	r6, r3, r0, r6
	z_setup_new_thread(thread, stack,
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	2300      	movs	r3, #0
 8001f40:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001f44:	220f      	movs	r2, #15
 8001f46:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8001f4a:	9301      	str	r3, [sp, #4]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 8001f4c:	231c      	movs	r3, #28
 8001f4e:	fb03 5500 	mla	r5, r3, r0, r5
	z_setup_new_thread(thread, stack,
 8001f52:	f44f 72a0 	mov.w	r2, #320	; 0x140
{
 8001f56:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
 8001f58:	fb02 1100 	mla	r1, r2, r0, r1
 8001f5c:	4b0b      	ldr	r3, [pc, #44]	; (8001f8c <z_init_cpu+0x60>)
 8001f5e:	9500      	str	r5, [sp, #0]
 8001f60:	4630      	mov	r0, r6
 8001f62:	f000 f87d 	bl	8002060 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8001f66:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
 8001f68:	752c      	strb	r4, [r5, #20]
 8001f6a:	f023 0304 	bic.w	r3, r3, #4
 8001f6e:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
 8001f70:	4b07      	ldr	r3, [pc, #28]	; (8001f90 <z_init_cpu+0x64>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
 8001f72:	60ee      	str	r6, [r5, #12]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
 8001f74:	3401      	adds	r4, #1
 8001f76:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
	_kernel.cpus[id].irq_stack =
 8001f7a:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
 8001f7c:	b006      	add	sp, #24
 8001f7e:	bd70      	pop	{r4, r5, r6, pc}
 8001f80:	20000050 	.word	0x20000050
 8001f84:	200002d8 	.word	0x200002d8
 8001f88:	20000b18 	.word	0x20000b18
 8001f8c:	08002d29 	.word	0x08002d29
 8001f90:	20000318 	.word	0x20000318

08001f94 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
 8001f94:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
 8001f96:	2000      	movs	r0, #0
{
 8001f98:	b0b4      	sub	sp, #208	; 0xd0
	z_sys_init_run_level(INIT_LEVEL_EARLY);
 8001f9a:	f7ff ff7f 	bl	8001e9c <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
 8001f9e:	4b29      	ldr	r3, [pc, #164]	; (8002044 <z_cstart+0xb0>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8001fa0:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
 8001fa4:	4c28      	ldr	r4, [pc, #160]	; (8002048 <z_cstart+0xb4>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
 8001fa6:	4e29      	ldr	r6, [pc, #164]	; (800204c <z_cstart+0xb8>)
 8001fa8:	6963      	ldr	r3, [r4, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8001faa:	4f29      	ldr	r7, [pc, #164]	; (8002050 <z_cstart+0xbc>)
 8001fac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fb0:	6163      	str	r3, [r4, #20]
 8001fb2:	2500      	movs	r5, #0
 8001fb4:	23f0      	movs	r3, #240	; 0xf0
 8001fb6:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 8001fba:	77e5      	strb	r5, [r4, #31]
 8001fbc:	7625      	strb	r5, [r4, #24]
 8001fbe:	7665      	strb	r5, [r4, #25]
 8001fc0:	76a5      	strb	r5, [r4, #26]
 8001fc2:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 8001fc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001fc8:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8001fcc:	6263      	str	r3, [r4, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
 8001fce:	f7ff fb59 	bl	8001684 <z_arm_fault_init>
	z_arm_cpu_idle_init();
 8001fd2:	f7ff f8f7 	bl	80011c4 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 8001fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8001fda:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 8001fdc:	62e3      	str	r3, [r4, #44]	; 0x2c
	dummy_thread->base.user_options = K_ESSENTIAL;
 8001fde:	f240 1301 	movw	r3, #257	; 0x101
 8001fe2:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
 8001fe6:	ab06      	add	r3, sp, #24
 8001fe8:	60b3      	str	r3, [r6, #8]
	dummy_thread->resource_pool = NULL;
 8001fea:	951f      	str	r5, [sp, #124]	; 0x7c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
 8001fec:	f000 fe65 	bl	8002cba <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
 8001ff0:	2001      	movs	r0, #1
 8001ff2:	f7ff ff53 	bl	8001e9c <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
 8001ff6:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
 8001ff8:	4c16      	ldr	r4, [pc, #88]	; (8002054 <z_cstart+0xc0>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
 8001ffa:	f7ff ff4f 	bl	8001e9c <z_sys_init_run_level>
	z_sched_init();
 8001ffe:	f000 fa0d 	bl	800241c <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8002002:	4b15      	ldr	r3, [pc, #84]	; (8002058 <z_cstart+0xc4>)
	_kernel.ready_q.cache = &z_main_thread;
 8002004:	61f4      	str	r4, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8002006:	9305      	str	r3, [sp, #20]
 8002008:	2301      	movs	r3, #1
 800200a:	4914      	ldr	r1, [pc, #80]	; (800205c <z_cstart+0xc8>)
 800200c:	9500      	str	r5, [sp, #0]
 800200e:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8002012:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002016:	463b      	mov	r3, r7
 8002018:	e9cd 5501 	strd	r5, r5, [sp, #4]
 800201c:	4620      	mov	r0, r4
 800201e:	f000 f81f 	bl	8002060 <z_setup_new_thread>
 8002022:	7b62      	ldrb	r2, [r4, #13]
 8002024:	4606      	mov	r6, r0
 8002026:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
 800202a:	4620      	mov	r0, r4
 800202c:	7362      	strb	r2, [r4, #13]
 800202e:	f000 febb 	bl	8002da8 <z_ready_thread>
	z_init_cpu(0);
 8002032:	4628      	mov	r0, r5
 8002034:	f7ff ff7a 	bl	8001f2c <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 8002038:	463a      	mov	r2, r7
 800203a:	4631      	mov	r1, r6
 800203c:	4620      	mov	r0, r4
 800203e:	f7ff f9b9 	bl	80013b4 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 8002042:	bf00      	nop
 8002044:	20000b18 	.word	0x20000b18
 8002048:	e000ed00 	.word	0xe000ed00
 800204c:	200002d8 	.word	0x200002d8
 8002050:	08001ee1 	.word	0x08001ee1
 8002054:	20000108 	.word	0x20000108
 8002058:	080034ad 	.word	0x080034ad
 800205c:	20000c58 	.word	0x20000c58

08002060 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
 8002060:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
 8002062:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8002064:	7306      	strb	r6, [r0, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 8002066:	3207      	adds	r2, #7
	thread_base->thread_state = (uint8_t)initial_state;
 8002068:	2604      	movs	r6, #4
 800206a:	7346      	strb	r6, [r0, #13]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
 800206c:	f100 0558 	add.w	r5, r0, #88	; 0x58

	thread_base->prio = priority;
 8002070:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8002072:	7386      	strb	r6, [r0, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 8002074:	f022 0207 	bic.w	r2, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
 8002078:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	stack_ptr = (char *)stack + stack_obj_size;
 800207c:	188e      	adds	r6, r1, r2
	thread_base->pended_on = NULL;
 800207e:	2500      	movs	r5, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8002080:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	thread_base->pended_on = NULL;
 8002082:	6085      	str	r5, [r0, #8]
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
 8002084:	e9c0 5506 	strd	r5, r5, [r0, #24]

	thread_base->sched_locked = 0U;
 8002088:	73c5      	strb	r5, [r0, #15]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 800208a:	9202      	str	r2, [sp, #8]
 800208c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800208e:	9201      	str	r2, [sp, #4]
 8002090:	9a08      	ldr	r2, [sp, #32]
 8002092:	9200      	str	r2, [sp, #0]
 8002094:	4632      	mov	r2, r6
{
 8002096:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8002098:	f7ff f96c 	bl	8001374 <arch_new_thread>
	if (!_current) {
 800209c:	4b04      	ldr	r3, [pc, #16]	; (80020b0 <z_setup_new_thread+0x50>)
	new_thread->init_data = NULL;
 800209e:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	b103      	cbz	r3, 80020a6 <z_setup_new_thread+0x46>
	new_thread->resource_pool = _current->resource_pool;
 80020a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
	return stack_ptr;
 80020a6:	6663      	str	r3, [r4, #100]	; 0x64
}
 80020a8:	4630      	mov	r0, r6
 80020aa:	b004      	add	sp, #16
 80020ac:	bd70      	pop	{r4, r5, r6, pc}
 80020ae:	bf00      	nop
 80020b0:	200002d8 	.word	0x200002d8

080020b4 <z_init_static_threads>:
{
 80020b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020b6:	4c22      	ldr	r4, [pc, #136]	; (8002140 <z_init_static_threads+0x8c>)
	_FOREACH_STATIC_THREAD(thread_data) {
 80020b8:	4d22      	ldr	r5, [pc, #136]	; (8002144 <z_init_static_threads+0x90>)
{
 80020ba:	b087      	sub	sp, #28
 80020bc:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
 80020be:	42ae      	cmp	r6, r5
 80020c0:	f104 042c 	add.w	r4, r4, #44	; 0x2c
 80020c4:	d30b      	bcc.n	80020de <z_init_static_threads+0x2a>
	k_sched_lock();
 80020c6:	f000 f979 	bl	80023bc <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
 80020ca:	4c1d      	ldr	r4, [pc, #116]	; (8002140 <z_init_static_threads+0x8c>)

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 80020cc:	4f1e      	ldr	r7, [pc, #120]	; (8002148 <z_init_static_threads+0x94>)
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * ((uint64_t)to_hz / from_hz);
 80020ce:	260a      	movs	r6, #10
 80020d0:	42ac      	cmp	r4, r5
 80020d2:	d320      	bcc.n	8002116 <z_init_static_threads+0x62>
}
 80020d4:	b007      	add	sp, #28
 80020d6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
 80020da:	f000 b983 	b.w	80023e4 <k_sched_unlock>
		z_setup_new_thread(
 80020de:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80020e2:	9305      	str	r3, [sp, #20]
 80020e4:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 80020e8:	9304      	str	r3, [sp, #16]
 80020ea:	f854 3c10 	ldr.w	r3, [r4, #-16]
 80020ee:	9303      	str	r3, [sp, #12]
 80020f0:	f854 3c14 	ldr.w	r3, [r4, #-20]
 80020f4:	9302      	str	r3, [sp, #8]
 80020f6:	f854 3c18 	ldr.w	r3, [r4, #-24]
 80020fa:	9301      	str	r3, [sp, #4]
 80020fc:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 8002100:	9300      	str	r3, [sp, #0]
 8002102:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
 8002106:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
 800210a:	f7ff ffa9 	bl	8002060 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
 800210e:	f854 3c2c 	ldr.w	r3, [r4, #-44]
 8002112:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
 8002114:	e7d2      	b.n	80020bc <z_init_static_threads+0x8>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
 8002116:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002118:	1c53      	adds	r3, r2, #1
 800211a:	d009      	beq.n	8002130 <z_init_static_threads+0x7c>
					    K_MSEC(thread_data->init_delay));
 800211c:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8002120:	fb82 2306 	smull	r2, r3, r2, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 8002124:	ea52 0103 	orrs.w	r1, r2, r3
			schedule_new_thread(thread_data->init_thread,
 8002128:	6820      	ldr	r0, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 800212a:	d103      	bne.n	8002134 <z_init_static_threads+0x80>
	z_sched_start(thread);
 800212c:	f000 f928 	bl	8002380 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
 8002130:	342c      	adds	r4, #44	; 0x2c
 8002132:	e7cd      	b.n	80020d0 <z_init_static_threads+0x1c>
 8002134:	4639      	mov	r1, r7
 8002136:	3018      	adds	r0, #24
 8002138:	f000 fa4a 	bl	80025d0 <z_add_timeout>
 800213c:	e7f8      	b.n	8002130 <z_init_static_threads+0x7c>
 800213e:	bf00      	nop
 8002140:	08003268 	.word	0x08003268
 8002144:	08003268 	.word	0x08003268
 8002148:	08002d65 	.word	0x08002d65

0800214c <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
 800214c:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
 800214e:	4d07      	ldr	r5, [pc, #28]	; (800216c <z_reset_time_slice+0x20>)
 8002150:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
 8002152:	b154      	cbz	r4, 800216a <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
 8002154:	f7ff fdd0 	bl	8001cf8 <sys_clock_elapsed>
 8002158:	4b05      	ldr	r3, [pc, #20]	; (8002170 <z_reset_time_slice+0x24>)
 800215a:	4404      	add	r4, r0
 800215c:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
 800215e:	6828      	ldr	r0, [r5, #0]
 8002160:	2100      	movs	r1, #0
	}
}
 8002162:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
 8002166:	f000 be5b 	b.w	8002e20 <z_set_timeout_expiry>
}
 800216a:	bd38      	pop	{r3, r4, r5, pc}
 800216c:	2000030c 	.word	0x2000030c
 8002170:	200002d8 	.word	0x200002d8

08002174 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
 8002174:	b538      	push	{r3, r4, r5, lr}
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
 8002176:	4d0d      	ldr	r5, [pc, #52]	; (80021ac <update_cache+0x38>)
 8002178:	462b      	mov	r3, r5
 800217a:	f853 4f20 	ldr.w	r4, [r3, #32]!
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800217e:	429c      	cmp	r4, r3
 8002180:	d000      	beq.n	8002184 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 8002182:	b904      	cbnz	r4, 8002186 <update_cache+0x12>
 8002184:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
 8002186:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
 8002188:	b938      	cbnz	r0, 800219a <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
 800218a:	7b5a      	ldrb	r2, [r3, #13]
 800218c:	06d2      	lsls	r2, r2, #27
 800218e:	d104      	bne.n	800219a <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 8002190:	69a2      	ldr	r2, [r4, #24]
 8002192:	b912      	cbnz	r2, 800219a <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
 8002194:	89da      	ldrh	r2, [r3, #14]
 8002196:	2a7f      	cmp	r2, #127	; 0x7f
 8002198:	d805      	bhi.n	80021a6 <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
 800219a:	429c      	cmp	r4, r3
 800219c:	d002      	beq.n	80021a4 <update_cache+0x30>
			z_reset_time_slice(thread);
 800219e:	4620      	mov	r0, r4
 80021a0:	f7ff ffd4 	bl	800214c <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
 80021a4:	4623      	mov	r3, r4
 80021a6:	61eb      	str	r3, [r5, #28]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
 80021a8:	bd38      	pop	{r3, r4, r5, pc}
 80021aa:	bf00      	nop
 80021ac:	200002d8 	.word	0x200002d8

080021b0 <move_thread_to_end_of_prio_q>:
{
 80021b0:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
 80021b2:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
 80021b6:	7b43      	ldrb	r3, [r0, #13]
 80021b8:	2a00      	cmp	r2, #0
{
 80021ba:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
 80021bc:	da04      	bge.n	80021c8 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 80021be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021c2:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
 80021c4:	f000 fdbc 	bl	8002d40 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
 80021c8:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
 80021ca:	4a15      	ldr	r2, [pc, #84]	; (8002220 <move_thread_to_end_of_prio_q+0x70>)
 80021cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80021d0:	4610      	mov	r0, r2
 80021d2:	734b      	strb	r3, [r1, #13]
 80021d4:	f850 3f20 	ldr.w	r3, [r0, #32]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
 80021d8:	6a54      	ldr	r4, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80021da:	4283      	cmp	r3, r0
 80021dc:	bf08      	it	eq
 80021de:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80021e0:	b923      	cbnz	r3, 80021ec <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
 80021e2:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
 80021e6:	6021      	str	r1, [r4, #0]
	list->tail = node;
 80021e8:	6251      	str	r1, [r2, #36]	; 0x24
}
 80021ea:	e00c      	b.n	8002206 <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
 80021ec:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
 80021f0:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
 80021f4:	42b5      	cmp	r5, r6
 80021f6:	d00e      	beq.n	8002216 <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
 80021f8:	42ae      	cmp	r6, r5
 80021fa:	dd0c      	ble.n	8002216 <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
 80021fc:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
 80021fe:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
 8002202:	6001      	str	r1, [r0, #0]
	successor->prev = node;
 8002204:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
 8002206:	6890      	ldr	r0, [r2, #8]
 8002208:	1a43      	subs	r3, r0, r1
 800220a:	4258      	negs	r0, r3
}
 800220c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
 8002210:	4158      	adcs	r0, r3
 8002212:	f7ff bfaf 	b.w	8002174 <update_cache>
	return (node == list->tail) ? NULL : node->next;
 8002216:	429c      	cmp	r4, r3
 8002218:	d0e3      	beq.n	80021e2 <move_thread_to_end_of_prio_q+0x32>
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	e7e0      	b.n	80021e0 <move_thread_to_end_of_prio_q+0x30>
 800221e:	bf00      	nop
 8002220:	200002d8 	.word	0x200002d8

08002224 <ready_thread>:
{
 8002224:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
 8002226:	f990 300d 	ldrsb.w	r3, [r0, #13]
 800222a:	7b42      	ldrb	r2, [r0, #13]
 800222c:	2b00      	cmp	r3, #0
 800222e:	db29      	blt.n	8002284 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 8002230:	06d3      	lsls	r3, r2, #27
 8002232:	d127      	bne.n	8002284 <ready_thread+0x60>
	return node->next != NULL;
 8002234:	6983      	ldr	r3, [r0, #24]
 8002236:	bb2b      	cbnz	r3, 8002284 <ready_thread+0x60>
	return list->head == list;
 8002238:	4913      	ldr	r1, [pc, #76]	; (8002288 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
 800223a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800223e:	7342      	strb	r2, [r0, #13]
 8002240:	460a      	mov	r2, r1
 8002242:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8002246:	4294      	cmp	r4, r2
 8002248:	bf18      	it	ne
 800224a:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
 800224c:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800224e:	b923      	cbnz	r3, 800225a <ready_thread+0x36>
	node->prev = tail;
 8002250:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
 8002254:	6020      	str	r0, [r4, #0]
	list->tail = node;
 8002256:	6248      	str	r0, [r1, #36]	; 0x24
}
 8002258:	e00c      	b.n	8002274 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
 800225a:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
 800225e:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
 8002262:	42b5      	cmp	r5, r6
 8002264:	d00a      	beq.n	800227c <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
 8002266:	42ae      	cmp	r6, r5
 8002268:	dd08      	ble.n	800227c <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
 800226a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 800226c:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
 8002270:	6010      	str	r0, [r2, #0]
	successor->prev = node;
 8002272:	6058      	str	r0, [r3, #4]
}
 8002274:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
 8002276:	2000      	movs	r0, #0
 8002278:	f7ff bf7c 	b.w	8002174 <update_cache>
	return (node == list->tail) ? NULL : node->next;
 800227c:	42a3      	cmp	r3, r4
 800227e:	d0e7      	beq.n	8002250 <ready_thread+0x2c>
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	e7e4      	b.n	800224e <ready_thread+0x2a>
}
 8002284:	bc70      	pop	{r4, r5, r6}
 8002286:	4770      	bx	lr
 8002288:	200002d8 	.word	0x200002d8

0800228c <k_sched_time_slice_set>:
{
 800228c:	b510      	push	{r4, lr}
	__asm__ volatile(
 800228e:	f04f 0310 	mov.w	r3, #16
 8002292:	f3ef 8411 	mrs	r4, BASEPRI
 8002296:	f383 8812 	msr	BASEPRI_MAX, r3
 800229a:	f3bf 8f6f 	isb	sy
			return ((uint32_t)t) * (to_hz / from_hz);
 800229e:	230a      	movs	r3, #10
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
 80022a0:	2800      	cmp	r0, #0
 80022a2:	fb00 f303 	mul.w	r3, r0, r3
 80022a6:	dd02      	ble.n	80022ae <k_sched_time_slice_set+0x22>
			slice_ticks = MAX(2, slice_ticks);
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	bfb8      	it	lt
 80022ac:	2302      	movlt	r3, #2
		_current_cpu->slice_ticks = 0;
 80022ae:	4a07      	ldr	r2, [pc, #28]	; (80022cc <k_sched_time_slice_set+0x40>)
 80022b0:	2000      	movs	r0, #0
 80022b2:	6110      	str	r0, [r2, #16]
		slice_ticks = k_ms_to_ticks_ceil32(slice);
 80022b4:	4806      	ldr	r0, [pc, #24]	; (80022d0 <k_sched_time_slice_set+0x44>)
 80022b6:	6003      	str	r3, [r0, #0]
		slice_max_prio = prio;
 80022b8:	4b06      	ldr	r3, [pc, #24]	; (80022d4 <k_sched_time_slice_set+0x48>)
		z_reset_time_slice(_current);
 80022ba:	6890      	ldr	r0, [r2, #8]
		slice_max_prio = prio;
 80022bc:	6019      	str	r1, [r3, #0]
		z_reset_time_slice(_current);
 80022be:	f7ff ff45 	bl	800214c <z_reset_time_slice>
	__asm__ volatile(
 80022c2:	f384 8811 	msr	BASEPRI, r4
 80022c6:	f3bf 8f6f 	isb	sy
}
 80022ca:	bd10      	pop	{r4, pc}
 80022cc:	200002d8 	.word	0x200002d8
 80022d0:	2000030c 	.word	0x2000030c
 80022d4:	20000308 	.word	0x20000308

080022d8 <z_time_slice>:
{
 80022d8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 80022da:	f04f 0310 	mov.w	r3, #16
 80022de:	f3ef 8511 	mrs	r5, BASEPRI
 80022e2:	f383 8812 	msr	BASEPRI_MAX, r3
 80022e6:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
 80022ea:	4b17      	ldr	r3, [pc, #92]	; (8002348 <z_time_slice+0x70>)
 80022ec:	4a17      	ldr	r2, [pc, #92]	; (800234c <z_time_slice+0x74>)
 80022ee:	689c      	ldr	r4, [r3, #8]
 80022f0:	6811      	ldr	r1, [r2, #0]
 80022f2:	428c      	cmp	r4, r1
 80022f4:	d107      	bne.n	8002306 <z_time_slice+0x2e>
	z_reset_time_slice(curr);
 80022f6:	4620      	mov	r0, r4
 80022f8:	f7ff ff28 	bl	800214c <z_reset_time_slice>
	__asm__ volatile(
 80022fc:	f385 8811 	msr	BASEPRI, r5
 8002300:	f3bf 8f6f 	isb	sy
}
 8002304:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
 8002306:	2100      	movs	r1, #0
 8002308:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
 800230a:	4a11      	ldr	r2, [pc, #68]	; (8002350 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
 800230c:	6812      	ldr	r2, [r2, #0]
 800230e:	b1c2      	cbz	r2, 8002342 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
 8002310:	89e2      	ldrh	r2, [r4, #14]
 8002312:	2a7f      	cmp	r2, #127	; 0x7f
 8002314:	d815      	bhi.n	8002342 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
 8002316:	7b62      	ldrb	r2, [r4, #13]
 8002318:	06d2      	lsls	r2, r2, #27
 800231a:	d112      	bne.n	8002342 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
 800231c:	4a0d      	ldr	r2, [pc, #52]	; (8002354 <z_time_slice+0x7c>)
 800231e:	f994 100e 	ldrsb.w	r1, [r4, #14]
 8002322:	6812      	ldr	r2, [r2, #0]
 8002324:	4291      	cmp	r1, r2
 8002326:	db0c      	blt.n	8002342 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
 8002328:	4a0b      	ldr	r2, [pc, #44]	; (8002358 <z_time_slice+0x80>)
 800232a:	4294      	cmp	r4, r2
 800232c:	d009      	beq.n	8002342 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
 800232e:	691a      	ldr	r2, [r3, #16]
 8002330:	4282      	cmp	r2, r0
 8002332:	dc03      	bgt.n	800233c <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
 8002334:	4620      	mov	r0, r4
 8002336:	f7ff ff3b 	bl	80021b0 <move_thread_to_end_of_prio_q>
 800233a:	e7dc      	b.n	80022f6 <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
 800233c:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
 800233e:	611a      	str	r2, [r3, #16]
 8002340:	e7dc      	b.n	80022fc <z_time_slice+0x24>
 8002342:	2200      	movs	r2, #0
 8002344:	e7fb      	b.n	800233e <z_time_slice+0x66>
 8002346:	bf00      	nop
 8002348:	200002d8 	.word	0x200002d8
 800234c:	20000304 	.word	0x20000304
 8002350:	2000030c 	.word	0x2000030c
 8002354:	20000308 	.word	0x20000308
 8002358:	20000050 	.word	0x20000050

0800235c <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 800235c:	b949      	cbnz	r1, 8002372 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800235e:	f3ef 8005 	mrs	r0, IPSR
 8002362:	b930      	cbnz	r0, 8002372 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
 8002364:	4b05      	ldr	r3, [pc, #20]	; (800237c <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
 8002366:	69da      	ldr	r2, [r3, #28]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	429a      	cmp	r2, r3
 800236c:	d001      	beq.n	8002372 <z_reschedule+0x16>
	ret = arch_swap(key);
 800236e:	f7fe bf95 	b.w	800129c <arch_swap>
 8002372:	f381 8811 	msr	BASEPRI, r1
 8002376:	f3bf 8f6f 	isb	sy
}
 800237a:	4770      	bx	lr
 800237c:	200002d8 	.word	0x200002d8

08002380 <z_sched_start>:
{
 8002380:	b510      	push	{r4, lr}
	__asm__ volatile(
 8002382:	f04f 0210 	mov.w	r2, #16
 8002386:	f3ef 8411 	mrs	r4, BASEPRI
 800238a:	f382 8812 	msr	BASEPRI_MAX, r2
 800238e:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
 8002392:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
 8002394:	0751      	lsls	r1, r2, #29
 8002396:	d404      	bmi.n	80023a2 <z_sched_start+0x22>
	__asm__ volatile(
 8002398:	f384 8811 	msr	BASEPRI, r4
 800239c:	f3bf 8f6f 	isb	sy
}
 80023a0:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 80023a2:	f022 0204 	bic.w	r2, r2, #4
 80023a6:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
 80023a8:	f7ff ff3c 	bl	8002224 <ready_thread>
	z_reschedule(&sched_spinlock, key);
 80023ac:	4621      	mov	r1, r4
 80023ae:	4802      	ldr	r0, [pc, #8]	; (80023b8 <z_sched_start+0x38>)
}
 80023b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
 80023b4:	f7ff bfd2 	b.w	800235c <z_reschedule>
 80023b8:	20000315 	.word	0x20000315

080023bc <k_sched_lock>:
	__asm__ volatile(
 80023bc:	f04f 0310 	mov.w	r3, #16
 80023c0:	f3ef 8111 	mrs	r1, BASEPRI
 80023c4:	f383 8812 	msr	BASEPRI_MAX, r3
 80023c8:	f3bf 8f6f 	isb	sy
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
 80023cc:	4b04      	ldr	r3, [pc, #16]	; (80023e0 <k_sched_lock+0x24>)
 80023ce:	689a      	ldr	r2, [r3, #8]
 80023d0:	7bd3      	ldrb	r3, [r2, #15]
 80023d2:	3b01      	subs	r3, #1
 80023d4:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
 80023d6:	f381 8811 	msr	BASEPRI, r1
 80023da:	f3bf 8f6f 	isb	sy
}
 80023de:	4770      	bx	lr
 80023e0:	200002d8 	.word	0x200002d8

080023e4 <k_sched_unlock>:
{
 80023e4:	b510      	push	{r4, lr}
	__asm__ volatile(
 80023e6:	f04f 0310 	mov.w	r3, #16
 80023ea:	f3ef 8411 	mrs	r4, BASEPRI
 80023ee:	f383 8812 	msr	BASEPRI_MAX, r3
 80023f2:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
 80023f6:	4b08      	ldr	r3, [pc, #32]	; (8002418 <k_sched_unlock+0x34>)
 80023f8:	689a      	ldr	r2, [r3, #8]
 80023fa:	7bd3      	ldrb	r3, [r2, #15]
 80023fc:	3301      	adds	r3, #1
 80023fe:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
 8002400:	2000      	movs	r0, #0
 8002402:	f7ff feb7 	bl	8002174 <update_cache>
	__asm__ volatile(
 8002406:	f384 8811 	msr	BASEPRI, r4
 800240a:	f3bf 8f6f 	isb	sy
}
 800240e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
 8002412:	f000 bce5 	b.w	8002de0 <z_reschedule_unlocked>
 8002416:	bf00      	nop
 8002418:	200002d8 	.word	0x200002d8

0800241c <z_sched_init>:
	list->head = (sys_dnode_t *)list;
 800241c:	4b04      	ldr	r3, [pc, #16]	; (8002430 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
 800241e:	2100      	movs	r1, #0
 8002420:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
 8002424:	e9c3 2208 	strd	r2, r2, [r3, #32]
 8002428:	4608      	mov	r0, r1
 800242a:	f7ff bf2f 	b.w	800228c <k_sched_time_slice_set>
 800242e:	bf00      	nop
 8002430:	200002d8 	.word	0x200002d8

08002434 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
 8002434:	4b01      	ldr	r3, [pc, #4]	; (800243c <z_impl_z_current_get+0x8>)
 8002436:	6898      	ldr	r0, [r3, #8]
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	200002d8 	.word	0x200002d8

08002440 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
 8002440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002444:	4604      	mov	r4, r0
	__asm__ volatile(
 8002446:	f04f 0310 	mov.w	r3, #16
 800244a:	f3ef 8611 	mrs	r6, BASEPRI
 800244e:	f383 8812 	msr	BASEPRI_MAX, r3
 8002452:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
 8002456:	7b03      	ldrb	r3, [r0, #12]
 8002458:	07d9      	lsls	r1, r3, #31
 800245a:	d50b      	bpl.n	8002474 <z_thread_abort+0x34>
	__asm__ volatile(
 800245c:	f386 8811 	msr	BASEPRI, r6
 8002460:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
 8002464:	4040      	eors	r0, r0
 8002466:	f380 8811 	msr	BASEPRI, r0
 800246a:	f04f 0004 	mov.w	r0, #4
 800246e:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
 8002470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
 8002474:	7b43      	ldrb	r3, [r0, #13]
 8002476:	071a      	lsls	r2, r3, #28
 8002478:	d504      	bpl.n	8002484 <z_thread_abort+0x44>
 800247a:	f386 8811 	msr	BASEPRI, r6
 800247e:	f3bf 8f6f 	isb	sy
 8002482:	e7f5      	b.n	8002470 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
 8002484:	f023 0220 	bic.w	r2, r3, #32
 8002488:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
 800248c:	09d2      	lsrs	r2, r2, #7
 800248e:	d120      	bne.n	80024d2 <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
 8002490:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
 8002492:	68a3      	ldr	r3, [r4, #8]
 8002494:	b113      	cbz	r3, 800249c <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
 8002496:	4620      	mov	r0, r4
 8002498:	f000 fc5a 	bl	8002d50 <unpend_thread_no_timeout>
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 800249c:	f104 0018 	add.w	r0, r4, #24
 80024a0:	f000 fca8 	bl	8002df4 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
 80024a4:	f104 0758 	add.w	r7, r4, #88	; 0x58
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 80024a8:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
 80024ac:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80024ae:	42bd      	cmp	r5, r7
 80024b0:	d000      	beq.n	80024b4 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 80024b2:	b9b5      	cbnz	r5, 80024e2 <z_thread_abort+0xa2>
		update_cache(1);
 80024b4:	2001      	movs	r0, #1
 80024b6:	f7ff fe5d 	bl	8002174 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
 80024ba:	4b10      	ldr	r3, [pc, #64]	; (80024fc <z_thread_abort+0xbc>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	42a3      	cmp	r3, r4
 80024c0:	d1db      	bne.n	800247a <z_thread_abort+0x3a>
 80024c2:	f3ef 8305 	mrs	r3, IPSR
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1d7      	bne.n	800247a <z_thread_abort+0x3a>
 80024ca:	4630      	mov	r0, r6
 80024cc:	f7fe fee6 	bl	800129c <arch_swap>
	return ret;
 80024d0:	e7d3      	b.n	800247a <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 80024d2:	f003 035f 	and.w	r3, r3, #95	; 0x5f
 80024d6:	f043 0308 	orr.w	r3, r3, #8
 80024da:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 80024dc:	f000 fc30 	bl	8002d40 <sys_dlist_remove>
}
 80024e0:	e7d7      	b.n	8002492 <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
 80024e2:	4628      	mov	r0, r5
 80024e4:	f000 fc34 	bl	8002d50 <unpend_thread_no_timeout>
 80024e8:	f105 0018 	add.w	r0, r5, #24
 80024ec:	f000 fc82 	bl	8002df4 <z_abort_timeout>
 80024f0:	f8c5 806c 	str.w	r8, [r5, #108]	; 0x6c
		ready_thread(thread);
 80024f4:	4628      	mov	r0, r5
 80024f6:	f7ff fe95 	bl	8002224 <ready_thread>
 80024fa:	e7d7      	b.n	80024ac <z_thread_abort+0x6c>
 80024fc:	200002d8 	.word	0x200002d8

08002500 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
 8002500:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
 8002502:	4806      	ldr	r0, [pc, #24]	; (800251c <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
 8002504:	4a06      	ldr	r2, [pc, #24]	; (8002520 <z_data_copy+0x20>)
 8002506:	4907      	ldr	r1, [pc, #28]	; (8002524 <z_data_copy+0x24>)
 8002508:	1a12      	subs	r2, r2, r0
 800250a:	f000 fc0b 	bl	8002d24 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 800250e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
 8002512:	4a05      	ldr	r2, [pc, #20]	; (8002528 <z_data_copy+0x28>)
 8002514:	4905      	ldr	r1, [pc, #20]	; (800252c <z_data_copy+0x2c>)
 8002516:	4806      	ldr	r0, [pc, #24]	; (8002530 <z_data_copy+0x30>)
 8002518:	f000 bc04 	b.w	8002d24 <z_early_memcpy>
 800251c:	20000000 	.word	0x20000000
 8002520:	20000050 	.word	0x20000050
 8002524:	080034f8 	.word	0x080034f8
 8002528:	00000000 	.word	0x00000000
 800252c:	080034f8 	.word	0x080034f8
 8002530:	20000000 	.word	0x20000000

08002534 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 8002534:	4b03      	ldr	r3, [pc, #12]	; (8002544 <elapsed+0x10>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	b90b      	cbnz	r3, 800253e <elapsed+0xa>
 800253a:	f7ff bbdd 	b.w	8001cf8 <sys_clock_elapsed>
}
 800253e:	2000      	movs	r0, #0
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	20000310 	.word	0x20000310

08002548 <next_timeout>:

static int32_t next_timeout(void)
{
 8002548:	b510      	push	{r4, lr}
	return list->head == list;
 800254a:	4b11      	ldr	r3, [pc, #68]	; (8002590 <next_timeout+0x48>)
 800254c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800254e:	429c      	cmp	r4, r3
 8002550:	d10a      	bne.n	8002568 <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
 8002552:	f7ff ffef 	bl	8002534 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
 8002556:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
 800255a:	4b0e      	ldr	r3, [pc, #56]	; (8002594 <next_timeout+0x4c>)
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	b113      	cbz	r3, 8002566 <next_timeout+0x1e>
 8002560:	4298      	cmp	r0, r3
 8002562:	bfa8      	it	ge
 8002564:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
 8002566:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
 8002568:	f7ff ffe4 	bl	8002534 <elapsed>
	if ((to == NULL) ||
 800256c:	2c00      	cmp	r4, #0
 800256e:	d0f2      	beq.n	8002556 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
 8002570:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8002574:	1a1b      	subs	r3, r3, r0
 8002576:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
 800257a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800257e:	f172 0100 	sbcs.w	r1, r2, #0
 8002582:	dae8      	bge.n	8002556 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
 8002584:	2a00      	cmp	r2, #0
 8002586:	bfac      	ite	ge
 8002588:	4618      	movge	r0, r3
 800258a:	2000      	movlt	r0, #0
 800258c:	e7e5      	b.n	800255a <next_timeout+0x12>
 800258e:	bf00      	nop
 8002590:	20000024 	.word	0x20000024
 8002594:	200002d8 	.word	0x200002d8

08002598 <remove_timeout>:
{
 8002598:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800259a:	b170      	cbz	r0, 80025ba <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
 800259c:	4b0b      	ldr	r3, [pc, #44]	; (80025cc <remove_timeout+0x34>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	4298      	cmp	r0, r3
 80025a2:	d00a      	beq.n	80025ba <remove_timeout+0x22>
 80025a4:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
 80025a6:	b143      	cbz	r3, 80025ba <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
 80025a8:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
 80025ac:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
 80025b0:	1912      	adds	r2, r2, r4
 80025b2:	eb41 0105 	adc.w	r1, r1, r5
 80025b6:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
 80025ba:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
 80025be:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 80025c0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 80025c2:	2300      	movs	r3, #0
	node->prev = NULL;
 80025c4:	e9c0 3300 	strd	r3, r3, [r0]
}
 80025c8:	bd30      	pop	{r4, r5, pc}
 80025ca:	bf00      	nop
 80025cc:	20000024 	.word	0x20000024

080025d0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 80025d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025d4:	bf08      	it	eq
 80025d6:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
 80025da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025dc:	4604      	mov	r4, r0
 80025de:	461d      	mov	r5, r3
 80025e0:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 80025e2:	d061      	beq.n	80026a8 <z_add_timeout+0xd8>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
 80025e4:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
 80025e6:	f04f 0310 	mov.w	r3, #16
 80025ea:	f3ef 8711 	mrs	r7, BASEPRI
 80025ee:	f383 8812 	msr	BASEPRI_MAX, r3
 80025f2:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
 80025f6:	3201      	adds	r2, #1
 80025f8:	f175 33ff 	sbcs.w	r3, r5, #4294967295
 80025fc:	da24      	bge.n	8002648 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
 80025fe:	4930      	ldr	r1, [pc, #192]	; (80026c0 <z_add_timeout+0xf0>)
 8002600:	e9d1 2000 	ldrd	r2, r0, [r1]
 8002604:	f06f 0301 	mvn.w	r3, #1
 8002608:	1a9b      	subs	r3, r3, r2
 800260a:	f04f 32ff 	mov.w	r2, #4294967295
 800260e:	eb62 0000 	sbc.w	r0, r2, r0
 8002612:	1b9e      	subs	r6, r3, r6
 8002614:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
 8002618:	2e01      	cmp	r6, #1
 800261a:	f170 0300 	sbcs.w	r3, r0, #0
 800261e:	da01      	bge.n	8002624 <z_add_timeout+0x54>
 8002620:	2601      	movs	r6, #1
 8002622:	2000      	movs	r0, #0
 8002624:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
 8002628:	4e26      	ldr	r6, [pc, #152]	; (80026c4 <z_add_timeout+0xf4>)
 800262a:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
 800262e:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8002630:	45b4      	cmp	ip, r6
 8002632:	bf08      	it	eq
 8002634:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
 8002638:	f1bc 0f00 	cmp.w	ip, #0
 800263c:	d10d      	bne.n	800265a <z_add_timeout+0x8a>
	node->prev = tail;
 800263e:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
 8002642:	602c      	str	r4, [r5, #0]
	list->tail = node;
 8002644:	6074      	str	r4, [r6, #4]
}
 8002646:	e01c      	b.n	8002682 <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
 8002648:	f7ff ff74 	bl	8002534 <elapsed>
 800264c:	3601      	adds	r6, #1
 800264e:	f145 0500 	adc.w	r5, r5, #0
 8002652:	1836      	adds	r6, r6, r0
 8002654:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
 8002658:	e7e4      	b.n	8002624 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
 800265a:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
 800265e:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
 8002662:	4293      	cmp	r3, r2
 8002664:	eb71 0e00 	sbcs.w	lr, r1, r0
 8002668:	da1f      	bge.n	80026aa <z_add_timeout+0xda>
				t->dticks -= to->dticks;
 800266a:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
 800266c:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8002670:	eb60 0001 	sbc.w	r0, r0, r1
 8002674:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
 8002678:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
 800267c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 800267e:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
 8002682:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8002684:	42b3      	cmp	r3, r6
 8002686:	d00b      	beq.n	80026a0 <z_add_timeout+0xd0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
 8002688:	429c      	cmp	r4, r3
 800268a:	d109      	bne.n	80026a0 <z_add_timeout+0xd0>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
 800268c:	f7ff ff5c 	bl	8002548 <next_timeout>

			if (next_time == 0 ||
 8002690:	b118      	cbz	r0, 800269a <z_add_timeout+0xca>
			    _current_cpu->slice_ticks != next_time) {
 8002692:	4b0d      	ldr	r3, [pc, #52]	; (80026c8 <z_add_timeout+0xf8>)
			if (next_time == 0 ||
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	4283      	cmp	r3, r0
 8002698:	d002      	beq.n	80026a0 <z_add_timeout+0xd0>
				sys_clock_set_timeout(next_time, false);
 800269a:	2100      	movs	r1, #0
 800269c:	f7ff fabc 	bl	8001c18 <sys_clock_set_timeout>
	__asm__ volatile(
 80026a0:	f387 8811 	msr	BASEPRI, r7
 80026a4:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
 80026a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
 80026aa:	1a9b      	subs	r3, r3, r2
 80026ac:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
 80026b0:	45ac      	cmp	ip, r5
 80026b2:	e9c4 3104 	strd	r3, r1, [r4, #16]
 80026b6:	d0c2      	beq.n	800263e <z_add_timeout+0x6e>
 80026b8:	f8dc c000 	ldr.w	ip, [ip]
 80026bc:	e7bc      	b.n	8002638 <z_add_timeout+0x68>
 80026be:	bf00      	nop
 80026c0:	200001c0 	.word	0x200001c0
 80026c4:	20000024 	.word	0x20000024
 80026c8:	200002d8 	.word	0x200002d8

080026cc <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
 80026cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026d0:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
 80026d2:	f7ff fe01 	bl	80022d8 <z_time_slice>
	__asm__ volatile(
 80026d6:	f04f 0310 	mov.w	r3, #16
 80026da:	f3ef 8711 	mrs	r7, BASEPRI
 80026de:	f383 8812 	msr	BASEPRI_MAX, r3
 80026e2:	f3bf 8f6f 	isb	sy
	return list->head == list;
 80026e6:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 800279c <sys_clock_announce+0xd0>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
 80026ea:	4e2a      	ldr	r6, [pc, #168]	; (8002794 <sys_clock_announce+0xc8>)
 80026ec:	f8d9 0000 	ldr.w	r0, [r9]
 80026f0:	6034      	str	r4, [r6, #0]
	for (t = first();
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
 80026f2:	4c29      	ldr	r4, [pc, #164]	; (8002798 <sys_clock_announce+0xcc>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80026f4:	4548      	cmp	r0, r9
 80026f6:	bf08      	it	eq
 80026f8:	2000      	moveq	r0, #0
		t->dticks = 0;
 80026fa:	f04f 0a00 	mov.w	sl, #0
 80026fe:	f04f 0b00 	mov.w	fp, #0
		curr_tick += dt;
 8002702:	e9d4 1e00 	ldrd	r1, lr, [r4]
	     (t != NULL) && (t->dticks <= announce_remaining);
 8002706:	6833      	ldr	r3, [r6, #0]
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
 8002708:	463d      	mov	r5, r7
 800270a:	b388      	cbz	r0, 8002770 <sys_clock_announce+0xa4>
 800270c:	e9d0 8704 	ldrd	r8, r7, [r0, #16]
 8002710:	ea4f 7ce3 	mov.w	ip, r3, asr #31
 8002714:	4543      	cmp	r3, r8
 8002716:	eb7c 0207 	sbcs.w	r2, ip, r7
 800271a:	da06      	bge.n	800272a <sys_clock_announce+0x5e>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
 800271c:	ebb8 0203 	subs.w	r2, r8, r3
 8002720:	eb67 070c 	sbc.w	r7, r7, ip
 8002724:	e9c0 2704 	strd	r2, r7, [r0, #16]
 8002728:	e022      	b.n	8002770 <sys_clock_announce+0xa4>
		curr_tick += dt;
 800272a:	eb18 0101 	adds.w	r1, r8, r1
 800272e:	eb4e 73e8 	adc.w	r3, lr, r8, asr #31
		t->dticks = 0;
 8002732:	e9c0 ab04 	strd	sl, fp, [r0, #16]
		curr_tick += dt;
 8002736:	e9c4 1300 	strd	r1, r3, [r4]
		remove_timeout(t);
 800273a:	f7ff ff2d 	bl	8002598 <remove_timeout>
	__asm__ volatile(
 800273e:	f385 8811 	msr	BASEPRI, r5
 8002742:	f3bf 8f6f 	isb	sy
		t->fn(t);
 8002746:	6883      	ldr	r3, [r0, #8]
 8002748:	4798      	blx	r3
	__asm__ volatile(
 800274a:	f04f 0310 	mov.w	r3, #16
 800274e:	f3ef 8511 	mrs	r5, BASEPRI
 8002752:	f383 8812 	msr	BASEPRI_MAX, r3
 8002756:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
 800275a:	6833      	ldr	r3, [r6, #0]
	return list->head == list;
 800275c:	f8d9 0000 	ldr.w	r0, [r9]
 8002760:	eba3 0308 	sub.w	r3, r3, r8
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8002764:	4548      	cmp	r0, r9
	k.key = arch_irq_lock();
 8002766:	462f      	mov	r7, r5
 8002768:	6033      	str	r3, [r6, #0]
 800276a:	d1ca      	bne.n	8002702 <sys_clock_announce+0x36>
		curr_tick += dt;
 800276c:	e9d4 1e00 	ldrd	r1, lr, [r4]
	}

	curr_tick += announce_remaining;
 8002770:	1859      	adds	r1, r3, r1
 8002772:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 8002776:	e9c4 1300 	strd	r1, r3, [r4]
	announce_remaining = 0;
 800277a:	2400      	movs	r4, #0
 800277c:	6034      	str	r4, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
 800277e:	f7ff fee3 	bl	8002548 <next_timeout>
 8002782:	4621      	mov	r1, r4
 8002784:	f7ff fa48 	bl	8001c18 <sys_clock_set_timeout>
	__asm__ volatile(
 8002788:	f385 8811 	msr	BASEPRI, r5
 800278c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
 8002790:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002794:	20000310 	.word	0x20000310
 8002798:	200001c0 	.word	0x200001c0
 800279c:	20000024 	.word	0x20000024

080027a0 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
 80027a0:	4801      	ldr	r0, [pc, #4]	; (80027a8 <boot_banner+0x8>)
 80027a2:	f000 b806 	b.w	80027b2 <printk>
 80027a6:	bf00      	nop
 80027a8:	080034b5 	.word	0x080034b5

080027ac <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
 80027ac:	4770      	bx	lr

080027ae <arch_printk_char_out>:
}
 80027ae:	2000      	movs	r0, #0
 80027b0:	4770      	bx	lr

080027b2 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
 80027b2:	b40f      	push	{r0, r1, r2, r3}
 80027b4:	b507      	push	{r0, r1, r2, lr}
 80027b6:	a904      	add	r1, sp, #16
 80027b8:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
 80027bc:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
 80027be:	f7fe fcd3 	bl	8001168 <vprintk>

	va_end(ap);
}
 80027c2:	b003      	add	sp, #12
 80027c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80027c8:	b004      	add	sp, #16
 80027ca:	4770      	bx	lr

080027cc <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 80027cc:	4604      	mov	r4, r0
 80027ce:	b508      	push	{r3, lr}
 80027d0:	4608      	mov	r0, r1
 80027d2:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
 80027d4:	461a      	mov	r2, r3
 80027d6:	47a0      	blx	r4
	if (z_syscall_trap()) {
		return (k_tid_t) arch_syscall_invoke0(K_SYSCALL_Z_CURRENT_GET);
	}
#endif
	compiler_barrier();
	return z_impl_z_current_get();
 80027d8:	f7ff fe2c 	bl	8002434 <z_impl_z_current_get>
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_THREAD_ABORT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_thread_abort(thread);
 80027dc:	f7fe ff86 	bl	80016ec <z_impl_k_thread_abort>

080027e0 <_ldiv5>:
	uint32_t v_lo = *v;
 80027e0:	e9d0 2100 	ldrd	r2, r1, [r0]
{
 80027e4:	b530      	push	{r4, r5, lr}
	__asm__ ("" : "+r" (m));
 80027e6:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
 80027ea:	fba2 2403 	umull	r2, r4, r2, r3
 80027ee:	18d5      	adds	r5, r2, r3
 80027f0:	eb43 0504 	adc.w	r5, r3, r4
	result += (uint64_t)v_hi * m;
 80027f4:	fba1 1303 	umull	r1, r3, r1, r3
 80027f8:	1852      	adds	r2, r2, r1
 80027fa:	eb44 0403 	adc.w	r4, r4, r3
 80027fe:	1952      	adds	r2, r2, r5
 8002800:	f144 0200 	adc.w	r2, r4, #0
	result += (uint64_t)v_hi * m;
 8002804:	1889      	adds	r1, r1, r2
 8002806:	f143 0300 	adc.w	r3, r3, #0
	*v = result;
 800280a:	e9c0 1300 	strd	r1, r3, [r0]
}
 800280e:	bd30      	pop	{r4, r5, pc}

08002810 <_get_digit>:
{
 8002810:	b510      	push	{r4, lr}
	if (*digit_count > 0) {
 8002812:	680a      	ldr	r2, [r1, #0]
 8002814:	2a00      	cmp	r2, #0
{
 8002816:	4603      	mov	r3, r0
	if (*digit_count > 0) {
 8002818:	dd0f      	ble.n	800283a <_get_digit+0x2a>
		--*digit_count;
 800281a:	3a01      	subs	r2, #1
 800281c:	600a      	str	r2, [r1, #0]
		*fr *= 10U;
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	6844      	ldr	r4, [r0, #4]
 8002822:	200a      	movs	r0, #10
 8002824:	fba2 1200 	umull	r1, r2, r2, r0
 8002828:	fb00 2204 	mla	r2, r0, r4, r2
		rval = ((*fr >> 60) & 0xF) + '0';
 800282c:	0f10      	lsrs	r0, r2, #28
		*fr &= (BIT64(60) - 1U);
 800282e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8002832:	e9c3 1200 	strd	r1, r2, [r3]
		rval = ((*fr >> 60) & 0xF) + '0';
 8002836:	3030      	adds	r0, #48	; 0x30
}
 8002838:	bd10      	pop	{r4, pc}
		rval = '0';
 800283a:	2030      	movs	r0, #48	; 0x30
 800283c:	e7fc      	b.n	8002838 <_get_digit+0x28>

0800283e <encode_uint>:
{
 800283e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002842:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
 8002844:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
 8002846:	2b6f      	cmp	r3, #111	; 0x6f
{
 8002848:	4680      	mov	r8, r0
 800284a:	460f      	mov	r7, r1
 800284c:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
 800284e:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
 8002852:	d029      	beq.n	80028a8 <encode_uint+0x6a>
 8002854:	d824      	bhi.n	80028a0 <encode_uint+0x62>
		return 10;
 8002856:	2b58      	cmp	r3, #88	; 0x58
 8002858:	bf0c      	ite	eq
 800285a:	2610      	moveq	r6, #16
 800285c:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
 800285e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
 8002862:	4632      	mov	r2, r6
 8002864:	2300      	movs	r3, #0
 8002866:	4640      	mov	r0, r8
 8002868:	4639      	mov	r1, r7
 800286a:	f7fd fc95 	bl	8000198 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 800286e:	2a09      	cmp	r2, #9
 8002870:	b2d4      	uxtb	r4, r2
 8002872:	d81e      	bhi.n	80028b2 <encode_uint+0x74>
 8002874:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
 8002876:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8002878:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
 800287a:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
 800287e:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
 8002882:	d301      	bcc.n	8002888 <encode_uint+0x4a>
 8002884:	45d1      	cmp	r9, sl
 8002886:	d811      	bhi.n	80028ac <encode_uint+0x6e>
	if (conv->flag_hash) {
 8002888:	782b      	ldrb	r3, [r5, #0]
 800288a:	069b      	lsls	r3, r3, #26
 800288c:	d505      	bpl.n	800289a <encode_uint+0x5c>
		if (radix == 8) {
 800288e:	2e08      	cmp	r6, #8
 8002890:	d115      	bne.n	80028be <encode_uint+0x80>
			conv->altform_0 = true;
 8002892:	78ab      	ldrb	r3, [r5, #2]
 8002894:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
 8002898:	70ab      	strb	r3, [r5, #2]
}
 800289a:	4648      	mov	r0, r9
 800289c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
 80028a0:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
 80028a4:	2b70      	cmp	r3, #112	; 0x70
 80028a6:	e7d7      	b.n	8002858 <encode_uint+0x1a>
	switch (specifier) {
 80028a8:	2608      	movs	r6, #8
 80028aa:	e7d8      	b.n	800285e <encode_uint+0x20>
		value /= radix;
 80028ac:	4680      	mov	r8, r0
 80028ae:	460f      	mov	r7, r1
 80028b0:	e7d7      	b.n	8002862 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 80028b2:	f1bb 0f19 	cmp.w	fp, #25
 80028b6:	bf94      	ite	ls
 80028b8:	3437      	addls	r4, #55	; 0x37
 80028ba:	3457      	addhi	r4, #87	; 0x57
 80028bc:	e7db      	b.n	8002876 <encode_uint+0x38>
		} else if (radix == 16) {
 80028be:	2e10      	cmp	r6, #16
 80028c0:	d1eb      	bne.n	800289a <encode_uint+0x5c>
			conv->altform_0c = true;
 80028c2:	78ab      	ldrb	r3, [r5, #2]
 80028c4:	f043 0310 	orr.w	r3, r3, #16
 80028c8:	e7e6      	b.n	8002898 <encode_uint+0x5a>

080028ca <outs>:
{
 80028ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028ce:	4607      	mov	r7, r0
 80028d0:	4688      	mov	r8, r1
 80028d2:	4615      	mov	r5, r2
 80028d4:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 80028d6:	4614      	mov	r4, r2
 80028d8:	42b4      	cmp	r4, r6
 80028da:	d305      	bcc.n	80028e8 <outs+0x1e>
 80028dc:	b10e      	cbz	r6, 80028e2 <outs+0x18>
	return (int)count;
 80028de:	1b60      	subs	r0, r4, r5
 80028e0:	e008      	b.n	80028f4 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 80028e2:	7823      	ldrb	r3, [r4, #0]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d0fa      	beq.n	80028de <outs+0x14>
		int rc = out((int)*sp++, ctx);
 80028e8:	f814 0b01 	ldrb.w	r0, [r4], #1
 80028ec:	4641      	mov	r1, r8
 80028ee:	47b8      	blx	r7
		if (rc < 0) {
 80028f0:	2800      	cmp	r0, #0
 80028f2:	daf1      	bge.n	80028d8 <outs+0xe>
}
 80028f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080028f8 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
 80028f8:	4770      	bx	lr

080028fa <st_stm32_common_config>:
#endif /* CONFIG_SOC_SERIES_STM32H7X || CONFIG_SOC_SERIES_STM32MP1X */

#endif /* CONFIG_USE_SEGGER_RTT */

	return 0;
}
 80028fa:	2000      	movs	r0, #0
 80028fc:	4770      	bx	lr

080028fe <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
 80028fe:	f000 b9f4 	b.w	8002cea <z_fatal_error>

08002902 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
 8002902:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
 8002904:	6800      	ldr	r0, [r0, #0]
 8002906:	f000 b9f0 	b.w	8002cea <z_fatal_error>

0800290a <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
 800290a:	2100      	movs	r1, #0
 800290c:	2001      	movs	r0, #1
 800290e:	f7ff bff6 	b.w	80028fe <z_arm_fatal_error>

08002912 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
 8002912:	b508      	push	{r3, lr}
	handler();
 8002914:	f7fe fc90 	bl	8001238 <z_SysNmiOnReset>
	z_arm_int_exit();
}
 8002918:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 800291c:	f7fe bd7c 	b.w	8001418 <z_arm_exc_exit>

08002920 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
 8002920:	4603      	mov	r3, r0
	size_t n = 0;
 8002922:	2000      	movs	r0, #0

	while (*s != '\0') {
 8002924:	5c1a      	ldrb	r2, [r3, r0]
 8002926:	b902      	cbnz	r2, 800292a <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
 8002928:	4770      	bx	lr
		n++;
 800292a:	3001      	adds	r0, #1
 800292c:	e7fa      	b.n	8002924 <strlen+0x4>

0800292e <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
 800292e:	4603      	mov	r3, r0
	size_t n = 0;
 8002930:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
 8002932:	5c1a      	ldrb	r2, [r3, r0]
 8002934:	b10a      	cbz	r2, 800293a <strnlen+0xc>
 8002936:	4288      	cmp	r0, r1
 8002938:	d100      	bne.n	800293c <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
 800293a:	4770      	bx	lr
		n++;
 800293c:	3001      	adds	r0, #1
 800293e:	e7f8      	b.n	8002932 <strnlen+0x4>

08002940 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
 8002940:	b510      	push	{r4, lr}
 8002942:	1e43      	subs	r3, r0, #1
 8002944:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
 8002946:	4291      	cmp	r1, r2
 8002948:	d100      	bne.n	800294c <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
 800294a:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
 800294c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002950:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
 8002954:	e7f7      	b.n	8002946 <memcpy+0x6>

08002956 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
 8002956:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
 8002958:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
 800295a:	4603      	mov	r3, r0
	while (n > 0) {
 800295c:	4293      	cmp	r3, r2
 800295e:	d100      	bne.n	8002962 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
 8002960:	4770      	bx	lr
		*(d_byte++) = c_byte;
 8002962:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
 8002966:	e7f9      	b.n	800295c <memset+0x6>

08002968 <stm32_exti_init>:
{
 8002968:	b508      	push	{r3, lr}
	DT_FOREACH_PROP_ELEM(DT_NODELABEL(exti),
 800296a:	2206      	movs	r2, #6
 800296c:	2101      	movs	r1, #1
 800296e:	2000      	movs	r0, #0
 8002970:	f7fe fef6 	bl	8001760 <stm32_fill_irq_table>
 8002974:	2200      	movs	r2, #0
 8002976:	4611      	mov	r1, r2
 8002978:	2006      	movs	r0, #6
 800297a:	f7fe fc45 	bl	8001208 <z_arm_irq_priority_set>
 800297e:	2101      	movs	r1, #1
 8002980:	4608      	mov	r0, r1
 8002982:	2207      	movs	r2, #7
 8002984:	f7fe feec 	bl	8001760 <stm32_fill_irq_table>
 8002988:	2200      	movs	r2, #0
 800298a:	4611      	mov	r1, r2
 800298c:	2007      	movs	r0, #7
 800298e:	f7fe fc3b 	bl	8001208 <z_arm_irq_priority_set>
 8002992:	2208      	movs	r2, #8
 8002994:	2101      	movs	r1, #1
 8002996:	2002      	movs	r0, #2
 8002998:	f7fe fee2 	bl	8001760 <stm32_fill_irq_table>
 800299c:	2200      	movs	r2, #0
 800299e:	4611      	mov	r1, r2
 80029a0:	2008      	movs	r0, #8
 80029a2:	f7fe fc31 	bl	8001208 <z_arm_irq_priority_set>
 80029a6:	2209      	movs	r2, #9
 80029a8:	2101      	movs	r1, #1
 80029aa:	2003      	movs	r0, #3
 80029ac:	f7fe fed8 	bl	8001760 <stm32_fill_irq_table>
 80029b0:	2200      	movs	r2, #0
 80029b2:	4611      	mov	r1, r2
 80029b4:	2009      	movs	r0, #9
 80029b6:	f7fe fc27 	bl	8001208 <z_arm_irq_priority_set>
 80029ba:	220a      	movs	r2, #10
 80029bc:	2101      	movs	r1, #1
 80029be:	2004      	movs	r0, #4
 80029c0:	f7fe fece 	bl	8001760 <stm32_fill_irq_table>
 80029c4:	2200      	movs	r2, #0
 80029c6:	4611      	mov	r1, r2
 80029c8:	200a      	movs	r0, #10
 80029ca:	f7fe fc1d 	bl	8001208 <z_arm_irq_priority_set>
 80029ce:	2105      	movs	r1, #5
 80029d0:	4608      	mov	r0, r1
 80029d2:	2217      	movs	r2, #23
 80029d4:	f7fe fec4 	bl	8001760 <stm32_fill_irq_table>
 80029d8:	2200      	movs	r2, #0
 80029da:	4611      	mov	r1, r2
 80029dc:	2017      	movs	r0, #23
 80029de:	f7fe fc13 	bl	8001208 <z_arm_irq_priority_set>
 80029e2:	2228      	movs	r2, #40	; 0x28
 80029e4:	2106      	movs	r1, #6
 80029e6:	200a      	movs	r0, #10
 80029e8:	f7fe feba 	bl	8001760 <stm32_fill_irq_table>
 80029ec:	2200      	movs	r2, #0
 80029ee:	4611      	mov	r1, r2
 80029f0:	2028      	movs	r0, #40	; 0x28
 80029f2:	f7fe fc09 	bl	8001208 <z_arm_irq_priority_set>
}
 80029f6:	2000      	movs	r0, #0
 80029f8:	bd08      	pop	{r3, pc}

080029fa <stm32_clock_control_on>:
	if (IN_RANGE(pclken->bus, STM32_PERIPH_BUS_MIN, STM32_PERIPH_BUS_MAX) == 0) {
 80029fa:	680b      	ldr	r3, [r1, #0]
 80029fc:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002a00:	2a78      	cmp	r2, #120	; 0x78
	sys_set_bits(DT_REG_ADDR(DT_NODELABEL(rcc)) + pclken->bus,
 8002a02:	bf9f      	itttt	ls
 8002a04:	f103 4380 	addls.w	r3, r3, #1073741824	; 0x40000000
 8002a08:	f503 330e 	addls.w	r3, r3, #145408	; 0x23800

static ALWAYS_INLINE void sys_set_bits(mem_addr_t addr, unsigned int mask)
{
	uint32_t temp = *(volatile uint32_t *)addr;

	*(volatile uint32_t *)addr = temp | mask;
 8002a0c:	6849      	ldrls	r1, [r1, #4]
	uint32_t temp = *(volatile uint32_t *)addr;
 8002a0e:	681a      	ldrls	r2, [r3, #0]
	*(volatile uint32_t *)addr = temp | mask;
 8002a10:	bf9d      	ittte	ls
 8002a12:	430a      	orrls	r2, r1
	return 0;
 8002a14:	2000      	movls	r0, #0
 8002a16:	601a      	strls	r2, [r3, #0]
		return -ENOTSUP;
 8002a18:	f06f 0085 	mvnhi.w	r0, #133	; 0x85
}
 8002a1c:	4770      	bx	lr

08002a1e <stm32_clock_control_off>:
	if (IN_RANGE(pclken->bus, STM32_PERIPH_BUS_MIN, STM32_PERIPH_BUS_MAX) == 0) {
 8002a1e:	680b      	ldr	r3, [r1, #0]
 8002a20:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002a24:	2a78      	cmp	r2, #120	; 0x78
	sys_clear_bits(DT_REG_ADDR(DT_NODELABEL(rcc)) + pclken->bus,
 8002a26:	bf9f      	itttt	ls
 8002a28:	f103 4380 	addls.w	r3, r3, #1073741824	; 0x40000000
 8002a2c:	f503 330e 	addls.w	r3, r3, #145408	; 0x23800

static ALWAYS_INLINE void sys_clear_bits(mem_addr_t addr, unsigned int mask)
{
	uint32_t temp = *(volatile uint32_t *)addr;

	*(volatile uint32_t *)addr = temp & ~mask;
 8002a30:	6849      	ldrls	r1, [r1, #4]
	uint32_t temp = *(volatile uint32_t *)addr;
 8002a32:	681a      	ldrls	r2, [r3, #0]
	*(volatile uint32_t *)addr = temp & ~mask;
 8002a34:	bf9d      	ittte	ls
 8002a36:	438a      	bicls	r2, r1
	return 0;
 8002a38:	2000      	movls	r0, #0
 8002a3a:	601a      	strls	r2, [r3, #0]
		return -ENOTSUP;
 8002a3c:	f06f 0085 	mvnhi.w	r0, #133	; 0x85
}
 8002a40:	4770      	bx	lr

08002a42 <stm32_clock_control_configure>:
	err = enabled_clock(pclken->bus);
 8002a42:	680b      	ldr	r3, [r1, #0]
	switch (src_clk) {
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d803      	bhi.n	8002a50 <stm32_clock_control_configure+0xe>
 8002a48:	b923      	cbnz	r3, 8002a54 <stm32_clock_control_configure+0x12>
 8002a4a:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 8002a4e:	4770      	bx	lr
	switch (src_clk) {
 8002a50:	2b06      	cmp	r3, #6
 8002a52:	d1fa      	bne.n	8002a4a <stm32_clock_control_configure+0x8>
	if (pclken->enr == NO_SEL) {
 8002a54:	684a      	ldr	r2, [r1, #4]
 8002a56:	2aff      	cmp	r2, #255	; 0xff
 8002a58:	d00d      	beq.n	8002a76 <stm32_clock_control_configure+0x34>
	sys_set_bits(DT_REG_ADDR(DT_NODELABEL(rcc)) + STM32_CLOCK_REG_GET(pclken->enr),
 8002a5a:	b2d3      	uxtb	r3, r2
 8002a5c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002a60:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
		     STM32_CLOCK_VAL_GET(pclken->enr) << STM32_CLOCK_SHIFT_GET(pclken->enr));
 8002a64:	f3c2 4102 	ubfx	r1, r2, #16, #3
	uint32_t temp = *(volatile uint32_t *)addr;
 8002a68:	6818      	ldr	r0, [r3, #0]
 8002a6a:	f3c2 2204 	ubfx	r2, r2, #8, #5
	sys_set_bits(DT_REG_ADDR(DT_NODELABEL(rcc)) + STM32_CLOCK_REG_GET(pclken->enr),
 8002a6e:	fa01 f202 	lsl.w	r2, r1, r2
	*(volatile uint32_t *)addr = temp | mask;
 8002a72:	4302      	orrs	r2, r0
 8002a74:	601a      	str	r2, [r3, #0]
		return 0;
 8002a76:	2000      	movs	r0, #0
 8002a78:	4770      	bx	lr

08002a7a <gpio_stm32_port_get_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002a7a:	6843      	ldr	r3, [r0, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Input data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->IDR));
 8002a7e:	691b      	ldr	r3, [r3, #16]
	*value = LL_GPIO_ReadInputPort(gpio);
 8002a80:	600b      	str	r3, [r1, #0]
}
 8002a82:	2000      	movs	r0, #0
 8002a84:	4770      	bx	lr

08002a86 <gpio_stm32_port_set_masked_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002a86:	6843      	ldr	r3, [r0, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Output data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadOutputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->ODR));
 8002a8a:	6958      	ldr	r0, [r3, #20]
	LL_GPIO_WriteOutputPort(gpio, (port_value & ~mask) | (mask & value));
 8002a8c:	4042      	eors	r2, r0
 8002a8e:	400a      	ands	r2, r1
 8002a90:	4042      	eors	r2, r0
  WRITE_REG(GPIOx->ODR, PortValue);
 8002a92:	615a      	str	r2, [r3, #20]
}
 8002a94:	2000      	movs	r0, #0
 8002a96:	4770      	bx	lr

08002a98 <gpio_stm32_port_set_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002a98:	6843      	ldr	r3, [r0, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
}
 8002a9c:	2000      	movs	r0, #0
	WRITE_REG(gpio->BSRR, pins);
 8002a9e:	6199      	str	r1, [r3, #24]
}
 8002aa0:	4770      	bx	lr

08002aa2 <gpio_stm32_port_clear_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002aa2:	6843      	ldr	r3, [r0, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002aa6:	0409      	lsls	r1, r1, #16
 8002aa8:	6199      	str	r1, [r3, #24]
}
 8002aaa:	2000      	movs	r0, #0
 8002aac:	4770      	bx	lr

08002aae <gpio_stm32_port_toggle_bits>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002aae:	6843      	ldr	r3, [r0, #4]
 8002ab0:	685a      	ldr	r2, [r3, #4]
	WRITE_REG(gpio->ODR, READ_REG(gpio->ODR) ^ pins);
 8002ab2:	6953      	ldr	r3, [r2, #20]
 8002ab4:	404b      	eors	r3, r1
 8002ab6:	6153      	str	r3, [r2, #20]
}
 8002ab8:	2000      	movs	r0, #0
 8002aba:	4770      	bx	lr

08002abc <gpio_stm32_manage_callback>:
{
 8002abc:	b510      	push	{r4, lr}
	struct gpio_stm32_data *data = dev->data;
 8002abe:	6903      	ldr	r3, [r0, #16]
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
 8002ac0:	6898      	ldr	r0, [r3, #8]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
 8002ac2:	b1f8      	cbz	r0, 8002b04 <gpio_stm32_manage_callback+0x48>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8002ac4:	4288      	cmp	r0, r1
 8002ac6:	d119      	bne.n	8002afc <gpio_stm32_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
 8002ac8:	68dc      	ldr	r4, [r3, #12]
	return node->next;
 8002aca:	6808      	ldr	r0, [r1, #0]
	list->head = node;
 8002acc:	6098      	str	r0, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
 8002ace:	42a1      	cmp	r1, r4
 8002ad0:	d100      	bne.n	8002ad4 <gpio_stm32_manage_callback+0x18>
	list->tail = node;
 8002ad2:	60d8      	str	r0, [r3, #12]
	parent->next = child;
 8002ad4:	2000      	movs	r0, #0
 8002ad6:	6008      	str	r0, [r1, #0]
		}
	} else if (!set) {
		return -EINVAL;
	}

	if (set) {
 8002ad8:	b12a      	cbz	r2, 8002ae6 <gpio_stm32_manage_callback+0x2a>
	return list->head;
 8002ada:	689a      	ldr	r2, [r3, #8]
	parent->next = child;
 8002adc:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
 8002ade:	68da      	ldr	r2, [r3, #12]
	list->head = node;
 8002ae0:	6099      	str	r1, [r3, #8]
Z_GENLIST_PREPEND(slist, snode)
 8002ae2:	b902      	cbnz	r2, 8002ae6 <gpio_stm32_manage_callback+0x2a>
	list->tail = node;
 8002ae4:	60d9      	str	r1, [r3, #12]
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
 8002ae6:	2000      	movs	r0, #0
	return gpio_manage_callback(&data->cb, callback, set);
 8002ae8:	e010      	b.n	8002b0c <gpio_stm32_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8002aea:	4281      	cmp	r1, r0
 8002aec:	d106      	bne.n	8002afc <gpio_stm32_manage_callback+0x40>
	return node->next;
 8002aee:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
 8002af0:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
 8002af2:	68d8      	ldr	r0, [r3, #12]
 8002af4:	4281      	cmp	r1, r0
 8002af6:	d1ed      	bne.n	8002ad4 <gpio_stm32_manage_callback+0x18>
	list->tail = node;
 8002af8:	60dc      	str	r4, [r3, #12]
}
 8002afa:	e7eb      	b.n	8002ad4 <gpio_stm32_manage_callback+0x18>
	return node->next;
 8002afc:	4604      	mov	r4, r0
 8002afe:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8002b00:	2800      	cmp	r0, #0
 8002b02:	d1f2      	bne.n	8002aea <gpio_stm32_manage_callback+0x2e>
			if (!set) {
 8002b04:	2a00      	cmp	r2, #0
 8002b06:	d1e8      	bne.n	8002ada <gpio_stm32_manage_callback+0x1e>
				return -EINVAL;
 8002b08:	f06f 0015 	mvn.w	r0, #21
}
 8002b0c:	bd10      	pop	{r4, pc}

08002b0e <gpio_stm32_configure_raw.isra.0>:
static void gpio_stm32_configure_raw(const struct device *dev, int pin,
 8002b0e:	b5f0      	push	{r4, r5, r6, r7, lr}
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002b10:	6844      	ldr	r4, [r0, #4]
	pinval = 1 << pin;
 8002b12:	2001      	movs	r0, #1
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002b14:	6867      	ldr	r7, [r4, #4]
 8002b16:	4088      	lsls	r0, r1
static void gpio_stm32_configure_raw(const struct device *dev, int pin,
 8002b18:	461e      	mov	r6, r3
	LL_GPIO_SetPinOutputType(gpio, pin_ll, otype >> STM32_OTYPER_SHIFT);
 8002b1a:	f3c2 1380 	ubfx	r3, r2, #6, #1
 8002b1e:	ea27 0700 	bic.w	r7, r7, r0
 8002b22:	408b      	lsls	r3, r1
 8002b24:	433b      	orrs	r3, r7
 8002b26:	6063      	str	r3, [r4, #4]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b28:	fa90 f7a0 	rbit	r7, r0
  return __builtin_clz(value);
 8002b2c:	fab7 f787 	clz	r7, r7
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002b30:	f8d4 c008 	ldr.w	ip, [r4, #8]
 8002b34:	f04f 0e03 	mov.w	lr, #3
 8002b38:	007f      	lsls	r7, r7, #1
 8002b3a:	fa0e f707 	lsl.w	r7, lr, r7
 8002b3e:	ea2c 0c07 	bic.w	ip, ip, r7
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b42:	fa90 f7a0 	rbit	r7, r0
  return __builtin_clz(value);
 8002b46:	fab7 f787 	clz	r7, r7
	LL_GPIO_SetPinSpeed(gpio, pin_ll, ospeed >> STM32_OSPEEDR_SHIFT);
 8002b4a:	f3c2 13c1 	ubfx	r3, r2, #7, #2
 8002b4e:	007f      	lsls	r7, r7, #1
 8002b50:	40bb      	lsls	r3, r7
 8002b52:	ea43 030c 	orr.w	r3, r3, ip
 8002b56:	60a3      	str	r3, [r4, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b58:	fa90 f3a0 	rbit	r3, r0
  return __builtin_clz(value);
 8002b5c:	fab3 f383 	clz	r3, r3
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002b60:	68e7      	ldr	r7, [r4, #12]
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	fa0e f303 	lsl.w	r3, lr, r3
 8002b68:	ea27 0703 	bic.w	r7, r7, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6c:	fa90 f3a0 	rbit	r3, r0
  return __builtin_clz(value);
 8002b70:	fab3 f383 	clz	r3, r3
 8002b74:	f002 0530 	and.w	r5, r2, #48	; 0x30
 8002b78:	005b      	lsls	r3, r3, #1
	LL_GPIO_SetPinPull(gpio, pin_ll, pupd >> STM32_PUPDR_SHIFT);
 8002b7a:	f3c2 2241 	ubfx	r2, r2, #9, #2
 8002b7e:	409a      	lsls	r2, r3
 8002b80:	433a      	orrs	r2, r7
	if (mode == STM32_MODER_ALT_MODE) {
 8002b82:	2d20      	cmp	r5, #32
 8002b84:	60e2      	str	r2, [r4, #12]
 8002b86:	d116      	bne.n	8002bb6 <gpio_stm32_configure_raw.isra.0+0xa8>
		if (pin < 8) {
 8002b88:	2907      	cmp	r1, #7
 8002b8a:	dc2b      	bgt.n	8002be4 <gpio_stm32_configure_raw.isra.0+0xd6>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b8c:	fa90 f3a0 	rbit	r3, r0
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002b90:	6a22      	ldr	r2, [r4, #32]
  if (value == 0U)
 8002b92:	b32b      	cbz	r3, 8002be0 <gpio_stm32_configure_raw.isra.0+0xd2>
  return __builtin_clz(value);
 8002b94:	fab3 f383 	clz	r3, r3
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	210f      	movs	r1, #15
 8002b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba0:	ea22 0203 	bic.w	r2, r2, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba4:	fa90 f3a0 	rbit	r3, r0
  return __builtin_clz(value);
 8002ba8:	fab3 f383 	clz	r3, r3
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	fa06 f303 	lsl.w	r3, r6, r3
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	6223      	str	r3, [r4, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb6:	fa90 f3a0 	rbit	r3, r0
  return __builtin_clz(value);
 8002bba:	fab3 f383 	clz	r3, r3
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002bbe:	6822      	ldr	r2, [r4, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc0:	fa90 f0a0 	rbit	r0, r0
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	2103      	movs	r1, #3
  return __builtin_clz(value);
 8002bc8:	fab0 f080 	clz	r0, r0
	LL_GPIO_SetPinMode(gpio, pin_ll, mode >> STM32_MODER_SHIFT);
 8002bcc:	092d      	lsrs	r5, r5, #4
 8002bce:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd2:	0040      	lsls	r0, r0, #1
 8002bd4:	ea22 0303 	bic.w	r3, r2, r3
 8002bd8:	4085      	lsls	r5, r0
 8002bda:	431d      	orrs	r5, r3
 8002bdc:	6025      	str	r5, [r4, #0]
}
 8002bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 32U;
 8002be0:	462b      	mov	r3, r5
 8002be2:	e7d9      	b.n	8002b98 <gpio_stm32_configure_raw.isra.0+0x8a>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002be4:	0a03      	lsrs	r3, r0, #8
 8002be6:	6a61      	ldr	r1, [r4, #36]	; 0x24
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be8:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 8002bec:	b182      	cbz	r2, 8002c10 <gpio_stm32_configure_raw.isra.0+0x102>
  return __builtin_clz(value);
 8002bee:	fab2 f282 	clz	r2, r2
 8002bf2:	0092      	lsls	r2, r2, #2
 8002bf4:	270f      	movs	r7, #15
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf6:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8002bfa:	fab3 f383 	clz	r3, r3
 8002bfe:	fa07 f202 	lsl.w	r2, r7, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	ea21 0202 	bic.w	r2, r1, r2
 8002c08:	409e      	lsls	r6, r3
 8002c0a:	4316      	orrs	r6, r2
 8002c0c:	6266      	str	r6, [r4, #36]	; 0x24
}
 8002c0e:	e7d2      	b.n	8002bb6 <gpio_stm32_configure_raw.isra.0+0xa8>
    return 32U;
 8002c10:	462a      	mov	r2, r5
 8002c12:	e7ee      	b.n	8002bf2 <gpio_stm32_configure_raw.isra.0+0xe4>

08002c14 <gpio_stm32_config>:
{
 8002c14:	b538      	push	{r3, r4, r5, lr}
 8002c16:	4604      	mov	r4, r0
	if ((flags & GPIO_OUTPUT) != 0) {
 8002c18:	0390      	lsls	r0, r2, #14
{
 8002c1a:	460d      	mov	r5, r1
 8002c1c:	4613      	mov	r3, r2
	if ((flags & GPIO_OUTPUT) != 0) {
 8002c1e:	d517      	bpl.n	8002c50 <gpio_stm32_config+0x3c>
		if ((flags & GPIO_SINGLE_ENDED) != 0) {
 8002c20:	0791      	lsls	r1, r2, #30
 8002c22:	d50e      	bpl.n	8002c42 <gpio_stm32_config+0x2e>
			if (flags & GPIO_LINE_OPEN_DRAIN) {
 8002c24:	075a      	lsls	r2, r3, #29
 8002c26:	d52e      	bpl.n	8002c86 <gpio_stm32_config+0x72>
				*pincfg |= STM32_PINCFG_OPEN_DRAIN;
 8002c28:	2250      	movs	r2, #80	; 0x50
		if ((flags & GPIO_PULL_UP) != 0) {
 8002c2a:	06d8      	lsls	r0, r3, #27
 8002c2c:	d50b      	bpl.n	8002c46 <gpio_stm32_config+0x32>
			*pincfg |= STM32_PINCFG_PULL_UP;
 8002c2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 8002c32:	0319      	lsls	r1, r3, #12
 8002c34:	d51a      	bpl.n	8002c6c <gpio_stm32_config+0x58>
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002c36:	6861      	ldr	r1, [r4, #4]
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 8002c38:	2301      	movs	r3, #1
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002c3a:	6849      	ldr	r1, [r1, #4]
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 8002c3c:	40ab      	lsls	r3, r5
	WRITE_REG(gpio->BSRR, pins);
 8002c3e:	618b      	str	r3, [r1, #24]
	return 0;
 8002c40:	e00d      	b.n	8002c5e <gpio_stm32_config+0x4a>
		*pincfg = STM32_PINCFG_MODE_OUTPUT;
 8002c42:	2210      	movs	r2, #16
 8002c44:	e7f1      	b.n	8002c2a <gpio_stm32_config+0x16>
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 8002c46:	0699      	lsls	r1, r3, #26
 8002c48:	d5f3      	bpl.n	8002c32 <gpio_stm32_config+0x1e>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 8002c4a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
	if (err != 0) {
 8002c4e:	e7f0      	b.n	8002c32 <gpio_stm32_config+0x1e>
	} else if  ((flags & GPIO_INPUT) != 0) {
 8002c50:	03da      	lsls	r2, r3, #15
 8002c52:	d513      	bpl.n	8002c7c <gpio_stm32_config+0x68>
		if ((flags & GPIO_PULL_UP) != 0) {
 8002c54:	06d8      	lsls	r0, r3, #27
 8002c56:	d413      	bmi.n	8002c80 <gpio_stm32_config+0x6c>
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 8002c58:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002c5c:	029a      	lsls	r2, r3, #10
	gpio_stm32_configure_raw(dev, pin, pincfg, 0);
 8002c5e:	6860      	ldr	r0, [r4, #4]
 8002c60:	2300      	movs	r3, #0
 8002c62:	4629      	mov	r1, r5
 8002c64:	f7ff ff53 	bl	8002b0e <gpio_stm32_configure_raw.isra.0>
	return 0;
 8002c68:	2000      	movs	r0, #0
}
 8002c6a:	bd38      	pop	{r3, r4, r5, pc}
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
 8002c6c:	035b      	lsls	r3, r3, #13
 8002c6e:	d5f6      	bpl.n	8002c5e <gpio_stm32_config+0x4a>
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 8002c70:	2101      	movs	r1, #1
 8002c72:	40a9      	lsls	r1, r5
 8002c74:	4620      	mov	r0, r4
 8002c76:	f7ff ff14 	bl	8002aa2 <gpio_stm32_port_clear_bits_raw>
 8002c7a:	e7f0      	b.n	8002c5e <gpio_stm32_config+0x4a>
		*pincfg = STM32_PINCFG_MODE_ANALOG;
 8002c7c:	2230      	movs	r2, #48	; 0x30
 8002c7e:	e7ee      	b.n	8002c5e <gpio_stm32_config+0x4a>
			*pincfg |= STM32_PINCFG_PULL_UP;
 8002c80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c84:	e7eb      	b.n	8002c5e <gpio_stm32_config+0x4a>
				return -ENOTSUP;
 8002c86:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8002c8a:	e7ee      	b.n	8002c6a <gpio_stm32_config+0x56>

08002c8c <gpio_stm32_isr>:
{
 8002c8c:	b570      	push	{r4, r5, r6, lr}
 8002c8e:	460b      	mov	r3, r1
 8002c90:	6889      	ldr	r1, [r1, #8]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8002c92:	b121      	cbz	r1, 8002c9e <gpio_stm32_isr+0x12>
	gpio_fire_callbacks(&data->cb, data->dev, BIT(line));
 8002c94:	2501      	movs	r5, #1
 8002c96:	685e      	ldr	r6, [r3, #4]
	return node->next;
 8002c98:	680c      	ldr	r4, [r1, #0]
 8002c9a:	4085      	lsls	r5, r0
 8002c9c:	b901      	cbnz	r1, 8002ca0 <gpio_stm32_isr+0x14>
}
 8002c9e:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->pin_mask & pins) {
 8002ca0:	688a      	ldr	r2, [r1, #8]
 8002ca2:	402a      	ands	r2, r5
 8002ca4:	d002      	beq.n	8002cac <gpio_stm32_isr+0x20>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
 8002ca6:	684b      	ldr	r3, [r1, #4]
 8002ca8:	4630      	mov	r0, r6
 8002caa:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8002cac:	b11c      	cbz	r4, 8002cb6 <gpio_stm32_isr+0x2a>
 8002cae:	6823      	ldr	r3, [r4, #0]
 8002cb0:	4621      	mov	r1, r4
 8002cb2:	461c      	mov	r4, r3
 8002cb4:	e7f2      	b.n	8002c9c <gpio_stm32_isr+0x10>
 8002cb6:	4623      	mov	r3, r4
 8002cb8:	e7fa      	b.n	8002cb0 <gpio_stm32_isr+0x24>

08002cba <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
 8002cba:	4770      	bx	lr

08002cbc <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
 8002cbc:	b140      	cbz	r0, 8002cd0 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
 8002cbe:	68c3      	ldr	r3, [r0, #12]
 8002cc0:	7858      	ldrb	r0, [r3, #1]
 8002cc2:	f010 0001 	ands.w	r0, r0, #1
 8002cc6:	bf1e      	ittt	ne
 8002cc8:	7818      	ldrbne	r0, [r3, #0]
 8002cca:	fab0 f080 	clzne	r0, r0
 8002cce:	0940      	lsrne	r0, r0, #5
}
 8002cd0:	4770      	bx	lr

08002cd2 <arch_system_halt>:
	__asm__ volatile(
 8002cd2:	f04f 0210 	mov.w	r2, #16
 8002cd6:	f3ef 8311 	mrs	r3, BASEPRI
 8002cda:	f382 8812 	msr	BASEPRI_MAX, r2
 8002cde:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
 8002ce2:	e7fe      	b.n	8002ce2 <arch_system_halt+0x10>

08002ce4 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
 8002ce4:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
 8002ce6:	f7ff fff4 	bl	8002cd2 <arch_system_halt>

08002cea <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 8002cea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cec:	4605      	mov	r5, r0
 8002cee:	460e      	mov	r6, r1
 8002cf0:	f04f 0310 	mov.w	r3, #16
 8002cf4:	f3ef 8711 	mrs	r7, BASEPRI
 8002cf8:	f383 8812 	msr	BASEPRI_MAX, r3
 8002cfc:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
 8002d00:	f7ff fb98 	bl	8002434 <z_impl_z_current_get>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
 8002d04:	4631      	mov	r1, r6
 8002d06:	4604      	mov	r4, r0
 8002d08:	4628      	mov	r0, r5
 8002d0a:	f7ff ffeb 	bl	8002ce4 <k_sys_fatal_error_handler>
	__asm__ volatile(
 8002d0e:	f387 8811 	msr	BASEPRI, r7
 8002d12:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
 8002d16:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
 8002d18:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002d1c:	f7fe bce6 	b.w	80016ec <z_impl_k_thread_abort>

08002d20 <z_early_memset>:
	(void) memset(dst, c, n);
 8002d20:	f7ff be19 	b.w	8002956 <memset>

08002d24 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
 8002d24:	f7ff be0c 	b.w	8002940 <memcpy>

08002d28 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
 8002d28:	b508      	push	{r3, lr}
	__asm__ volatile(
 8002d2a:	f04f 0210 	mov.w	r2, #16
 8002d2e:	f3ef 8311 	mrs	r3, BASEPRI
 8002d32:	f382 8812 	msr	BASEPRI_MAX, r2
 8002d36:	f3bf 8f6f 	isb	sy
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
 8002d3a:	f7fe fa49 	bl	80011d0 <arch_cpu_idle>
 8002d3e:	e7f4      	b.n	8002d2a <idle+0x2>

08002d40 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
 8002d40:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
 8002d44:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 8002d46:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8002d48:	2300      	movs	r3, #0
	node->prev = NULL;
 8002d4a:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
 8002d4e:	4770      	bx	lr

08002d50 <unpend_thread_no_timeout>:
{
 8002d50:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
 8002d52:	f7ff fff5 	bl	8002d40 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 8002d56:	7b43      	ldrb	r3, [r0, #13]
 8002d58:	f023 0302 	bic.w	r3, r3, #2
 8002d5c:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	6083      	str	r3, [r0, #8]
}
 8002d62:	bd08      	pop	{r3, pc}

08002d64 <z_thread_timeout>:
{
 8002d64:	b510      	push	{r4, lr}
 8002d66:	4601      	mov	r1, r0
 8002d68:	f04f 0310 	mov.w	r3, #16
 8002d6c:	f3ef 8411 	mrs	r4, BASEPRI
 8002d70:	f383 8812 	msr	BASEPRI_MAX, r3
 8002d74:	f3bf 8f6f 	isb	sy
		if (!killed) {
 8002d78:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
 8002d7c:	f013 0f28 	tst.w	r3, #40	; 0x28
 8002d80:	d10d      	bne.n	8002d9e <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
 8002d82:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
 8002d86:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
 8002d88:	b10b      	cbz	r3, 8002d8e <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
 8002d8a:	f7ff ffe1 	bl	8002d50 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 8002d8e:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
 8002d92:	f023 0314 	bic.w	r3, r3, #20
 8002d96:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
 8002d9a:	f7ff fa43 	bl	8002224 <ready_thread>
	__asm__ volatile(
 8002d9e:	f384 8811 	msr	BASEPRI, r4
 8002da2:	f3bf 8f6f 	isb	sy
}
 8002da6:	bd10      	pop	{r4, pc}

08002da8 <z_ready_thread>:
{
 8002da8:	b510      	push	{r4, lr}
	__asm__ volatile(
 8002daa:	f04f 0310 	mov.w	r3, #16
 8002dae:	f3ef 8411 	mrs	r4, BASEPRI
 8002db2:	f383 8812 	msr	BASEPRI_MAX, r3
 8002db6:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
 8002dba:	f7ff fa33 	bl	8002224 <ready_thread>
	__asm__ volatile(
 8002dbe:	f384 8811 	msr	BASEPRI, r4
 8002dc2:	f3bf 8f6f 	isb	sy
}
 8002dc6:	bd10      	pop	{r4, pc}

08002dc8 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 8002dc8:	4603      	mov	r3, r0
 8002dca:	b920      	cbnz	r0, 8002dd6 <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002dcc:	f3ef 8205 	mrs	r2, IPSR
 8002dd0:	b90a      	cbnz	r2, 8002dd6 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
 8002dd2:	f7fe ba63 	b.w	800129c <arch_swap>
 8002dd6:	f383 8811 	msr	BASEPRI, r3
 8002dda:	f3bf 8f6f 	isb	sy
}
 8002dde:	4770      	bx	lr

08002de0 <z_reschedule_unlocked>:
	__asm__ volatile(
 8002de0:	f04f 0310 	mov.w	r3, #16
 8002de4:	f3ef 8011 	mrs	r0, BASEPRI
 8002de8:	f383 8812 	msr	BASEPRI_MAX, r3
 8002dec:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 8002df0:	f7ff bfea 	b.w	8002dc8 <z_reschedule_irqlock>

08002df4 <z_abort_timeout>:
{
 8002df4:	b510      	push	{r4, lr}
 8002df6:	f04f 0210 	mov.w	r2, #16
 8002dfa:	f3ef 8411 	mrs	r4, BASEPRI
 8002dfe:	f382 8812 	msr	BASEPRI_MAX, r2
 8002e02:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
 8002e06:	6803      	ldr	r3, [r0, #0]
 8002e08:	b13b      	cbz	r3, 8002e1a <z_abort_timeout+0x26>
			remove_timeout(to);
 8002e0a:	f7ff fbc5 	bl	8002598 <remove_timeout>
			ret = 0;
 8002e0e:	2000      	movs	r0, #0
	__asm__ volatile(
 8002e10:	f384 8811 	msr	BASEPRI, r4
 8002e14:	f3bf 8f6f 	isb	sy
}
 8002e18:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
 8002e1a:	f06f 0015 	mvn.w	r0, #21
 8002e1e:	e7f7      	b.n	8002e10 <z_abort_timeout+0x1c>

08002e20 <z_set_timeout_expiry>:
{
 8002e20:	b570      	push	{r4, r5, r6, lr}
 8002e22:	4604      	mov	r4, r0
 8002e24:	460d      	mov	r5, r1
	__asm__ volatile(
 8002e26:	f04f 0310 	mov.w	r3, #16
 8002e2a:	f3ef 8611 	mrs	r6, BASEPRI
 8002e2e:	f383 8812 	msr	BASEPRI_MAX, r3
 8002e32:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
 8002e36:	f7ff fb87 	bl	8002548 <next_timeout>
			      || (ticks <= next_to);
 8002e3a:	2801      	cmp	r0, #1
 8002e3c:	dd07      	ble.n	8002e4e <z_set_timeout_expiry+0x2e>
 8002e3e:	42a0      	cmp	r0, r4
 8002e40:	db05      	blt.n	8002e4e <z_set_timeout_expiry+0x2e>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
 8002e42:	42a0      	cmp	r0, r4
 8002e44:	4629      	mov	r1, r5
 8002e46:	bfa8      	it	ge
 8002e48:	4620      	movge	r0, r4
 8002e4a:	f7fe fee5 	bl	8001c18 <sys_clock_set_timeout>
	__asm__ volatile(
 8002e4e:	f386 8811 	msr	BASEPRI, r6
 8002e52:	f3bf 8f6f 	isb	sy
}
 8002e56:	bd70      	pop	{r4, r5, r6, pc}
